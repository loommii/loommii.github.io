<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>文章 on loommii</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in 文章 on loommii</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 08 Dec 2024 00:28:39 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>锁</title>
      <link>http://localhost:1313/posts/data/%E9%94%81/</link>
      <pubDate>Sun, 08 Dec 2024 00:28:39 +0800</pubDate>
      <guid>http://localhost:1313/posts/data/%E9%94%81/</guid>
      <description>&lt;p&gt;计算机在并发的情况下很大可能会出现数据错乱的问题，因此运入了“锁”用于解决该类问题。
常见的锁：互斥锁、自旋锁、读写锁、悲观锁、乐观锁&lt;/p&gt;
&lt;h2 id=&#34;互斥锁&#34;&gt;互斥锁&lt;/h2&gt;
&lt;p&gt;特点：容易实现，最基础的锁概念&lt;/p&gt;
&lt;p&gt;解释：在使用一个资源时，先上锁使用。上锁后其他线程都无法再上锁。直到解锁后，其他线程才能上锁使用。&lt;/p&gt;
&lt;p&gt;生活例子：公共厕所，谁要上厕所就要先上锁后使用，避免其他人也闯入使用厕所。&lt;/p&gt;
&lt;h2 id=&#34;自旋锁&#34;&gt;自旋锁&lt;/h2&gt;
&lt;p&gt;自旋锁与互斥锁十分类似。
区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自旋锁：加锁失败，线程还是会不断的去申请加锁，直到他拿到锁&lt;/li&gt;
&lt;li&gt;互斥锁：加锁失败，线程会释放CPU资源，等待解锁后在申请上锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生活例子 -&amp;gt; 公共厕所
自旋锁：不断的在门口敲门，直到里面的人出来
互斥锁：不动了，直到里面的人出来叫你。&lt;/p&gt;
&lt;h2 id=&#34;读写锁&#34;&gt;读写锁&lt;/h2&gt;
&lt;p&gt;顾名思义就是由&lt;code&gt;读锁&lt;/code&gt;和&lt;code&gt;写锁&lt;/code&gt;组成的。读数据往往是可以并发的读，并发写数据可能会导致数据不符合预期的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读数据需要满足目前无写锁。&lt;/li&gt;
&lt;li&gt;写数据需要满足目前无写锁、读锁。
生活例子：假设一个班级的考试成绩都写到同一个本子上。而学生会读成绩，老师会写成绩。学生看成绩可以同时看，而语文老师和数学老师不能并发的把成绩写到一页里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写锁可以分为 &lt;code&gt;读优先锁&lt;/code&gt;  	&lt;code&gt;写优先锁&lt;/code&gt;  &lt;code&gt;公平读写锁&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读优先锁
学生看到有老师在等待改写数据时，不理会老师继续读数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写优先锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读数据还需要满足无在等待的写锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学生看到有老师在等待改写数据时，会主动让老师写数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公平读写锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将读学请求放入一个队列，排队的去读写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学生和老师排个队伍&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;乐观锁与悲观锁&#34;&gt;乐观锁与悲观锁&lt;/h2&gt;
&lt;p&gt;互斥锁、自旋锁、读写锁都是悲观锁&lt;/p&gt;
&lt;p&gt;悲观锁：多线程同时修改共享资源的概率比较高，容易发生冲突。因此访问共享资源前需要上锁。
乐观锁：认为发生冲突的概率比较低。并不会上任何的锁，而是校验该数据是否别修改过，修改过着放弃本次操作&lt;/p&gt;</description>
    </item>
    <item>
      <title>程序与内存之间的关系</title>
      <link>http://localhost:1313/posts/data/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sun, 08 Dec 2024 00:28:20 +0800</pubDate>
      <guid>http://localhost:1313/posts/data/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;h2 id=&#34;程序与内存之间的关系&#34;&gt;程序与内存之间的关系&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数据类型本质：固定内存大小的别名&lt;/li&gt;
&lt;li&gt;数据类型的作用：编译器预算对象(变量)分配的内存空间大小&lt;/li&gt;
&lt;li&gt;内存四区:栈区(Stack),堆区(heap),全局区-静态全局变量区,全局区-常量区&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行流程说明&#34;&gt;运行流程说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;操作系统把物理硬盘代码load到内存&lt;/li&gt;
&lt;li&gt;操作系统把代码分成四个区&lt;/li&gt;
&lt;li&gt;操作系统找到main函数入口执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;内存四区&#34;&gt;内存四区:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;栈区(Stack) :空间较小，要求数据读写性能高，数据存放时间较短暂。由编译器自动分配和释放，存放函数的参数值、函数的调用流程方法地址、局部变量等(局部变量如果产生逃逸现象，可能会挂在在堆区)&lt;/li&gt;
&lt;li&gt;堆区(heap):空间充裕，数据存放时间较久。一般由开发者分配及释放(但是Golang中会根据变量的逃逸现象来选择是否分配到栈上或堆上)，启动Golang的GC由GC清除机制自动回收。&lt;/li&gt;
&lt;li&gt;全局区-静态全局变量区:全局变量的开辟是在程序在main之前就已经放在内存中。而且对外完全可见。即作用域在全部代码中，任何同包代码均可随时使用，在变量会搞混淆，而且在局部函数中如果同名称变量使用:=赋值会出现编译错误。
全局变量最终在进程退出时，由操作系统回收。&lt;/li&gt;
&lt;li&gt;全局区-常量区：常量区也归属于全局区，常量为存放数值字面值单位，即不可修改。或者说的有的常量是直接挂钩字面值的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cl&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cl是字面量10的对等符号。&lt;/p&gt;
&lt;p&gt;所以在golang中，常量是无法取出地址的，因为字面量符号并没有地址而言。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程、线程、协程</title>
      <link>http://localhost:1313/posts/data/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 08 Dec 2024 00:28:02 +0800</pubDate>
      <guid>http://localhost:1313/posts/data/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;从计算机的发展上,这概念从大到小的顺序是&lt;code&gt;程序-&amp;gt;进程-&amp;gt;线程-&amp;gt;协程&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基础概念&#34;&gt;基础概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程：系统进行资源调度和分配的的基本单位&lt;/li&gt;
&lt;li&gt;线程：线程是操作系统调度与执行的基础单位&lt;/li&gt;
&lt;li&gt;协程：又称为用户级线程、微线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心点&#34;&gt;核心点&lt;/h2&gt;
&lt;h3 id=&#34;进程&#34;&gt;进程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;是操作系统资源调度的基础单位单元；&lt;/li&gt;
&lt;li&gt;进程是能独立运行、独立获取资源的基本单位&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;线程&#34;&gt;线程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;是操作系统最小调度单元；&lt;/li&gt;
&lt;li&gt;创建、销毁、调度交由内核完成，cpu 需完成用户态与内核态间的切换；&lt;/li&gt;
&lt;li&gt;可充分利用多核，实现并行.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;协程&#34;&gt;协程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;与线程存在映射关系，为 M：1；&lt;/li&gt;
&lt;li&gt;创建、销毁、调度在用户态完成，对内核透明，所以更轻；&lt;/li&gt;
&lt;li&gt;从属同一个内核级线程，无法并行；一个协程阻塞会导致从属同一线程的所有协程无法执行.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生活例子
CPU 电力
进程 工厂
线程 工厂部门&lt;/p&gt;
&lt;p&gt;假设这个城市就一个工厂(进程)、 一个工厂部门(线程)、一条电线(单核)的情况。
这时候工厂(进程) 中的一个工厂部门(线程)，电线(单核)可以完全为他工作。&lt;/p&gt;
&lt;p&gt;但是现在出现问题了，现在任务量太大了，工厂就划分了2个工厂部门(线程)，让这2个部门同时干活，但是现在只有一条电线(单核)，因此这2个部门不得不轮流用电（CPU时间片）。&lt;/p&gt;
&lt;p&gt;但是现在又出现问题了，老板发现切换电源需要有资质的电工来操作（内核），每次切换的开销太大了。因此把这些让一个工厂部门(线程)长期通电，自己内部让原先2个部门的人轮流进去通电的工厂部门内工作。应为这是工厂内部的人员（用户态）调度，不涉及电工（内核态）。切换的代价相对较小，这就是协程&lt;/p&gt;</description>
    </item>
    <item>
      <title>原码、反码、补码、移码</title>
      <link>http://localhost:1313/posts/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/</link>
      <pubDate>Sun, 08 Dec 2024 00:24:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/</guid>
      <description>&lt;h2 id=&#34;名词解释&#34;&gt;名词解释&lt;/h2&gt;
&lt;p&gt;原码:原码是最简单的整数表示方法，其中最高位用来表示符号（0表示正数，1表示负数），其余位表示数值的绝对值。例如，+5的原码是00000101，-5的原码是10000101。
反码:反码是通过对原码取反得到的，即将正数的原码保持不变，负数的原码的所有位取反（包括符号位）。例如，+5的反码是00000101（与原码相同），-5的反码是11111010。
补码:补码是计算机中最常用的整数表示方法。正数的补码与其原码相同，而负数的补码是其反码加1。补码的特点是在进行加减法运算时，不需要单独处理符号位。例如，+5的补码是00000101，-5的补码是11111011。
移码:移码是一种不常见的整数表示方法，在计算机领域中较少使用。它与补码类似，但是所有的数值都被偏移了一个固定的值，通常是一个中间值，以使得正数的表示始终比负数的表示更大。这种表示方法在某些特殊的硬件设计中可能会使用。
&lt;img alt=&#34;关系&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/%E5%85%B3%E7%B3%BB.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;原码为正数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;整数 +1
0000 0001  // 原码
0000 0001  // 反码  // 正数的 反码 = 原码
0000 0001  // 补码  // 正数的 补码 = 反码 = 原码
1000 0001  // 移码  // 移码 = 补码的符号位取反
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;原码为0&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;整数 +0
0000 0000  // 原码
0000 0000  // 反码  // 正数的 反码 = 原码
0000 0000  // 补码  // 正数的 补码 = 反码 = 原码
1000 0000  // 移码  // 移码 = 补码的符号位取反

整数 -0
1000 0000  // 原码
1111 1111  // 反码  // 负数的 反码 = 原码除符号位不变 其他全取反
0000 0000  // 补码  // 负数的 补码 = 反码+1 //这里由于越界,取后8位则结果为8个0
1000 0000  // 移码  // 移码 = 补码的符号位取反
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;原码为负数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;整数 -1
1000 0001  // 原码
1111 1110  // 反码  // 负数的 反码 = 原码除符号位不变 其他全取反
1111 1111  // 补码  // 负数的 补码 = 反码+1
0110 1111  // 移码  // 移码 = 补码的符号位取反
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;p&gt;原码：符合人类直觉，是最简单的整数表示方法&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
