<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文章 on </title>
    <link>/skill/</link>
    <description>Recent content in 文章 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 18 Dec 2024 14:16:42 +0800</lastBuildDate><atom:link href="/skill/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go: GPM的数量限制</title>
      <link>/posts/skill/data/go_gpm%E7%9A%84%E6%95%B0%E9%87%8F%E9%99%90%E5%88%B6/</link>
      <pubDate>Wed, 18 Dec 2024 14:16:42 +0800</pubDate>
      
      <guid>/posts/skill/data/go_gpm%E7%9A%84%E6%95%B0%E9%87%8F%E9%99%90%E5%88%B6/</guid>
      <description>G 协程的抽象
Goroutine (go /ruːˈtiːn/ 谐音 Go 如 听) 经 Golang 优化后的特殊“协程”
限制 语言上无任何的限制,但是理论上会受到机器的内存限制,每个G创建时会占用4KB左右的内存空间
注：Goroutine 创建所需申请的 2-4KB 是需要连续的内存块。
M 系统线程的抽象
在 Go 的并发模型中，G（Goroutine）是一个轻量级的执行单元，它需要通过系统线程（M）来执行。 每个 G 都会被映射到一个可用的 M 上，M 是操作系统层面的线程，负责实际的 CPU 执行。
限制 M 是可以通过runtime下的 debug包SetMaxThreads函数去设置的。默认值为10,000 个线程 官方文档
 SetMaxThreads 设置 Go 程序可以使用的操作系统线程的最大数量。如果程序尝试使用超过这个数量的线程，程序将崩溃。SetMaxThreads 返回之前的设置值。初始设置为 10,000 个线程。 ? 这个限制控制的是操作系统线程的数量，而不是 goroutine 的数量。只有当 goroutine 准备运行，但所有现有的线程都因系统调用、cgo 调用被阻塞，或者由于使用了 runtime.LockOSThread 被锁定给其他 goroutine 时，Go 程序才会创建一个新的线程。
SetMaxThreads 主要用于限制那些创建无限数量线程的程序的影响。其目的是在程序把操作系统拖垮之前先把程序本身终止掉。
 P p即 processor，是 golang 中的调度器；
p 是 gmp 的中枢，借由 p 承上启下，实现 g 和 m 之间的动态有机结合；</description>
    </item>
    
    <item>
      <title>Go: Map 是并发安全的吗？</title>
      <link>/posts/skill/data/go_map%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</link>
      <pubDate>Mon, 16 Dec 2024 20:06:16 +0800</pubDate>
      
      <guid>/posts/skill/data/go_map%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</guid>
      <description>结论 并发读安全，并发写不安全
原因 // map(集合)底层结构 type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. 	// Make sure this stays in sync with the compiler&amp;#39;s definition. 	count int // # live cells == size of map. Must be first (used by len() builtin) 	flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) 	noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details 	hash0 uint32 // hash seed  buckets unsafe.</description>
    </item>
    
    <item>
      <title>Go: 为什么Map是无序的</title>
      <link>/posts/skill/data/go_%E4%B8%BA%E4%BB%80%E4%B9%88map%E6%98%AF%E6%97%A0%E5%BA%8F%E7%9A%84/</link>
      <pubDate>Mon, 16 Dec 2024 19:47:30 +0800</pubDate>
      
      <guid>/posts/skill/data/go_%E4%B8%BA%E4%BB%80%E4%B9%88map%E6%98%AF%E6%97%A0%E5%BA%8F%E7%9A%84/</guid>
      <description>底层结构 // map(集合) type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. 	// Make sure this stays in sync with the compiler&amp;#39;s definition. 	count int // # live cells == size of map. Must be first (used by len() builtin) 	flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) 	noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details 	hash0 uint32 // hash seed  buckets unsafe.</description>
    </item>
    
    <item>
      <title>Go: slice(切片) 和 map(集合) 未初始化操作会怎样</title>
      <link>/posts/skill/data/go_map_slice%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E4%BC%9A%E6%80%8E%E6%A0%B7/</link>
      <pubDate>Mon, 16 Dec 2024 19:03:04 +0800</pubDate>
      
      <guid>/posts/skill/data/go_map_slice%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E4%BC%9A%E6%80%8E%E6%A0%B7/</guid>
      <description>底层结构 // slice(切片) type SliceHeader struct { Data uintptr // 底层数组的地址 	Len int // 长度 	Cap int // 容量 } // map(集合) type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. 	// Make sure this stays in sync with the compiler&amp;#39;s definition. 	count int // # live cells == size of map. Must be first (used by len() builtin) 	flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) 	noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details 	hash0 uint32 // hash seed  buckets unsafe.</description>
    </item>
    
    <item>
      <title>Go: slice(切片) 和array(数组) 的区别</title>
      <link>/posts/skill/data/go_slice%E5%92%8Carray%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 16 Dec 2024 16:10:18 +0800</pubDate>
      
      <guid>/posts/skill/data/go_slice%E5%92%8Carray%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>底层结构 array(数组) Go数组与C数组十分类似，数组是具有相同唯一类型的一组已编号且长度固定的数据项序列
关键字: 相同类型,长度固定，序列
slice(切片) type SliceHeader struct { Data uintptr // 底层数组的地址 	Len int // 长度 	Cap int // 容量 } Go 语言切片是对数组的抽象。结构中包含底层数组、长度、容量
初始化 array(数组) var numbers [5]int // 声明长度为5的数组,数组内容全为默认零值,int的零值为0 var numbers = [5]int{1, 2, 3, 4, 5} // 声明长度为5的数组,数组内容全为{}内的值。 [1 2 3 4 5] numbers := [5]int{1, 2, 3}// 声明长度为5的数组,数组内容全为{}内的值,少的部分为默认零值。 [1 2 3 0 0] numbers := [5]int{1, 2, 3, 4, 5, 6}// 由于{}内的值超过了数组超度编译不通过 numbers := [.</description>
    </item>
    
    <item>
      <title>服务设计_如何设计一个URL短链服务</title>
      <link>/posts/skill/data/%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1_%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAurl%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 09 Dec 2024 13:57:51 +0800</pubDate>
      
      <guid>/posts/skill/data/%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1_%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAurl%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/</guid>
      <description>什么是URL短链服务 URL短链服务的本质是通过HTTP 302重定向机制，将一个简短的URL重定向到原始的长URL。
短链服务解决了什么问题  解决消息发送的字数限制问题 例如，腾讯云SMS限制每条短信的字数为500个字符，而在营销短信中，通常会携带包含大量参数的URL（如邀请平台、邀请人、活动ID等）。这些参数使得URL变得非常冗长。通过URL短链服务，营销短信中的长URL可以被替换为一个简短的短链，节省了字数空间。  隐藏请求参数 以营销活动为例，URL中的常见参数可能包括活动ID等信息。如果我们不希望这些ID被随便修改，可以在参数中添加对应的活动ID KEY，这样只有当ID和KEY匹配时，用户才能进入相应的活动页面。然而，添加了KEY后，原本的URL会变得更加冗长。短链服务可以帮助隐藏这些请求参数，保持URL简洁且安全。  最基础的需求  长链登记 短链重定向  短链KEY为什么选择 Base62 编码 根据 RFC3986 标准，URL 由 ASCII 字符组成，以下字符可以安全地在 URL 中使用：
 字母（a-z 和 A-Z） 数字（0-9） 部分特殊字符：$-_.+!*&#39;(), 虽然RFC3986标准允许一些特殊字符，但有些特殊字符可能会对URL解析、传输或存储造成问题。例如，字符如 &amp;amp;, ?, =, # 等在查询参数或路径中有特定意义，因此它们可能引起冲突或产生解析错误。   为了避免这些潜在的麻烦，特别是在需要将复杂的查询参数或密钥编码为 URL 友好的格式时，我们通常会选择 Base62 编码，即只使用字母（大小写）和数字的组合。
 短链KEY的长度选择 我们字符集已经确定为Base62,因此长度为1 可以存储 62种。每增加一位，存储的极限数量会按 62 的指数增长。
   长度 存储极限 解释     1 62 1 位可以表示 62 种不同的组合   2 62 × 62 = 3,844 2 位可以表示 62 的平方，即 3,844 种不同的组合   3 62 × 62 × 62 = 238,328 3 位可以表示 62 的三次方，即 238,328 种不同的组合   4 62 × 62 × 62 × 62 = 14,776,336 4 位可以表示 62 的四次方，即 14,776,336 种不同的组合   5 62 × 62 × 62 × 62 × 62 = 916,132,832 5 位可以表示 62 的五次方，即 916,132,832种不同的组合   6 62 × 62 × 62 × 62 × 62 × 62 = 56,800,235,584 6 位可以表示 62 的六次方，即 56,800,235,584 种不同的组合     5位的存储极限已经达到916,132,832,这个数量已经非常大，足以支持大多数应用场景。然而，如果你希望进一步减少生成字符时的冲突、长远规划，选择 6 位 作为短链 KEY 长度会是一个不错的选择。</description>
    </item>
    
    <item>
      <title>浅谈GO GC (垃圾回收)</title>
      <link>/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Mon, 09 Dec 2024 13:03:08 +0800</pubDate>
      
      <guid>/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>垃圾回收   垃圾回收这里的垃圾指的是什么？为什么要回收？ 在程序运行的时候，进程会在堆内存申请内存空间。但是在函数退出的时候会栈空间会被销毁。因此这一段堆内存空间没有任何的指针指向它（没有被引用）。因此会造成内存的浪费（内存泄露）。这一段的没有被引用的内存就是“垃圾”。，程序员不再需要手动管理内存的分配和释放，从而减少了由于内存管理不当引起的内存泄漏或悬空指针等问题。
  常见的GC有哪几种
 手动垃圾回收，代表语言（C，C++） 标记-清扫算法  三色标记法   标记-整理算法  移动整理法 复制整理法   分代回收 引用计数    简述常见的GC如何实现，和他们各自的优缺点。
 手动垃圾回收：  实现：程序员自行调用函数销毁 优点：程序员对程序内存的掌控自由。 缺点：容易出现提前释放（悬挂指针）、忘记释放（内存泄漏)等问题。   标记-清扫算法：  实现：标记从根节点（栈内存、数据段）能追踪到的数据为游泳数据，其他未标记的数据就是垃圾数据，将对垃圾数据进行回收 优点：实现相对简单， 缺点：容易造成内存碎片化   标记-整理算法：  实现：  标记阶段与标记-清扫算法一致。 整理阶段：  移动整理法：整理移动有用的数据，使有用的数据尽可能紧凑的放在内存里。  优点：解决了内存碎片化的问题 缺点：多次扫描移动，会带来不小的性能开销   复制整理法：将内存划分为Form和To，将From空间中的有用数据都复制到To空间。并将Form和To空间的角色对换。  优点：解决了多次扫描移动的性能问题 缺点：内存使用率低。只有一半的堆内存空间被使用         分代回收：  实现：基于弱分代假说。将数据分为新生代、老年代。新生代、老年代采用不同的回收算法   引用计数  实现：每次对象应用都会更新对象的引用计数，当引用计数为0就回收该空间 优点：可以及时回收垃圾内存 缺点：高频更新引用计数会有不小性能开销，循环引用会导致引用计数永远不为0      什么是STW，为什么会有STW。 STW（stop the world）简单的就是让用户程序停下来。 STW期间，程序会进行垃圾回收</description>
    </item>
    
    <item>
      <title>锁</title>
      <link>/posts/skill/data/%E9%94%81/</link>
      <pubDate>Sun, 08 Dec 2024 00:28:39 +0800</pubDate>
      
      <guid>/posts/skill/data/%E9%94%81/</guid>
      <description>计算机在并发的情况下很大可能会出现数据错乱的问题，因此运入了“锁”用于解决该类问题。 常见的锁：互斥锁、自旋锁、读写锁、悲观锁、乐观锁
互斥锁 特点：容易实现，最基础的锁概念
解释：在使用一个资源时，先上锁使用。上锁后其他线程都无法再上锁。直到解锁后，其他线程才能上锁使用。
生活例子：公共厕所，谁要上厕所就要先上锁后使用，避免其他人也闯入使用厕所。
自旋锁 自旋锁与互斥锁十分类似。 区别：
 自旋锁：加锁失败，线程还是会不断的去申请加锁，直到他拿到锁 互斥锁：加锁失败，线程会释放CPU资源，等待解锁后在申请上锁。  生活例子 -&amp;gt; 公共厕所 自旋锁：不断的在门口敲门，直到里面的人出来 互斥锁：不动了，直到里面的人出来叫你。
读写锁 顾名思义就是由读锁和写锁组成的。读数据往往是可以并发的读，并发写数据可能会导致数据不符合预期的情况
 读数据需要满足目前无写锁。 写数据需要满足目前无写锁、读锁。 生活例子：假设一个班级的考试成绩都写到同一个本子上。而学生会读成绩，老师会写成绩。学生看成绩可以同时看，而语文老师和数学老师不能并发的把成绩写到一页里。  读写锁可以分为 读优先锁 写优先锁 公平读写锁
  读优先锁 学生看到有老师在等待改写数据时，不理会老师继续读数据
  写优先锁
 读数据还需要满足无在等待的写锁  学生看到有老师在等待改写数据时，会主动让老师写数据。
  公平读写锁
 将读学请求放入一个队列，排队的去读写  学生和老师排个队伍
  乐观锁与悲观锁 互斥锁、自旋锁、读写锁都是悲观锁
悲观锁：多线程同时修改共享资源的概率比较高，容易发生冲突。因此访问共享资源前需要上锁。 乐观锁：认为发生冲突的概率比较低。并不会上任何的锁，而是校验该数据是否别修改过，修改过着放弃本次操作</description>
    </item>
    
    <item>
      <title>程序与内存之间的关系</title>
      <link>/posts/skill/data/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sun, 08 Dec 2024 00:28:20 +0800</pubDate>
      
      <guid>/posts/skill/data/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>程序与内存之间的关系  数据类型本质：固定内存大小的别名 数据类型的作用：编译器预算对象(变量)分配的内存空间大小 内存四区:栈区(Stack),堆区(heap),全局区-静态全局变量区,全局区-常量区  运行流程说明  操作系统把物理硬盘代码load到内存 操作系统把代码分成四个区 操作系统找到main函数入口执行  内存四区:  栈区(Stack) :空间较小，要求数据读写性能高，数据存放时间较短暂。由编译器自动分配和释放，存放函数的参数值、函数的调用流程方法地址、局部变量等(局部变量如果产生逃逸现象，可能会挂在在堆区) 堆区(heap):空间充裕，数据存放时间较久。一般由开发者分配及释放(但是Golang中会根据变量的逃逸现象来选择是否分配到栈上或堆上)，启动Golang的GC由GC清除机制自动回收。 全局区-静态全局变量区:全局变量的开辟是在程序在main之前就已经放在内存中。而且对外完全可见。即作用域在全部代码中，任何同包代码均可随时使用，在变量会搞混淆，而且在局部函数中如果同名称变量使用:=赋值会出现编译错误。 全局变量最终在进程退出时，由操作系统回收。 全局区-常量区：常量区也归属于全局区，常量为存放数值字面值单位，即不可修改。或者说的有的常量是直接挂钩字面值的。  比如:
const cl = 10 cl是字面量10的对等符号。
所以在golang中，常量是无法取出地址的，因为字面量符号并没有地址而言。</description>
    </item>
    
    <item>
      <title>进程、线程、协程</title>
      <link>/posts/skill/data/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 08 Dec 2024 00:28:02 +0800</pubDate>
      
      <guid>/posts/skill/data/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>从计算机的发展上,这概念从大到小的顺序是程序-&amp;gt;进程-&amp;gt;线程-&amp;gt;协程
 基础概念  进程：系统进行资源调度和分配的的基本单位 线程：线程是操作系统调度与执行的基础单位 协程：又称为用户级线程、微线程  核心点 进程  是操作系统资源调度的基础单位单元； 进程是能独立运行、独立获取资源的基本单位  线程  是操作系统最小调度单元； 创建、销毁、调度交由内核完成，cpu 需完成用户态与内核态间的切换； 可充分利用多核，实现并行.  协程  与线程存在映射关系，为 M：1； 创建、销毁、调度在用户态完成，对内核透明，所以更轻； 从属同一个内核级线程，无法并行；一个协程阻塞会导致从属同一线程的所有协程无法执行.  生活例子 CPU 电力 进程 工厂 线程 工厂部门
假设这个城市就一个工厂(进程)、 一个工厂部门(线程)、一条电线(单核)的情况。 这时候工厂(进程) 中的一个工厂部门(线程)，电线(单核)可以完全为他工作。
但是现在出现问题了，现在任务量太大了，工厂就划分了2个工厂部门(线程)，让这2个部门同时干活，但是现在只有一条电线(单核)，因此这2个部门不得不轮流用电（CPU时间片）。
但是现在又出现问题了，老板发现切换电源需要有资质的电工来操作（内核），每次切换的开销太大了。因此把这些让一个工厂部门(线程)长期通电，自己内部让原先2个部门的人轮流进去通电的工厂部门内工作。应为这是工厂内部的人员（用户态）调度，不涉及电工（内核态）。切换的代价相对较小，这就是协程</description>
    </item>
    
    <item>
      <title>原码、反码、补码、移码</title>
      <link>/posts/skill/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/</link>
      <pubDate>Sun, 08 Dec 2024 00:24:00 +0800</pubDate>
      
      <guid>/posts/skill/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/</guid>
      <description>名词解释 原码:原码是最简单的整数表示方法，其中最高位用来表示符号（0表示正数，1表示负数），其余位表示数值的绝对值。例如，+5的原码是00000101，-5的原码是10000101。 反码:反码是通过对原码取反得到的，即将正数的原码保持不变，负数的原码的所有位取反（包括符号位）。例如，+5的反码是00000101（与原码相同），-5的反码是11111010。 补码:补码是计算机中最常用的整数表示方法。正数的补码与其原码相同，而负数的补码是其反码加1。补码的特点是在进行加减法运算时，不需要单独处理符号位。例如，+5的补码是00000101，-5的补码是11111011。 移码:移码是一种不常见的整数表示方法，在计算机领域中较少使用。它与补码类似，但是所有的数值都被偏移了一个固定的值，通常是一个中间值，以使得正数的表示始终比负数的表示更大。这种表示方法在某些特殊的硬件设计中可能会使用。 例子  原码为正数  整数 +10000 0001 // 原码0000 0001 // 反码 // 正数的 反码 = 原码0000 0001 // 补码 // 正数的 补码 = 反码 = 原码1000 0001 // 移码 // 移码 = 补码的符号位取反原码为0  整数 +00000 0000 // 原码0000 0000 // 反码 // 正数的 反码 = 原码0000 0000 // 补码 // 正数的 补码 = 反码 = 原码1000 0000 // 移码 // 移码 = 补码的符号位取反整数 -01000 0000 // 原码1111 1111 // 反码 // 负数的 反码 = 原码除符号位不变 其他全取反0000 0000 // 补码 // 负数的 补码 = 反码+1 //这里由于越界,取后8位则结果为8个01000 0000 // 移码 // 移码 = 补码的符号位取反原码为负数  整数 -11000 0001 // 原码1111 1110 // 反码 // 负数的 反码 = 原码除符号位不变 其他全取反1111 1111 // 补码 // 负数的 补码 = 反码+10110 1111 // 移码 // 移码 = 补码的符号位取反应用场景 原码：符合人类直觉，是最简单的整数表示方法</description>
    </item>
    
  </channel>
</rss>
