[{"content":"以下代码输出什么：\npackage main func main() { var x *struct { s [][32]byte } println(len(x.s[99])) } A：运行时 panic；B：32；C：编译错误；D：0 🔑 答案解析： 答案B\n返回结果总是 int； 返回结果有可能是常量； 有时对函数参数不求值，即编译期确定返回值； 这里 len(x.s[99]) 因为s的切片类型是[32]byte，因此得len(x.s[99]) = 32\n这里要清楚 len 和 cap 是不会panic的是编译器完成的功能 表达式 x.s[99] 没有包含 channel 接收也不是函数调用，因此在编译阶段就已经确定返回的值\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250523/","summary":"\u003cp\u003e以下代码输出什么：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e [][\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  println(len(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e99\u003c/span\u003e]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：运行时 panic；B：32；C：编译错误；D：0\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答案B\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回结果总是 int；\u003c/li\u003e\n\u003cli\u003e返回结果有可能是常量；\u003c/li\u003e\n\u003cli\u003e有时对函数参数不求值，即编译期确定返回值；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这里 len(x.s[99])\n因为s的切片类型是[32]byte，因此得len(x.s[99]) = 32\u003c/p\u003e\n\u003cp\u003e这里要清楚 len 和 cap 是不会panic的是编译器完成的功能\n表达式 x.s[99] 没有包含 channel 接收也不是函数调用，因此在编译阶段就已经确定返回的值\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_20250523"},{"content":"下面这段代码输出什么？\nfunc main() { a := 1 b := 2 defer calc(\u0026#34;1\u0026#34;, a, calc(\u0026#34;10\u0026#34;, a, b)) a = 0 defer calc(\u0026#34;2\u0026#34;, a, calc(\u0026#34;20\u0026#34;, a, b)) b = 1 } func calc(index string, a, b int) int { ret := a + b fmt.Println(index, a, b, ret) return ret } 🔑 答案解析： 10 1 2 3 20 0 2 2 2 0 2 2 1 1 3 4 程序执行到 main() 函数三行代码的时候，会先执行 calc() 函数的 b 参数，即：calc(\u0026ldquo;10\u0026rdquo;,a,b)，输出：10 1 2 3，得到值 3，因为 defer 定义的函数是延迟函数，故 calc(\u0026ldquo;1\u0026rdquo;,1,3) 会被延迟执行；\n程序执行到第五行的时候，同样先执行 calc(\u0026ldquo;20\u0026rdquo;,a,b) 输出：20 0 2 2 得到值 2，同样将 calc(\u0026ldquo;2\u0026rdquo;,0,2) 延迟执行；\n程序执行到末尾的时候，按照栈先进后出的方式依次执行：calc(\u0026ldquo;2\u0026rdquo;,0,2)，calc(\u0026ldquo;1\u0026rdquo;,1,3)，则就依次输出：2 0 2 2，1 1 3 4。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250522/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;10\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;20\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e10 1 2 3\n20 0 2 2\n2 0 2 2\n1 1 3 4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e程序执行到 main() 函数三行代码的时候，会先执行 calc() 函数的 b 参数，即：calc(\u0026ldquo;10\u0026rdquo;,a,b)，输出：10 1 2 3，得到值 3，因为\ndefer 定义的函数是延迟函数，故 calc(\u0026ldquo;1\u0026rdquo;,1,3) 会被延迟执行；\u003c/p\u003e\n\u003cp\u003e程序执行到第五行的时候，同样先执行 calc(\u0026ldquo;20\u0026rdquo;,a,b) 输出：20 0 2 2 得到值 2，同样将 calc(\u0026ldquo;2\u0026rdquo;,0,2) 延迟执行；\u003c/p\u003e\n\u003cp\u003e程序执行到末尾的时候，按照栈先进后出的方式依次执行：calc(\u0026ldquo;2\u0026rdquo;,0,2)，calc(\u0026ldquo;1\u0026rdquo;,1,3)，则就依次输出：2 0 2 2，1 1 3 4。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250522"},{"content":"给你一个由 \u0026lsquo;1\u0026rsquo;（陆地）和 \u0026lsquo;0\u0026rsquo;（水）组成的的二维网格，请你计算网格中岛屿的数量。\n岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\n此外，你可以假设该网格的四条边均被水包围。\n示例 1：\n输入：grid = [ [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;] ] 输出：1 示例 2：\n输入：grid = [ [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;] ] 输出：3 提示：\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 300 grid[i][j] 的值为 '0' 或 '1' func numIslands(grid [][]byte) int { } func numIslands(grid [][]byte) int { ans := 0 var dfs func(row, col int) dfs = func(i, j int) { // 深度优先 尽可能往里面走 grid[i][j] = \u0026#39;0\u0026#39; // 判断四周的 // 上 if i \u0026gt; 0 \u0026amp;\u0026amp; grid[i-1][j] == \u0026#39;1\u0026#39; { dfs(i-1, j) } // 左 if j \u0026gt; 0 \u0026amp;\u0026amp; grid[i][j-1] == \u0026#39;1\u0026#39; { dfs(i, j-1) } // 右 if i \u0026lt; len(grid)-1 \u0026amp;\u0026amp; grid[i+1][j] == \u0026#39;1\u0026#39; { dfs(i+1, j) } // 下 if j \u0026lt; len(grid[i])-1 \u0026amp;\u0026amp; grid[i][j+1] == \u0026#39;1\u0026#39; { dfs(i, j+1) } } for i := 0; i \u0026lt; len(grid); i++ { for j := 0; j \u0026lt; len(grid[i]); j++ { if grid[i][j] == \u0026#39;1\u0026#39; { ans++ dfs(i, j) } } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/200_%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/","summary":"\u003cp\u003e给你一个由 \u0026lsquo;1\u0026rsquo;（陆地）和 \u0026lsquo;0\u0026rsquo;（水）组成的的二维网格，请你计算网格中岛屿的数量。\u003c/p\u003e\n\u003cp\u003e岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\u003c/p\u003e\n\u003cp\u003e此外，你可以假设该网格的四条边均被水包围。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：grid = [\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;]\n]\n输出：1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：grid = [\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;]\n]\n输出：3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003em == grid.length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003en == grid[i].length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= m, n \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e 的值为 \u003ccode\u003e'0'\u003c/code\u003e 或 \u003ccode\u003e'1'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumIslands\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e [][]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumIslands\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e [][]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erow\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecol\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) { \u003cspan style=\"color:#75715e\"\u003e// 深度优先 尽可能往里面走\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 判断四周的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 上\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 左\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 右\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 下\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e])\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]); \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egrid\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"200_岛屿数量"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { m := map[int]string{0: \u0026#34;zero\u0026#34;, 1: \u0026#34;one\u0026#34;} for k, v := range m { fmt.Println(k, v) } } 🔑 答案解析： 答案解析： 参考答案及解析：\n0 zero 1 one // 或者 1 one 0 zero 在线运行\nmap 的输出是无序的。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250521/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zero\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答案解析：\n参考答案及解析：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0 zero\n1 one\n// 或者\n1 one\n0 zero\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/9oYfWSMuJBr\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003emap 的输出是无序的。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250521"},{"content":"以下代码有什么问题？\npackage main import ( \u0026#34;sync\u0026#34; ) const N = 10 var wg = \u0026amp;sync.WaitGroup{} func main() { for i := 0; i \u0026lt; N; i++ { go func(i int) { wg.Add(1) println(i) defer wg.Done() }(i) } wg.Wait() } 🔑 答案解析： 运行后的现象为什么都没有输出 WaitGroup(等待组)的目的是用于等待一组协程的结束。 内部会维护一个计数器 Add方法向内部计数加上delta Done方法减少WaitGroup计数器的值 Wait方法阻塞直到WaitGroup计数器减为0。\n本题中,for 循环中go func 创建协程。 在协程运行是执行wg.Add(1)和wg.Done()\n而在子goroutine运行前，主goroutine已经运行到wg.Wait()。这时候计数器为0因此不阻塞，main goroutine 结束后，进程结束。 因此子goroutine没有输出内容\n修改：\nfunc main() { for i := 0; i \u0026lt; N; i++ { wg.Add(1) // 1. ADD放到主goroutine中 go func(i int) { defer wg.Done() // 2. 建议一进来就执行defer wg.Done(),预防panic导致Done方法未执行 println(i) }(i) } wg.Wait() } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250520/","summary":"\u003cp\u003e以下代码有什么问题？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e运行后的现象为什么都没有输出\nWaitGroup(等待组)的目的是用于等待一组协程的结束。\n内部会维护一个计数器\nAdd方法向内部计数加上delta\nDone方法减少WaitGroup计数器的值\nWait方法阻塞直到WaitGroup计数器减为0。\u003c/p\u003e\n\u003cp\u003e本题中,for 循环中go func 创建协程。\n在协程运行是执行wg.Add(1)和wg.Done()\u003c/p\u003e\n\u003cp\u003e而在子goroutine运行前，主goroutine已经运行到wg.Wait()。这时候计数器为0因此不阻塞，main goroutine 结束后，进程结束。\n因此子goroutine没有输出内容\u003c/p\u003e\n\u003cp\u003e修改：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 1. ADD放到主goroutine中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 2. 建议一进来就执行defer wg.Done(),预防panic导致Done方法未执行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250520"},{"content":"下面这段代码输出什么？\nfunc change(s ...int) { s = append(s,3) } func main() { slice := make([]int,5,5) slice[0] = 1 slice[1] = 2 change(slice...) fmt.Println(slice) change(slice[0:2]...) fmt.Println(slice) } 🔑 答案解析： [1 2 0 0 0] [1 2 3 0 0] 知识点：可变函数、append()操作。\nGo 提供的语法糖\u0026hellip;，可以将 slice 传进可变函数，不会创建新的切片。第一次调用 change() 时，append() 操作使切片底层数组发生了扩容，原 slice 的底层数组不会改变； 第二次调用change() 函数时，使用了操作符[i,j]获得一个新的切片，假定为 slice1， 它的底层数组和原切片底层数组是重合的，不过 slice1 的长度、容量分别是 2、5，所以在 change() 函数中对 slice1 底层数组的修改会影响到原切片。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250519/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[1 2 0 0 0]\n[1 2 3 0 0]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e知识点：可变函数、append()操作。\u003c/p\u003e\n\u003cp\u003eGo 提供的语法糖\u0026hellip;，可以将 slice 传进可变函数，不会创建新的切片。第一次调用 change() 时，append() 操作使切片底层数组发生了扩容，原 slice 的底层数组不会改变； 第二次调用change() 函数时，使用了操作符[i,j]获得一个新的切片，假定为 slice1，\n它的底层数组和原切片底层数组是重合的，不过 slice1 的长度、容量分别是 2、5，所以在 change() 函数中对 slice1 底层数组的修改会影响到原切片。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250519"},{"content":"下面这段代码能否通过编译，如果可以，输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { s1 := []int{1, 2, 3} s2 := []int{4, 5} s1 = append(s1, s2) fmt.Println(s1) } 🔑 答案解析： 在线运行\n不能通过编译。\nappend() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：\nappend(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250518/","summary":"\u003cp\u003e下面这段代码能否通过编译，如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/xOWsWj0Evni\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e不能通过编译。\u003cbr\u003e\nappend() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：\u003cbr\u003e\nappend(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250518"},{"content":"下面的代码有几处语法问题，各是什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var x string = nil if x == nil { x = \u0026#34;default\u0026#34; } fmt.Println(x) } 🔑 答案解析： ./prog.go:8:17: cannot use nil as string value in variable declaration ./prog.go:9:10: invalid operation: x == nil (mismatched types string and untyped nil) var x string = nil 错误 在 Go 语言中，string 类型的零值是空字符串 \u0026quot;\u0026quot;，而不是 nil。nil 通常用于指针、切片、映射、通道、接口等类型。因此，将 nil 赋值给 string 类型的变量 x 会导致编译错误。\n正确的写法应该是：var x string 或 var x string = \u0026quot;\u0026quot;。\nif x == nil 错误 由于 x 是 string 类型，不能与 nil 进行比较。string 类型的变量应该与空字符串 \u0026quot;\u0026quot; 进行比较。\n正确的写法应该是：if x == \u0026quot;\u0026quot;。\nackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var x string = \u0026#34;\u0026#34; // 或者直接写 var x string if x == \u0026#34;\u0026#34; { x = \u0026#34;default\u0026#34; } fmt.Println(x) } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250517/","summary":"\u003cp\u003e下面的代码有几处语法问题，各是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./prog.go:8:17: cannot use nil as string value in variable declaration\n./prog.go:9:10: invalid operation: x == nil (mismatched types string and untyped nil)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"var-x-string--nil-错误\"\u003e\u003ccode\u003evar x string = nil\u003c/code\u003e 错误\u003c/h3\u003e\n\u003cp\u003e在 Go 语言中，\u003ccode\u003estring\u003c/code\u003e 类型的零值是空字符串 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e，而不是 \u003ccode\u003enil\u003c/code\u003e。\u003ccode\u003enil\u003c/code\u003e 通常用于指针、切片、映射、通道、接口等类型。因此，将 \u003ccode\u003enil\u003c/code\u003e 赋值给 \u003ccode\u003estring\u003c/code\u003e 类型的变量 \u003ccode\u003ex\u003c/code\u003e 会导致编译错误。\u003c/p\u003e\n\u003cp\u003e正确的写法应该是：\u003ccode\u003evar x string\u003c/code\u003e 或 \u003ccode\u003evar x string = \u0026quot;\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"if-x--nil-错误\"\u003e\u003ccode\u003eif x == nil\u003c/code\u003e 错误\u003c/h3\u003e\n\u003cp\u003e由于 \u003ccode\u003ex\u003c/code\u003e 是 \u003ccode\u003estring\u003c/code\u003e 类型，不能与 \u003ccode\u003enil\u003c/code\u003e 进行比较。\u003ccode\u003estring\u003c/code\u003e 类型的变量应该与空字符串 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e 进行比较。\u003c/p\u003e","title":"Go每日一题_20250517"},{"content":"A、B、C、D 哪些选项有语法错误？\ntype S struct { } func f(x interface{}) { } func g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A g(s) //B f(p) //C g(p) //D } 🔑 答案解析： BD 在线运行\n函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\n永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\n参数为 *interface{} 时，只能接受空接口的指针，而不是任何类型\nfunc g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A var r interface{} = p g(\u0026amp;r) //D } 例如这样 D就不会报错了，但是不建议这样使用\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250516/","summary":"\u003cp\u003eA、B、C、D 哪些选项有语法错误？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eBD \u003ca href=\"https://go.dev/play/p/sXFam1hdBhS\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e参数为 *interface{} 时，只能接受空接口的指针，而不是任何类型\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如这样 D就不会报错了，但是不建议这样使用\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250516"},{"content":"下面 A、B 两处应该填入什么代码，才能确保顺利打印出结果？\ntype S struct { m string } func f() *S { return __ //A } func main() { p := __ //B fmt.Println(p.m) //print \u0026#34;foo\u0026#34; } 🔑 答案解析： A. \u0026amp;S{\u0026ldquo;foo\u0026rdquo;} B. *f() 或者 f()\nf() 函数返回参数是指针类型，所以可以用 \u0026amp; 取结构体的指针；B 处，如果填 f()，则 p 是 S 类型；如果填 f()，则 p 是S 类型，不过都可以使用 p.m 取得结构体的成员。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250515/","summary":"\u003cp\u003e下面 A、B 两处应该填入什么代码，才能确保顺利打印出结果？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//print \u0026#34;foo\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA. \u0026amp;S{\u0026ldquo;foo\u0026rdquo;}\nB. *f() 或者 f()\u003c/p\u003e\n\u003cp\u003ef() 函数返回参数是指针类型，所以可以用 \u0026amp; 取结构体的指针；B 处，如果填 \u003cem\u003ef()，则 p 是 S 类型；如果填 f()，则 p 是\u003c/em\u003eS 类型，不过都可以使用 p.m 取得结构体的成员。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250515"},{"content":"A、B、C、D 哪些选项有语法错误？\ntype S struct { } func f(x interface{}) { } func g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A g(s) //B f(p) //C g(p) //D } 🔑 答案解析： BD 在线运行\n函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\n永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\n参数为 *interface{} 时，只能接受空接口的指针，而不是任何类型\nfunc g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A var r interface{} = p g(\u0026amp;r) //D } 例如这样 D就不会报错了，但是不建议这样使用\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250514/","summary":"\u003cp\u003eA、B、C、D 哪些选项有语法错误？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eBD \u003ca href=\"https://go.dev/play/p/sXFam1hdBhS\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e参数为 *interface{} 时，只能接受空接口的指针，而不是任何类型\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如这样 D就不会报错了，但是不建议这样使用\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250514"},{"content":"下面的两个切片声明中有什么区别？哪个更可取？\nA. var a []int B. a := []int{} 🔑 答案解析： A 声明的 []int 未初始化 指向的nil B 声明的 []int 是已经初始化的 指向的内容为空的数组。\nA 可以写到全局 B 只能写到函数内\nA 与 B 占用的内存空间理论上是相同的。 注意：空切片empty slice 指向了一个固定地址，所以实际上确实没有分配内存。\n但是B比A 多指向的内容为空的数组，这个操作也会消耗而外性能(🤏),在性能的角度上A具有优势\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250513/","summary":"\u003cp\u003e下面的两个切片声明中有什么区别？哪个更可取？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e. \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e. \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA 声明的 []int 未初始化 指向的nil\nB 声明的 []int 是已经初始化的 指向的内容为空的数组。\u003c/p\u003e\n\u003cp\u003eA 可以写到全局\nB 只能写到函数内\u003c/p\u003e\n\u003cp\u003eA 与 B 占用的内存空间理论上是相同的。\n注意：空切片empty slice 指向了一个固定地址，所以实际上确实没有分配内存。\u003c/p\u003e\n\u003cp\u003e但是B比A 多指向的内容为空的数组，这个操作也会消耗而外性能(🤏),在性能的角度上A具有优势\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250513"},{"content":"下面代码输出什么？\ntype Person struct { age int } func main() { person := \u0026amp;Person{28} // 1. defer fmt.Println(person.age) // 2. defer func(p *Person) { fmt.Println(p.age) }(person) // 3. defer func() { fmt.Println(person.age) }() person = \u0026amp;Person{29} } 🔑 答案解析： 答案解析：\n参考答案及解析：29 28 28。\n这道题之前题目的基础上做了一点点小改动，前一题最后一行代码 person.age = 29 是修改引用对象的成员 age，这题最后一行代码 person = \u0026amp;Person{29} 是修改引用对象本身，来看看有什么区别。\nperson.age 这一行代码跟之前含义是一样的，此时是将 28 当做 defer 函数的参数，会把 28 缓存在栈中，等到最后执行该 defer 语句的时候取出，即输出 28； defer 缓存的是结构体 Person{28} 的地址，这个地址指向的结构体没有被改变，最后 defer 语句后面的函数执行的时候取出仍是 28； 闭包引用，person 的值已经被改变，指向结构体 Person{29}，所以输出 29. 由于 defer 的执行顺序为先进后出，即 3 2 1，所以输出 29 28 28。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250512/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 3.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003cstrong\u003e答案解析：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e参考答案及解析：\u003ccode\u003e29\u003c/code\u003e \u003ccode\u003e28\u003c/code\u003e \u003ccode\u003e28\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这道题之前题目的基础上做了一点点小改动，前一题最后一行代码 \u003ccode\u003eperson.age = 29\u003c/code\u003e 是修改引用对象的成员 \u003ccode\u003eage\u003c/code\u003e，这题最后一行代码 \u003ccode\u003eperson = \u0026amp;Person{29}\u003c/code\u003e 是修改引用对象本身，来看看有什么区别。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eperson.age\u003c/code\u003e 这一行代码跟之前含义是一样的，此时是将 \u003ccode\u003e28\u003c/code\u003e 当做 \u003ccode\u003edefer\u003c/code\u003e 函数的参数，会把 \u003ccode\u003e28\u003c/code\u003e 缓存在栈中，等到最后执行该 \u003ccode\u003edefer\u003c/code\u003e 语句的时候取出，即输出 \u003ccode\u003e28\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edefer\u003c/code\u003e 缓存的是结构体 \u003ccode\u003ePerson{28}\u003c/code\u003e 的地址，这个地址指向的结构体没有被改变，最后 \u003ccode\u003edefer\u003c/code\u003e 语句后面的函数执行的时候取出仍是 \u003ccode\u003e28\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e闭包引用，\u003ccode\u003eperson\u003c/code\u003e 的值已经被改变，指向结构体 \u003ccode\u003ePerson{29}\u003c/code\u003e，所以输出 \u003ccode\u003e29\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e由于 \u003ccode\u003edefer\u003c/code\u003e 的执行顺序为\u003cstrong\u003e先进后出\u003c/strong\u003e，即 \u003ccode\u003e3\u003c/code\u003e \u003ccode\u003e2\u003c/code\u003e \u003ccode\u003e1\u003c/code\u003e，所以输出 \u003ccode\u003e29\u003c/code\u003e \u003ccode\u003e28\u003c/code\u003e \u003ccode\u003e28\u003c/code\u003e。\u003c/p\u003e","title":"Go每日一题_20250512"},{"content":"下面这段代码正确的输出是什么？\npackage main import \u0026#34;fmt\u0026#34; func f() { defer fmt.Println(\u0026#34;D\u0026#34;) fmt.Println(\u0026#34;F\u0026#34;) } func main() { f() fmt.Println(\u0026#34;M\u0026#34;) } A. F M D B. D F M C. F D M 🔑 答案解析： 🔑 答案解析：\nC\n在线运行\ndefer 语句在返回之前就会被执行，所以输出顺序是 F D M。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250511/","summary":"\u003cp\u003e下面这段代码正确的输出是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;D\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;F\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. F M D\u003c/li\u003e\n\u003cli\u003eB. D F M\u003c/li\u003e\n\u003cli\u003eC. F D M\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cblockquote\u003e\n\u003cp\u003e🔑 \u003cstrong\u003e答案解析：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eC\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/e6iBnPWk-UM\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edefer\u003c/code\u003e 语句在返回之前就会被执行，所以输出顺序是 F D M。\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250511"},{"content":"以下代码是否能正常运行，结果是？\npackage main func main() { v := new(int) *v = 2 println(5/+-*v) } 🔑 答案解析： 可以正常运行 运行结果为 -2\n在线运行\n表达式解析 5/+-*v Go 语言的运算符优先级规则\nunary_op = \u0026ldquo;+\u0026rdquo; | \u0026ldquo;-\u0026rdquo; | \u0026ldquo;!\u0026rdquo; | \u0026ldquo;^\u0026rdquo; | \u0026ldquo;*\u0026rdquo; | \u0026ldquo;\u0026amp;\u0026rdquo; | \u0026ldquo;\u0026lt;-\u0026rdquo; .\n题中一元运算符(+、-、* )\n+、- 和 * 同时也是算术运算符中的加、减和乘。\n表达式: 5/+-v。5 后面 /，很显然，这是除法。 而 + 前面没有操作数，因此是一个一元运算符；同理 - 和 也是一元运算符。而一元运算符有最高的优先级，因此这个表达式优先计算 +-*v 的值。\n在规范中有这么一句话：\n对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释） +x 是 0 + x -x 取其负值 是 0 - x\n因此+-*v可以转化为 0+(0-(*v))\n带入*v = 2 得 0+(0-(2))\n因此结果变成了求 5/-2 的值\n答案为 -2\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250510/","summary":"\u003cp\u003e以下代码是否能正常运行，结果是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/+-*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e可以正常运行 运行结果为 -2\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/5A8BdXFzaOf\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"表达式解析\"\u003e表达式解析\u003c/h2\u003e\n\u003cp\u003e5/+-*v\nGo 语言的\u003ca href=\"https://golang.google.cn/ref/spec#Operators\"\u003e运算符\u003c/a\u003e优先级规则\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eunary_op   = \u0026ldquo;+\u0026rdquo; | \u0026ldquo;-\u0026rdquo; | \u0026ldquo;!\u0026rdquo; | \u0026ldquo;^\u0026rdquo; | \u0026ldquo;*\u0026rdquo; | \u0026ldquo;\u0026amp;\u0026rdquo; | \u0026ldquo;\u0026lt;-\u0026rdquo; .\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题中一元运算符(+、-、* )\u003c/p\u003e\n\u003cp\u003e+、- 和 * 同时也是算术运算符中的加、减和乘。\u003c/p\u003e\n\u003cp\u003e表达式: 5/+-\u003cem\u003ev。5 后面 /，很显然，这是除法。\n而 + 前面没有操作数，因此是一个一元运算符；同理 - 和\u003c/em\u003e 也是一元运算符。而一元运算符有最高的优先级，因此这个表达式优先计算 +-*v 的值。\u003c/p\u003e\n\u003cp\u003e在规范中有这么一句话：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释）\n+x         是 0 + x\n-x 取其负值 是 0 - x\u003c/p\u003e","title":"Go每日一题_20250510"},{"content":"通常，JS 面试，闭包应该是必考的题目。随着越来越多的语言对函数式范式的支持，闭包问题经常出现。在 Go 语言中也是如此。\n这是 Go 语言爱好者周刊第 90 期的一道题目。以下代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func app() func(string) string { t := \u0026#34;Hi\u0026#34; c := func(b string) string { t = t + \u0026#34; \u0026#34; + b return t } return c } func main() { a := app() b := app() a(\u0026#34;go\u0026#34;) fmt.Println(b(\u0026#34;All\u0026#34;)) fmt.Println(a(\u0026#34;All\u0026#34;)) } 🔑 答案解析： 闭包 fmt.Println(b(\u0026ldquo;All\u0026rdquo;)) 输出 A （Hi All） fmt.Println(a(\u0026ldquo;All\u0026rdquo;)) 输出 B （Hi go All）\npackage main import \u0026#34;fmt\u0026#34; func app() func(string) string { // 1. 每次调用 app() 时，都会创建一个新的、独立的局部变量 \u0026#39;t\u0026#39;。 // 它的初始值是 \u0026#34;Hi\u0026#34;。 t := \u0026#34;Hi\u0026#34; // 2. 定义一个匿名函数（闭包 \u0026#39;c\u0026#39;）。 // 这个闭包 \u0026#39;c\u0026#39; \u0026#34;捕获\u0026#34;其外部作用域中的变量 \u0026#39;t\u0026#39;。 // 这意味着 \u0026#39;c\u0026#39; 持有对它创建时所在的 app() 函数作用域中的那个特定 \u0026#39;t\u0026#39; 的引用。 c := func(b string) string { // 3. 当闭包 \u0026#39;c\u0026#39; 被调用时，它会修改它所捕获的那个 \u0026#39;t\u0026#39;。 // 这个 \u0026#39;t\u0026#39; 是在 \u0026#39;c\u0026#39; 被创建时就确定的 \u0026#39;t\u0026#39;。 t = t + \u0026#34; \u0026#34; + b return t } // 4. 返回这个闭包 \u0026#39;c\u0026#39;。 return c } func main() { // 5. 第一次调用 app(): // - 在 app() 内部，创建了一个 \u0026#39;t\u0026#39; (我们称之为 t_for_a)，初始值为 \u0026#34;Hi\u0026#34;。 // - 创建了一个闭包，这个闭包捕获了 t_for_a。 // - 这个闭包被赋值给变量 \u0026#39;a\u0026#39;。 // - 所以，\u0026#39;a\u0026#39; 现在是一个函数，它内部保留了对 t_for_a 的引用。 a := app() // 此时，\u0026#39;a\u0026#39; 绑定的 \u0026#39;t\u0026#39; (t_for_a) 的值是 \u0026#34;Hi\u0026#34; // 6. 第二次调用 app(): // - 再次在 app() 内部，创建了另一个 *全新的、独立的* \u0026#39;t\u0026#39; (我们称之为 t_for_b)，初始值也为 \u0026#34;Hi\u0026#34;。 // - 创建了另一个 *全新的、独立的* 闭包，这个闭包捕获了 t_for_b。 // - 这个闭包被赋值给变量 \u0026#39;b\u0026#39;。 // - 所以，\u0026#39;b\u0026#39; 现在是一个函数，它内部保留了对 t_for_b 的引用。 // - 关键点：t_for_a 和 t_for_b 是两个完全不同的内存位置上的变量。 b := app() // 此时，\u0026#39;b\u0026#39; 绑定的 \u0026#39;t\u0026#39; (t_for_b) 的值是 \u0026#34;Hi\u0026#34;。 // \u0026#39;a\u0026#39; 绑定的 \u0026#39;t\u0026#39; (t_for_a) 的值仍然是 \u0026#34;Hi\u0026#34;，不受影响。 // 7. 调用闭包 \u0026#39;a\u0026#39;，并传入参数 \u0026#34;go\u0026#34;: // - \u0026#39;a\u0026#39; 内部的 t_for_a 被修改：t_for_a = \u0026#34;Hi\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;go\u0026#34; =\u0026gt; t_for_a 变为 \u0026#34;Hi go\u0026#34;。 // - a(\u0026#34;go\u0026#34;) 的返回值是 \u0026#34;Hi go\u0026#34;，但这里没有使用这个返回值。 a(\u0026#34;go\u0026#34;) // 执行后：t_for_a = \u0026#34;Hi go\u0026#34;。 t_for_b 仍然是 \u0026#34;Hi\u0026#34;。 // 8. 调用闭包 \u0026#39;b\u0026#39;，并传入参数 \u0026#34;All\u0026#34;: // - \u0026#39;b\u0026#39; 内部的 t_for_b 被修改：t_for_b = \u0026#34;Hi\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;All\u0026#34; =\u0026gt; t_for_b 变为 \u0026#34;Hi All\u0026#34;。 // - b(\u0026#34;All\u0026#34;) 的返回值是 \u0026#34;Hi All\u0026#34;。 fmt.Println(b(\u0026#34;All\u0026#34;)) // 输出: Hi All // 执行后：t_for_a = \u0026#34;Hi go\u0026#34;。 t_for_b = \u0026#34;Hi All\u0026#34;。 // 9. 再次调用闭包 \u0026#39;a\u0026#39;，并传入参数 \u0026#34;All\u0026#34;: // - \u0026#39;a\u0026#39; 内部的 t_for_a (当前值为 \u0026#34;Hi go\u0026#34;) 被修改：t_for_a = \u0026#34;Hi go\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;All\u0026#34; =\u0026gt; t_for_a 变为 \u0026#34;Hi go All\u0026#34;。 // - a(\u0026#34;All\u0026#34;) 的返回值是 \u0026#34;Hi go All\u0026#34;。 fmt.Println(a(\u0026#34;All\u0026#34;)) // 输出: Hi go All // 执行后：t_for_a = \u0026#34;Hi go All\u0026#34;。 t_for_b = \u0026#34;Hi All\u0026#34;。 } /* 输出是什么？ 这里考的是go闭包的问题 最终输出： Hi All Hi go All */ ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250509/","summary":"\u003cp\u003e通常，JS 面试，闭包应该是必考的题目。随着越来越多的语言对函数式范式的支持，闭包问题经常出现。在 Go 语言中也是如此。\u003c/p\u003e\n\u003cp\u003e这是 Go 语言爱好者周刊第 90 期的一道题目。以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;go\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e闭包\nfmt.Println(b(\u0026ldquo;All\u0026rdquo;)) 输出  A （Hi All）\nfmt.Println(a(\u0026ldquo;All\u0026rdquo;)) 输出  B  （Hi go All）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 1. 每次调用 app() 时，都会创建一个新的、独立的局部变量 \u0026#39;t\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    它的初始值是 \u0026#34;Hi\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 2. 定义一个匿名函数（闭包 \u0026#39;c\u0026#39;）。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    这个闭包 \u0026#39;c\u0026#39; \u0026#34;捕获\u0026#34;其外部作用域中的变量 \u0026#39;t\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    这意味着 \u0026#39;c\u0026#39; 持有对它创建时所在的 app() 函数作用域中的那个特定 \u0026#39;t\u0026#39; 的引用。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 3. 当闭包 \u0026#39;c\u0026#39; 被调用时，它会修改它所捕获的那个 \u0026#39;t\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//    这个 \u0026#39;t\u0026#39; 是在 \u0026#39;c\u0026#39; 被创建时就确定的 \u0026#39;t\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 4. 返回这个闭包 \u0026#39;c\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 5. 第一次调用 app():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 在 app() 内部，创建了一个 \u0026#39;t\u0026#39; (我们称之为 t_for_a)，初始值为 \u0026#34;Hi\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 创建了一个闭包，这个闭包捕获了 t_for_a。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 这个闭包被赋值给变量 \u0026#39;a\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 所以，\u0026#39;a\u0026#39; 现在是一个函数，它内部保留了对 t_for_a 的引用。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 此时，\u0026#39;a\u0026#39; 绑定的 \u0026#39;t\u0026#39; (t_for_a) 的值是 \u0026#34;Hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 6. 第二次调用 app():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 再次在 app() 内部，创建了另一个 *全新的、独立的* \u0026#39;t\u0026#39; (我们称之为 t_for_b)，初始值也为 \u0026#34;Hi\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 创建了另一个 *全新的、独立的* 闭包，这个闭包捕获了 t_for_b。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 这个闭包被赋值给变量 \u0026#39;b\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 所以，\u0026#39;b\u0026#39; 现在是一个函数，它内部保留了对 t_for_b 的引用。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - 关键点：t_for_a 和 t_for_b 是两个完全不同的内存位置上的变量。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 此时，\u0026#39;b\u0026#39; 绑定的 \u0026#39;t\u0026#39; (t_for_b) 的值是 \u0026#34;Hi\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// \u0026#39;a\u0026#39; 绑定的 \u0026#39;t\u0026#39; (t_for_a) 的值仍然是 \u0026#34;Hi\u0026#34;，不受影响。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 7. 调用闭包 \u0026#39;a\u0026#39;，并传入参数 \u0026#34;go\u0026#34;:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - \u0026#39;a\u0026#39; 内部的 t_for_a 被修改：t_for_a = \u0026#34;Hi\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;go\u0026#34;  =\u0026gt;  t_for_a 变为 \u0026#34;Hi go\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - a(\u0026#34;go\u0026#34;) 的返回值是 \u0026#34;Hi go\u0026#34;，但这里没有使用这个返回值。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;go\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 执行后：t_for_a = \u0026#34;Hi go\u0026#34;。 t_for_b 仍然是 \u0026#34;Hi\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 8. 调用闭包 \u0026#39;b\u0026#39;，并传入参数 \u0026#34;All\u0026#34;:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - \u0026#39;b\u0026#39; 内部的 t_for_b 被修改：t_for_b = \u0026#34;Hi\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;All\u0026#34;  =\u0026gt;  t_for_b 变为 \u0026#34;Hi All\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - b(\u0026#34;All\u0026#34;) 的返回值是 \u0026#34;Hi All\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All\u0026#34;\u003c/span\u003e)) \u003cspan style=\"color:#75715e\"\u003e// 输出: Hi All\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 执行后：t_for_a = \u0026#34;Hi go\u0026#34;。 t_for_b = \u0026#34;Hi All\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 9. 再次调用闭包 \u0026#39;a\u0026#39;，并传入参数 \u0026#34;All\u0026#34;:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - \u0026#39;a\u0026#39; 内部的 t_for_a (当前值为 \u0026#34;Hi go\u0026#34;) 被修改：t_for_a = \u0026#34;Hi go\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;All\u0026#34;  =\u0026gt;  t_for_a 变为 \u0026#34;Hi go All\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//    - a(\u0026#34;All\u0026#34;) 的返回值是 \u0026#34;Hi go All\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All\u0026#34;\u003c/span\u003e)) \u003cspan style=\"color:#75715e\"\u003e// 输出: Hi go All\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 执行后：t_for_a = \u0026#34;Hi go All\u0026#34;。 t_for_b = \u0026#34;Hi All\u0026#34;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e输出是什么？ 这里考的是go闭包的问题\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e最终输出：\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003eHi All\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003eHi go All\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250509"},{"content":"力扣链接: https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/\n力扣难度 中等\n已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：\n若旋转 4 次，则可以得到 [4,5,6,7,0,1,2] 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7] 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。\n给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。\n你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。\n示例 1：\n输入：nums = [3,4,5,1,2] 输出：1 **解释：**原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n示例 2：\n输入：nums = [4,5,6,7,0,1,2] 输出：0 **解释：**原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。\n示例 3：\n输入：nums = [11,13,15,17] 输出：11 **解释：**原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n提示：\nn == nums.length 1 \u0026lt;= n \u0026lt;= 5000 -5000 \u0026lt;= nums[i] \u0026lt;= 5000 nums 中的所有整数 互不相同 nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转 func findMin(nums []int) int { } func findMin(nums []int) int { ans := nums[0] for i := 1; i \u0026lt; len(nums); i++ { ans = min(ans, nums[i]) } return ans } func findMin(nums []int) int { // 二分查找 红蓝染色法 n := len(nums) left, right := 0, n-1 for left \u0026lt; right { mid := left + (right-left)/2 if nums[mid] \u0026lt; nums[right] { // 染蓝 right = mid } else { // 染红 left = mid + 1 } } return nums[right] } ","permalink":"https://loommii.github.io/posts/leetcode/data/153_%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/","summary":"\u003cp\u003e力扣链接: \u003ca href=\"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/\"\u003ehttps://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e已知一个长度为 \u003ccode\u003en\u003c/code\u003e 的数组，预先按照升序排列，经由 \u003ccode\u003e1\u003c/code\u003e 到 \u003ccode\u003en\u003c/code\u003e 次 \u003cstrong\u003e旋转\u003c/strong\u003e 后，得到输入数组。例如，原数组 \u003ccode\u003enums = [0,1,2,4,5,6,7]\u003c/code\u003e 在变化后可能得到：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e若旋转 \u003ccode\u003e4\u003c/code\u003e 次，则可以得到 \u003ccode\u003e[4,5,6,7,0,1,2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e若旋转 \u003ccode\u003e7\u003c/code\u003e 次，则可以得到 \u003ccode\u003e[0,1,2,4,5,6,7]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注意，数组 \u003ccode\u003e[a[0], a[1], a[2], ..., a[n-1]]\u003c/code\u003e \u003cstrong\u003e旋转一次\u003c/strong\u003e 的结果为数组 \u003ccode\u003e[a[n-1], a[0], a[1], a[2], ..., a[n-2]]\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e给你一个元素值 \u003cstrong\u003e互不相同\u003c/strong\u003e 的数组 \u003ccode\u003enums\u003c/code\u003e ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 \u003cstrong\u003e最小元素\u003c/strong\u003e 。\u003c/p\u003e\n\u003cp\u003e你必须设计一个时间复杂度为 \u003ccode\u003eO(log n)\u003c/code\u003e 的算法解决此问题。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [3,4,5,1,2]\u003c/code\u003e\n\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e1\u003c/code\u003e\n**解释：**原数组为 \u003ccode\u003e[1,2,3,4,5]\u003c/code\u003e ，旋转 \u003ccode\u003e3\u003c/code\u003e 次得到输入数组。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [4,5,6,7,0,1,2]\u003c/code\u003e\n\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e0\u003c/code\u003e\n**解释：**原数组为 \u003ccode\u003e[0,1,2,4,5,6,7]\u003c/code\u003e ，旋转 \u003ccode\u003e4\u003c/code\u003e 次得到输入数组。\u003c/p\u003e","title":"153. 寻找旋转排序数组中的最小值"},{"content":"力扣链接:https://leetcode.cn/problems/find-peak-element/description/\n力扣难度 中等\n峰值元素是指其值严格大于左右相邻值的元素。\n给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。\n你可以假设 nums[-1] = nums[n] = -∞ 。\n你必须实现时间复杂度为 O(log n) 的算法来解决此问题。\n示例 示例 1： 输入：nums = [1,2,3,1] 输出：2 解释：\u0026gt; 3 是峰值元素，你的函数应该返回其索引 2。 示例 2： 输入：nums = [1,2,1,3,5,6,4] 输出：1 或 5 解释：\u0026gt; 你的函数可以返回索引 1，其峰值元素为 2； 或者返回索引 5， 其峰值元素为 6。 提示： 1 \u0026lt;= nums.length \u0026lt;= 1000 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 对于所有有效的 i 都有 nums[i] != nums[i + 1] func findPeakElement(nums []int) int { } func findPeakElement(nums []int) (idx int) { // 暴力遍历找最大值 for i, v := range nums { if v \u0026gt; nums[idx] { idx = i } } return } func findPeakElement(nums []int) (idx int) { // 二分查找 红蓝染色法 // 蓝色的第一个数就是答案 left := 0 right := len(nums) - 1 for left \u0026lt; right { mid := left + (right-left)/2 if nums[mid] \u0026lt; nums[mid+1] { left = mid + 1 } else { right = mid } } return right } ","permalink":"https://loommii.github.io/posts/leetcode/data/162_%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/","summary":"\u003cp\u003e力扣链接:https://leetcode.cn/problems/find-peak-element/description/\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e峰值元素\u003c/strong\u003e是指其值严格大于左右相邻值的元素。\u003c/p\u003e\n\u003cp\u003e给你一个整数数组 \u003ccode\u003enums\u003c/code\u003e，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 \u003cstrong\u003e任何一个峰值\u003c/strong\u003e 所在位置即可。\u003c/p\u003e\n\u003cp\u003e你可以假设 \u003ccode\u003enums[-1] = nums[n] = -∞\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e你必须实现时间复杂度为 \u003cstrong\u003eO(log n)\u003c/strong\u003e 的算法来解决此问题。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [1,2,3,1]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 3 是峰值元素，你的函数应该返回其索引 2。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [1,2,1,3,5,6,4]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e1\u003c/code\u003e 或 \u003ccode\u003e5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 你的函数可以返回索引 1，其峰值元素为 2；\n\u003cblockquote\u003e\n\u003cpre\u003e\u003ccode\u003e 或者返回索引 5， 其峰值元素为 6。\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-231 \u0026lt;= nums[i] \u0026lt;= 231 - 1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e对于所有有效的 \u003ccode\u003ei\u003c/code\u003e 都有 \u003ccode\u003enums[i] != nums[i + 1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindPeakElement\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindPeakElement\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 暴力遍历找最大值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindPeakElement\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 二分查找 红蓝染色法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 蓝色的第一个数就是答案\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e] \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"162. 寻找峰值"},{"content":"f1()、f2()、f3() 函数分别返回什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func f1() (r int) { defer func() { r++ }() return 0 } func f2() (r int) { t := 5 defer func() { t = t + 5 }() return t } func f3() (r int) { defer func(r int) { r = r + 5 }(r) return 1 } func main() { fmt.Println(f1()) fmt.Println(f2()) fmt.Println(f3()) } 🔑 答案解析： 参考答案及解析：1 5 1。\n知识点：defer、返回值。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250508/","summary":"\u003cp\u003ef1()、f2()、f3() 函数分别返回什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef3\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef3\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：1 5 1。\u003c/p\u003e\n\u003cp\u003e知识点：defer、返回值。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_20250508"},{"content":"力扣链接:34. 在排序数组中查找元素的第一个和最后一个位置\n力扣难度 中等\n给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。\n如果数组中不存在目标值 target，返回 [-1, -1]。\n你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。\n示例 示例 1： 输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] 示例 2： 输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1] 示例 3： 输入：nums = [], target = 0 输出：[-1,-1] 提示： 0 \u0026lt;= nums.length \u0026lt;= 10^5 -10^9 \u0026lt;= nums[i] \u0026lt;= 10^9 nums 是一个非递减数组 -10^9 \u0026lt;= target \u0026lt;= 10^9 func searchRange(nums []int, target int) []int { } func searchRange(nums []int, target int) []int { // 暴力遍历 // 时间复杂度 On // 空间复杂度 O1 ans := []int{-1, -1} for i, num := range nums { if target == num { if ans[0] == -1 { ans[0] = i } ans[1] = max(ans[1], i) } } return ans } func searchRange(nums []int, target int) []int { // 二分查找 + 遍历 // 时间复杂度 O(Logn) // 空间复杂度 O(1) ans := []int{-1, -1} // 二分查找 // 找到了目标数以后左右扩展下标 n := len(nums) // // 折半查找法 index := binSearch(nums, target, 0, n-1) if index == -1 { return ans } // 下标存在的 for i := index; i \u0026gt; -1 \u0026amp;\u0026amp; nums[i] == target; i-- { // 左扩张 ans[0] = i } for i := index; i \u0026lt; n \u0026amp;\u0026amp; nums[i] == target; i++ { // 右扩张 ans[1] = i } return ans } func binSearch(nums []int, target int, j, y int) int { // j 是头 // y 是尾 // 查找到的话就返回下标 否者就是-1 if y \u0026lt; j { return -1 } // 获取中间数 // midIndex := (j + y) / 2 midIndex := j + (y - j) / 2 if nums[midIndex] == target { return midIndex } // 左边 index := binSearch(nums, target, j, midIndex-1) if index != -1 { return index } // 左边 index = binSearch(nums, target, midIndex+1, y) if index != -1 { return index } return -1 } func searchRange(nums []int, target int) []int { // 二分查找 红蓝染色法 // 目的是符合 大于等于target的最小下标 // 蓝色部分一定是 大于等于 目标值的 // 红色部分一定是 小于 目标值的 // 时间复杂度 O(Logn) // 空间复杂度 O(1) start := lowerBound(nums, target) if start == len(nums) || nums[start] != target { return []int{-1, -1} // nums 中没有 target } end := lowerBound(nums, target+1) - 1 return []int{start, end} } func lowerBound(nums []int, target int) int { left, right := 0, len(nums)-1 // 闭区间 [left, right] for left \u0026lt;= right { // 区间不为空 mid := left + (right-left)/2 // 区中间值 if nums[mid] \u0026gt;= target { // 若中间值大了, 中间值右边部分会被染成蓝色 right = mid - 1 } else { left = mid + 1 } } // left 指向的就是红色 + 1 // right 指向的就是蓝色 - 1 return left } ","permalink":"https://loommii.github.io/posts/leetcode/data/34_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\"\u003e34. 在排序数组中查找元素的第一个和最后一个位置\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e给你一个按照非递减顺序排列的整数数组 \u003ccode\u003enums\u003c/code\u003e，和一个目标值 \u003ccode\u003etarget\u003c/code\u003e。请你找出给定目标值在数组中的开始位置和结束位置。\u003c/p\u003e\n\u003cp\u003e如果数组中不存在目标值 \u003ccode\u003etarget\u003c/code\u003e，返回 \u003ccode\u003e[-1, -1]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你必须设计并实现时间复杂度为 \u003cstrong\u003eO(log n)\u003c/strong\u003e 的算法解决此问题。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [5,7,7,8,8,10]\u003c/code\u003e, \u003ccode\u003etarget = 8\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[3,4]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [5,7,7,8,8,10]\u003c/code\u003e, \u003ccode\u003etarget = 6\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[-1,-1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-3\"\u003e示例 3：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = []\u003c/code\u003e, \u003ccode\u003etarget = 0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[-1,-1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-10^9 \u0026lt;= nums[i] \u0026lt;= 10^9\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e 是一个非递减数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-10^9 \u0026lt;= target \u0026lt;= 10^9\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearchRange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearchRange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 暴力遍历\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 时间复杂度 On\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 空间复杂度 O1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = max(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearchRange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 二分查找 + 遍历\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 时间复杂度 O(Logn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 空间复杂度 O(1)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 二分查找\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 找到了目标数以后左右扩展下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 折半查找法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebinSearch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 下标存在的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 左扩张\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 右扩张\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebinSearch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// j 是头\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// y 是尾\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 查找到的话就返回下标 否者就是-1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 获取中间数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// midIndex := (j + y) / 2 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emidIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003emidIndex\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emidIndex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 左边\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebinSearch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emidIndex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 左边\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ebinSearch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emidIndex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearchRange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 二分查找 红蓝染色法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 目的是符合 大于等于target的最小下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 蓝色部分一定是 大于等于 目标值的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 红色部分一定是 小于 目标值的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 时间复杂度 O(Logn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 空间复杂度 O(1)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elowerBound\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e} \u003cspan style=\"color:#75715e\"\u003e// nums 中没有 target\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eend\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elowerBound\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eend\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elowerBound\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 闭区间 [left, right]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e {           \u003cspan style=\"color:#75715e\"\u003e// 区间不为空\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 区中间值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e {     \u003cspan style=\"color:#75715e\"\u003e// 若中间值大了, 中间值右边部分会被染成蓝色\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// left 指向的就是红色 + 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// right 指向的就是蓝色 - 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"34_在排序数组中查找元素的第一个和最后一个位置"},{"content":"下面代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; type A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { var a A = Work{3} s := a.(Work) fmt.Println(s.ShowA()) fmt.Println(s.ShowB()) } A. 13 23 B. compilation error 🔑 答案解析： A 在线运行\n代码分析 接口和结构体定义：\n定义了两个接口 A 和 B，分别包含方法 ShowA() 和 ShowB()。 定义了一个结构体 Work，并为其实现了 ShowA() 和 ShowB() 方法。 接口赋值：\n在 main 函数中，var a A = Work{3} 将 Work{3} 赋值给接口变量 a。此时 a 的动态类型是 Work，动态值是 Work{3}。 类型断言：\ns := a.(Work) 通过类型断言将接口变量 a 转换为其具体类型 Work。由于 a 的动态类型确实是 Work，类型断言成功，s 是 Work{3}。 方法调用：\ns.ShowA() 调用 ShowA() 方法，返回 w.i + 10，即 3 + 10 = 13。 s.ShowB() 调用 ShowB() 方法，返回 w.i + 20，即 3 + 20 = 23。 输出结果：\nfmt.Println(s.ShowA()) 输出 13。 fmt.Println(s.ShowB()) 输出 23。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250507/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 13 23\u003c/li\u003e\n\u003cli\u003eB. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA\n\u003ca href=\"https://go.dev/play/p/dy8gUTSGZz8\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"代码分析\"\u003e\u003cstrong\u003e代码分析\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e接口和结构体定义\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定义了两个接口 \u003ccode\u003eA\u003c/code\u003e 和 \u003ccode\u003eB\u003c/code\u003e，分别包含方法 \u003ccode\u003eShowA()\u003c/code\u003e 和 \u003ccode\u003eShowB()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e定义了一个结构体 \u003ccode\u003eWork\u003c/code\u003e，并为其实现了 \u003ccode\u003eShowA()\u003c/code\u003e 和 \u003ccode\u003eShowB()\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e接口赋值\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 \u003ccode\u003emain\u003c/code\u003e 函数中，\u003ccode\u003evar a A = Work{3}\u003c/code\u003e 将 \u003ccode\u003eWork{3}\u003c/code\u003e 赋值给接口变量 \u003ccode\u003ea\u003c/code\u003e。此时 \u003ccode\u003ea\u003c/code\u003e 的动态类型是 \u003ccode\u003eWork\u003c/code\u003e，动态值是 \u003ccode\u003eWork{3}\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e类型断言\u003c/strong\u003e：\u003c/p\u003e","title":"Go每日一题_20250507"},{"content":"力扣链接: https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\n力扣难度 中等\n给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\n示例 示例 1: 输入: s = \u0026quot;abcabcbb\u0026quot; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026quot;abc\u0026quot;，所以其长度为 3。 示例 2: 输入: s = \u0026quot;bbbbb\u0026quot; 输出: 1 解释: 因为无重复字符的最长子串是 \u0026quot;b\u0026quot;，所以其长度为 1。 示例 3: 输入: s = \u0026quot;pwwkew\u0026quot; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026quot;wke\u0026quot;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，\u0026quot;pwke\u0026quot; 是一个 子序列，不是子串。\n提示： 0 \u0026lt;= s.length \u0026lt;= 5 * 10^4 s 由英文字母、数字、符号和空格组成 func lengthOfLongestSubstring(s string) int { } func lengthOfLongestSubstring(s string) int { ans := 0 left := 0 // 左下标 store := make(map[byte]int) for right, i3 := range s { i2 := byte(i3) store[i2]++ for store[i2] \u0026gt; 1 { store[s[left]]-- left++ } ans = max(ans, right-left+1) } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/3_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/","summary":"\u003cp\u003e力扣链接: \u003ca href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\"\u003ehttps://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e给定一个字符串 \u003ccode\u003es\u003c/code\u003e ，请你找出其中不含有重复字符的 \u003cstrong\u003e最长子串\u003c/strong\u003e 的长度。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003es = \u0026quot;abcabcbb\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释:\u003c/strong\u003e 因为无重复字符的最长子串是 \u003ccode\u003e\u0026quot;abc\u0026quot;\u003c/code\u003e，所以其长度为 3。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003es = \u0026quot;bbbbb\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释:\u003c/strong\u003e 因为无重复字符的最长子串是 \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e，所以其长度为 1。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-3\"\u003e示例 3:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003es = \u0026quot;pwwkew\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释:\u003c/strong\u003e 因为无重复字符的最长子串是 \u003ccode\u003e\u0026quot;wke\u0026quot;\u003c/code\u003e，所以其长度为 3。\n\u003cblockquote\u003e\n\u003cp\u003e请注意，你的答案必须是 \u003cstrong\u003e子串\u003c/strong\u003e 的长度，\u003ccode\u003e\u0026quot;pwke\u0026quot;\u003c/code\u003e 是一个 \u003cem\u003e子序列\u003c/em\u003e，不是子串。\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= s.length \u0026lt;= 5 * 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e 由英文字母、数字、符号和空格组成\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elengthOfLongestSubstring\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elengthOfLongestSubstring\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 左下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003estore\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ei2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e byte(\u003cspan style=\"color:#a6e22e\"\u003ei3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003estore\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estore\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei2\u003c/span\u003e] \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003estore\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e]]\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = max(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"3. 无重复字符的最长子串"},{"content":"力扣链接:713. 乘积小于 K 的子数组\n力扣难度 中等\n给你一个整数数组 nums 和一个整数 k ，请你返回子数组内所有元素的乘积严格小于 k 的连续子数组的数目。\n示例 示例 1： 输入：nums = [10,5,2,6], k = 100 输出：8 解释：\u0026gt; 8 个乘积小于 100 的子数组分别为：[10]、[5]、[2]、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。 需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。\n示例 2： 输入：nums = [1,2,3], k = 0 输出：0 提示: 1 \u0026lt;= nums.length \u0026lt;= 3 * 10^4 1 \u0026lt;= nums[i] \u0026lt;= 1000 0 \u0026lt;= k \u0026lt;= 10^6 func numSubarrayProductLessThanK(nums []int, k int) int { } func numSubarrayProductLessThanK(nums []int, k int) int { if k \u0026lt;= 1 { return 0 } ans := 0 prod := 1 // 乘积 left := 0 for right, num := range nums { prod *= num for prod \u0026gt;= k { prod = prod / nums[left] left++ } ans += right - left + 1 } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/713_%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8E_k_%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/subarray-product-less-than-k/\"\u003e713. 乘积小于 K 的子数组\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e给你一个整数数组 \u003ccode\u003enums\u003c/code\u003e 和一个整数 \u003ccode\u003ek\u003c/code\u003e ，请你返回子数组内所有元素的乘积严格小于 \u003ccode\u003ek\u003c/code\u003e 的连续子数组的数目。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [10,5,2,6]\u003c/code\u003e, \u003ccode\u003ek = 100\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e8\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 8 个乘积小于 100 的子数组分别为：\u003ccode\u003e[10]\u003c/code\u003e、\u003ccode\u003e[5]\u003c/code\u003e、\u003ccode\u003e[2]\u003c/code\u003e、\u003ccode\u003e[6]\u003c/code\u003e、\u003ccode\u003e[10,5]\u003c/code\u003e、\u003ccode\u003e[5,2]\u003c/code\u003e、\u003ccode\u003e[2,6]\u003c/code\u003e、\u003ccode\u003e[5,2,6]\u003c/code\u003e。\n\u003cblockquote\u003e\n\u003cp\u003e需要注意的是 \u003ccode\u003e[10,5,2]\u003c/code\u003e 并不是乘积小于 100 的子数组。\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [1,2,3]\u003c/code\u003e, \u003ccode\u003ek = 0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 3 * 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= k \u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumSubarrayProductLessThanK\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumSubarrayProductLessThanK\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprod\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 乘积\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprod\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprod\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprod\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eprod\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"713. 乘积小于 K 的子数组"},{"content":"下面代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func increaseA() int { var i int defer func() { i++ }() return i } func increaseB() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(increaseA()) fmt.Println(increaseB()) } // A. 1 1 // B. 0 1 // C. 1 0 // D. 0 0 🔑 答案解析： B 在线运行\n解析 increaseA() 的返回参数是匿名 increaseB() 是具名\n在 Go 语言中，函数返回值的内存空间会分配到调用者的栈上。先运行return赋值后运行defer。\n1. increaseA 的行为分析 func increaseA() int { var i int defer func() { i++ }() return i } 在 increaseA 的函数栈中，声明了一个局部变量 i，初始值为 0。 执行 return i 时，会将 i 的值（0）复制到调用者（main 函数）的栈上，作为返回值。 然后，defer 语句执行，将局部变量 i 的值从 0 增加到 1。 由于 defer 修改的是局部变量 i，而不是调用者栈上的返回值，因此返回值仍然是 0。 2. increaseB 的行为分析 func increaseB() (r int) { defer func() { r++ }() return r } 在 increaseB 的函数栈中，r 是一个命名返回值，其内存空间直接分配在调用者（main 函数）的栈上。 执行 return r 时，会将 r 的值（0）写入调用者栈上的返回值空间。 然后，defer 语句执行，直接修改调用者栈上的 r，将其值从 0 增加到 1。 由于 r 是命名返回值，defer 的修改会直接影响调用者栈上的值。 因此 正确答案是 B. 0 1。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_20250506/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// A. 1 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// B. 0 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C. 1 0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// D. 0 0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\n\u003ca href=\"https://go.dev/play/p/t2LDxNGFGQs\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"解析\"\u003e解析\u003c/h3\u003e\n\u003cp\u003eincreaseA() 的返回参数是匿名\nincreaseB() 是具名\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003e在 Go 语言中，函数返回值的内存空间会分配到调用者的栈上。先运行return赋值后运行defer。\u003c/p\u003e\n\u003ch5 id=\"1-increasea-的行为分析\"\u003e1. increaseA 的行为分析\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e在 increaseA 的函数栈中，声明了一个局部变量 i，初始值为 0。\u003c/li\u003e\n\u003cli\u003e执行 return i 时，会将 i 的值（0）复制到调用者（main 函数）的栈上，作为返回值。\u003c/li\u003e\n\u003cli\u003e然后，defer 语句执行，将局部变量 i 的值从 0 增加到 1。\u003c/li\u003e\n\u003cli\u003e由于 defer 修改的是局部变量 i，而不是调用者栈上的返回值，因此返回值仍然是 0。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"2-increaseb-的行为分析\"\u003e2. increaseB 的行为分析\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e在 increaseB 的函数栈中，r 是一个命名返回值，其内存空间直接分配在调用者（main 函数）的栈上。\u003c/li\u003e\n\u003cli\u003e执行 return r 时，会将 r 的值（0）写入调用者栈上的返回值空间。\u003c/li\u003e\n\u003cli\u003e然后，defer 语句执行，直接修改调用者栈上的 r，将其值从 0 增加到 1。\u003c/li\u003e\n\u003cli\u003e由于 r 是命名返回值，defer 的修改会直接影响调用者栈上的值。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e因此 正确答案是 B. 0 1。\u003c/p\u003e","title":"Go每日一题_20250506"},{"content":"力扣链接:209. 长度最小的子数组\n力扣难度 中等\n给定一个含有 n 个正整数的数组和一个正整数 target 。\n找出该数组中满足其总和大于等于 target 的长度最小的 子数组 [nums[l], nums[l+1], ..., nums[r-1], nums[r]] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\n示例 示例 1： 输入：target = 7, nums = [2,3,1,2,4,3] 输出：2 解释：\u0026gt; 子数组 [4,3] 是该条件下的长度最小的子数组。 示例 2： 输入：target = 4, nums = [1,4,4] 输出：1 示例 3： 输入：target = 11, nums = [1,1,1,1,1,1,1,1] 输出：0 提示： 1 \u0026lt;= target \u0026lt;= 10^9 1 \u0026lt;= nums.length \u0026lt;= 10^5 1 \u0026lt;= nums[i] \u0026lt;= 10^4 进阶： 如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。 func minSubArrayLen(target int, nums []int) int { } func minSubArrayLen(target int, nums []int) int { n := len(nums) ans := n + 1 s := 0 left := 0 // 左边下标 for right, num := range nums { // 右边下标 s += num for s-nums[left] \u0026gt;= target { s -= nums[left] left++ } if s \u0026gt;= target { ans = min(ans, right-left+1) } } if ans == n+1 { return 0 } return ans } func minSubArrayLen(target int, nums []int) int { n := len(nums) ans := n + 1 s := 0 left := 0 // 左边下标 for right, num := range nums { // 右边下标 s += num for s \u0026gt;= target { ans = min(ans, right-left+1) s -= nums[left] left++ } } if ans == n+1 { return 0 } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/209_%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/description/\"\u003e209. 长度最小的子数组\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e给定一个含有 \u003ccode\u003en\u003c/code\u003e 个正整数的数组和一个正整数 \u003ccode\u003etarget\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e找出该数组中满足其总和大于等于 \u003ccode\u003etarget\u003c/code\u003e 的长度最小的 \u003cstrong\u003e子数组\u003c/strong\u003e \u003ccode\u003e[nums[l], nums[l+1], ..., nums[r-1], nums[r]]\u003c/code\u003e ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003etarget = 7\u003c/code\u003e, \u003ccode\u003enums = [2,3,1,2,4,3]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 子数组 \u003ccode\u003e[4,3]\u003c/code\u003e 是该条件下的长度最小的子数组。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003etarget = 4\u003c/code\u003e, \u003ccode\u003enums = [1,4,4]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-3\"\u003e示例 3：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003etarget = 11\u003c/code\u003e, \u003ccode\u003enums = [1,1,1,1,1,1,1,1]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= target \u0026lt;= 10^9\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"进阶\"\u003e进阶：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminSubArrayLen\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminSubArrayLen\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e                      \u003cspan style=\"color:#75715e\"\u003e// 左边下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 右边下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = min(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminSubArrayLen\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e                      \u003cspan style=\"color:#75715e\"\u003e// 左边下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 右边下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = min(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"209. 长度最小的子数组"},{"content":"力扣链接:42. 接雨水\n力扣难度 困难\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n示例 示例 1： 输入：height = [0,1,0,2,1,0,1,3,2,1,2,1] 输出：6 解释：\u0026gt; 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 示例 2： 输入：height = [4,2,0,3,2,5] 输出：9 提示： n == height.length 1 \u0026lt;= n \u0026lt;= 2 * 10^4 0 \u0026lt;= height[i] \u0026lt;= 10^5 func trap(height []int) int { } func trap(height []int) int { ans := 0 n := len(height) prefixMaxNum := make([]int, n) suffixMaxNum := make([]int, n) prefixMaxNum[0] = height[0] for i := 1; i \u0026lt; n; i++ { prefixMaxNum[i] = max(height[i], prefixMaxNum[i-1]) } suffixMaxNum[n-1] = height[n-1] for i := n - 2; i \u0026gt;= 0; i-- { suffixMaxNum[i] = max(height[i], suffixMaxNum[i+1]) } for i := 0; i \u0026lt; n; i++ { ans += min(prefixMaxNum[i], suffixMaxNum[i]) - height[i] } return ans } func trap(height []int) int { ans := 0 n := len(height) left := 0 // 指向最左边 right := n - 1 // 指向最右边 pro_max := 0 // 前缀最大值 suf_max := 0 // 后缀最大值 for left \u0026lt;= right { pro_max = max(pro_max, height[left]) suf_max = max(suf_max, height[right]) if pro_max \u0026lt; suf_max { ans += pro_max - height[left] left++ } else { ans += suf_max - height[right] right-- } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/42_%E6%8E%A5%E9%9B%A8%E6%B0%B4/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/trapping-rain-water/description/\"\u003e42. 接雨水\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e困难\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e给定 \u003ccode\u003en\u003c/code\u003e 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/42_%E6%8E%A5%E9%9B%A8%E6%B0%B4/image.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003eheight = [0,1,0,2,1,0,1,3,2,1,2,1]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e6\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 上面是由数组 \u003ccode\u003e[0,1,0,2,1,0,1,3,2,1,2,1]\u003c/code\u003e 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003eheight = [4,2,0,3,2,5]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e9\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003en == height.length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 2 * 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= height[i] \u0026lt;= 10^5\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etrap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etrap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprefixMaxNum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esuffixMaxNum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprefixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprefixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = max(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eprefixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esuffixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003esuffixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = max(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003esuffixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e min(\u003cspan style=\"color:#a6e22e\"\u003eprefixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003esuffixMaxNum\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etrap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e      \u003cspan style=\"color:#75715e\"\u003e// 指向最左边\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 指向最右边\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epro_max\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 前缀最大值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esuf_max\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 后缀最大值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003epro_max\u003c/span\u003e = max(\u003cspan style=\"color:#a6e22e\"\u003epro_max\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003esuf_max\u003c/span\u003e = max(\u003cspan style=\"color:#a6e22e\"\u003esuf_max\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epro_max\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003esuf_max\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epro_max\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esuf_max\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"42. 接雨水"},{"content":"力扣链接:11. 盛最多水的容器\n力扣难度 中等\n给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。\n找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n返回容器可以储存的最大水量。\n说明： 你不能倾斜容器。\n示例 示例 1： 输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：\u0026gt; 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 示例 2： 输入：height = [1,1] 输出：1 提示： n == height.length 2 \u0026lt;= n \u0026lt;= 10^5 0 \u0026lt;= height[i] \u0026lt;= 10^4 func maxArea(height []int) int { } func maxArea(height []int) int { ans := 0 i := 0 // 左指针下标 j := len(height) - 1 // 右指针下标 // 循环 for i \u0026lt; j { // 目前的面积 ans = max(ans, min(height[j], height[i])*(j-i)) // 最小的高 * 相距的宽 if height[i] \u0026lt;= height[j] { i++ } else { j-- } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/11_%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/container-with-most-water/description/\"\u003e11. 盛最多水的容器\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e给定一个长度为 \u003ccode\u003en\u003c/code\u003e 的整数数组 \u003ccode\u003eheight\u003c/code\u003e 。有 \u003ccode\u003en\u003c/code\u003e 条垂线，第 \u003ccode\u003ei\u003c/code\u003e 条线的两个端点是 \u003ccode\u003e(i, 0)\u003c/code\u003e 和 \u003ccode\u003e(i, height[i])\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e找出其中的两条线，使得它们与 \u003ccode\u003ex\u003c/code\u003e 轴共同构成的容器可以容纳\u003cstrong\u003e最多\u003c/strong\u003e的水。\u003c/p\u003e\n\u003cp\u003e返回容器可以储存的最大水量。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e 你\u003cstrong\u003e不能倾斜容器\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/11_%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/image.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003e[1,8,6,2,5,4,8,3,7]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e49\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 图中垂直线代表输入数组 \u003ccode\u003e[1,8,6,2,5,4,8,3,7]\u003c/code\u003e。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003eheight = [1,1]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003en == height.length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2 \u0026lt;= n \u0026lt;= 10^5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= height[i] \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaxArea\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaxArea\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e               \u003cspan style=\"color:#75715e\"\u003e// 左指针下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 右指针下标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 循环\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 目前的面积\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = max(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e, min(\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e])\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)) \u003cspan style=\"color:#75715e\"\u003e// 最小的高 * 相距的宽\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"11. 盛最多水的容器"},{"content":"力扣链接:15. 三数之和\n力扣难度 中等\n给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请你返回所有和为 0 且不重复的三元组。\n注意： 答案中不可以包含重复的三元组。\n示例 示例 1： 输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 示例 2： 输入：nums = [0,1,1] 输出：[] 解释：\u0026gt; 唯一可能的三元组和不为 0 。 示例 3： 输入：nums = [0,0,0] 输出：[[0,0,0]] 解释：\u0026gt; 唯一可能的三元组和为 0 。 提示： 3 \u0026lt;= nums.length \u0026lt;= 3000 -10^5 \u0026lt;= nums[i] \u0026lt;= 10^5 func threeSum(nums []int) [][]int { } func threeSum(nums []int) [][]int { ans := make([][]int, 0) // 数组排序 // 因为 输出的顺序和三元组的顺序并不重要，因此我们将原数组顺序打乱，按照从小到大排序方便后续处理 sort.Ints(nums) // 便利选择第一个数数 K 使得后面两边的数 J L 两个数加起来 等于 K的倒数 J + L = - K n := len(nums) for i := 0; i \u0026lt; len(nums)-2; i++ { // 后面至少还有2个数，因此需要遍历到len(nums)-2 if i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i-1] { // 重复要跳过 i == 0 时前面没有数 continue } j := i + 1 l := n - 1 for j \u0026lt; l { s := nums[i] + nums[j] + nums[l] if s \u0026gt; 0 { l-- } else if s \u0026lt; 0 { j++ } else { // 找到目标 ans = append(ans, []int{nums[i], nums[j], nums[l]}) // 避免重复 继续看一下相临的数是否重复，是的话都跳过 j++ for j \u0026lt; l \u0026amp;\u0026amp; nums[j] == nums[j-1] { j++ } l-- for j \u0026lt; l \u0026amp;\u0026amp; nums[l] == nums[l+1] { l-- } } } } return ans } func threeSum(nums []int) [][]int { ans := make([][]int, 0) // 数组排序 // 因为 输出的顺序和三元组的顺序并不重要，因此我们将原数组顺序打乱，按照从小到大排序方便后续处理 sort.Ints(nums) // 便利选择第一个数数 K 使得后面两边的数 J L 两个数加起来 等于 K的倒数 J + L = - K n := len(nums) for i := 0; i \u0026lt; len(nums)-2; i++ { // 后面至少还有2个数，因此需要遍历到len(nums)-2 if i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i-1] { // 重复要跳过 i == 0 时前面没有数 continue } // 优化 一 最小的2个数和nums[i]加起来都\u0026gt;0 这不用进入 if nums[i]+nums[i+1]+nums[i+2] \u0026gt; 0 { continue } // 优化 一 最大的2个数和nums[i]加起来都\u0026lt;0 这不用进入 if nums[i]+nums[n-1]+nums[n-2] \u0026lt; 0 { continue } j := i + 1 l := n - 1 for j \u0026lt; l { s := nums[i] + nums[j] + nums[l] if s \u0026gt; 0 { l-- } else if s \u0026lt; 0 { j++ } else { // 找到目标 ans = append(ans, []int{nums[i], nums[j], nums[l]}) // 避免重复 继续看一下相临的数是否重复，是的话都跳过 j++ for j \u0026lt; l \u0026amp;\u0026amp; nums[j] == nums[j-1] { j++ } l-- for j \u0026lt; l \u0026amp;\u0026amp; nums[l] == nums[l+1] { l-- } } } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/15_%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/3sum/description/\"\u003e15. 三数之和\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e给你一个整数数组 \u003ccode\u003enums\u003c/code\u003e ，判断是否存在三元组 \u003ccode\u003e[nums[i], nums[j], nums[k]]\u003c/code\u003e 满足 \u003ccode\u003ei != j\u003c/code\u003e、\u003ccode\u003ei != k\u003c/code\u003e 且 \u003ccode\u003ej != k\u003c/code\u003e ，同时还满足 \u003ccode\u003enums[i] + nums[j] + nums[k] == 0\u003c/code\u003e 。请你返回所有和为 0 且不重复的三元组。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e 答案中不可以包含重复的三元组。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [-1,0,1,2,-1,-4]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[[-1,-1,2],[-1,0,1]]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003e不同的三元组是 \u003ccode\u003e[-1,0,1]\u003c/code\u003e 和 \u003ccode\u003e[-1,-1,2]\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003e注意，输出的顺序和三元组的顺序并不重要。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [0,1,1]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 唯一可能的三元组和不为 0 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-3\"\u003e示例 3：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [0,0,0]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[[0,0,0]]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 唯一可能的三元组和为 0 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e3 \u0026lt;= nums.length \u0026lt;= 3000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-10^5 \u0026lt;= nums[i] \u0026lt;= 10^5\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethreeSum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) [][]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethreeSum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) [][]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([][]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 数组排序\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 因为 输出的顺序和三元组的顺序并不重要，因此我们将原数组顺序打乱，按照从小到大排序方便后续处理\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInts\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 便利选择第一个数数 K 使得后面两边的数 J L 两个数加起来 等于 K的倒数 J + L = - K\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 后面至少还有2个数，因此需要遍历到len(nums)-2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] { \u003cspan style=\"color:#75715e\"\u003e// 重复要跳过 i == 0 时前面没有数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// 找到目标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e, []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e]})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// 避免重复 继续看一下相临的数是否重复，是的话都跳过\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethreeSum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) [][]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([][]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 数组排序\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 因为 输出的顺序和三元组的顺序并不重要，因此我们将原数组顺序打乱，按照从小到大排序方便后续处理\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInts\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 便利选择第一个数数 K 使得后面两边的数 J L 两个数加起来 等于 K的倒数 J + L = - K\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 后面至少还有2个数，因此需要遍历到len(nums)-2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] { \u003cspan style=\"color:#75715e\"\u003e// 重复要跳过 i == 0 时前面没有数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 优化 一 最小的2个数和nums[i]加起来都\u0026gt;0 这不用进入\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// 优化 一 最大的2个数和nums[i]加起来都\u0026lt;0 这不用进入\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// 找到目标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e, []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e]})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// 避免重复 继续看一下相临的数是否重复，是的话都跳过\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"15. 三数之和"},{"content":"下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\n1 x, _:= f() 2 x,_ = f() 3 x, y := f() 4 x, y = f() 🔑 答案解析： 1 错 2 对 3 对 4 错 变量的声明。1.错，x 已经声明，不能使用 :=；2.对；3.对，当多值赋值时，:= 左边的变量至少要有一个未声明的；4.错，y 没有声明。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_224/","summary":"\u003cp\u003e下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1 x, _:= f()\n2 x,_ = f()\n3 x, y := f()\n4 x, y = f()\n\u003c/code\u003e\u003c/pre\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  1 错\n2 对\n3 对\n4 错\n变量的声明。1.错，x 已经声明，不能使用 :=；2.对；3.对，当多值赋值时，:= 左边的变量至少要有一个未声明的；4.错，y 没有声明。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_224"},{"content":"有下面 3 行代码：\n// 32 位机器 1）var x int32 = 32.0 2）var y int = x 3）var z rune = x 它们是否能编译通过？为什么？\n如果面试时问这道题，你需要想想面试官想考察你什么。 🔑 答案解析： 数字字面量 在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例子，32.0 是无类型的浮点数字面量，因此它可以赋值给任意数字相关类型变量（或常量）。以下都是合法的：\nvar a int64 = 32.0 var b int = 32.0 var c float32 = 32.0 var d complex64 = 32.0 var e byte = 32.0 var f rune = 32.0 所以上题中 1）是正确的。\n不同类型 在目前 Go 1.16 版本中（实际上只有很早期的版本不是），int 类型在 32 位机器占 4 字节，64 位机器占 8 字节。所以，在 32 位机器上，int32 和 int 的内存占用和内存布局是完全一样的。但 Go 语言不会做隐式类型转换，int 和 int32 是不同的类型，因此上题中 2）编译不通过。\n别名 rune 是什么类型？定义如下：\ntype rune = int32 很显然，rune 是 int32 的别名，因此题目中 3）也能编译通过。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_223/","summary":"\u003cp\u003e有下面 3 行代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 32 位机器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它们是否能编译通过？为什么？\u003c/p\u003e\n\u003cp\u003e如果面试时问这道题，你需要想想面试官想考察你什么。\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch1 id=\"数字字面量\"\u003e数字字面量\u003c/h1\u003e\n\u003cp\u003e在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例子，32.0 是无类型的浮点数字面量，因此它可以赋值给任意数字相关类型变量（或常量）。以下都是合法的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ecomplex64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以上题中 1）是正确的。\u003c/p\u003e\n\u003ch1 id=\"不同类型\"\u003e不同类型\u003c/h1\u003e\n\u003cp\u003e在目前 Go 1.16 版本中（实际上只有很早期的版本不是），int 类型在 32 位机器占 4 字节，64 位机器占 8 字节。所以，在 32 位机器上，int32 和 int 的内存占用和内存布局是完全一样的。但 Go 语言不会做隐式类型转换，int 和 int32 是不同的类型，因此上题中 2）编译不通过。\u003c/p\u003e\n\u003ch1 id=\"别名\"\u003e别名\u003c/h1\u003e\n\u003cp\u003erune 是什么类型？定义如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e很显然，rune 是 int32 的别名，因此题目中 3）也能编译通过。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_223"},{"content":"Go101 发布的一条 twitter。以下代码是否能正常运行，结果是？ 下面代码输出什么？\npackage main func main() { v := new(int) *v = 2 println(5/+-*v) } 🔑 答案解析： 参考答案及解析：B。\nGo 中有如下几个一元运算符\nunary_op = \u0026#34;+\u0026#34; | \u0026#34;-\u0026#34; | \u0026#34;!\u0026#34; | \u0026#34;^\u0026#34; | \u0026#34;*\u0026#34; | \u0026#34;\u0026amp;\u0026#34; | \u0026#34;\u0026lt;-\u0026#34; . 因此会先计算 5/+-*v 又因为规范\n对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释） +x 是 0 + x -x 取其负值 是 0 - x\n因此转化后 5 / [0+(0-*v)] 、 5 / -2\n又因为强制类型转换 -2.5 成了 -2\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_222/","summary":"\u003cp\u003eGo101 发布的一条 twitter。以下代码是否能正常运行，结果是？\n下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/+-*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003eGo 中有如下几个一元运算符\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eunary_op\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;+\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026amp;\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;-\u0026#34;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因此会先计算 5/+-*v\n又因为规范\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释）\n+x 　　　　 是 0 + x\n-x 取其负值 是 0 - x\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e因此转化后 5 / [0+(0-*v)] 、 5 / -2\u003cbr\u003e\n又因为强制类型转换 -2.5 成了 -2\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_222"},{"content":"下面代码输出什么？\ntype A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowB()) fmt.Println(b.ShowA()) } A. 23 13 B. compilation error 🔑 答案解析： 参考答案及解析：B。\na接口没有ShowB方法 b接口没有ShowA方法 因此编译不通过\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_221/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 23 13\nB. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003ea接口没有ShowB方法\nb接口没有ShowA方法\n因此编译不通过\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_221"},{"content":"力扣链接:167. 两数之和 II - 输入有序数组\n力扣难度 中等\n给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列 ，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1 \u0026lt;= index1 \u0026lt; index2 \u0026lt;= numbers.length 。\n以长度为 2 的整数数组 [index1, index2] 的形式返回这两个整数的下标 index1 和 index2。\n你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。\n你所设计的解决方案必须只使用 常量级的额外空间。\n示例 示例 1： 输入：numbers = [2,7,11,15], target = 9 输出：[1,2] 解释：\u0026gt; 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。 示例 2： 输入：numbers = [2,3,4], target = 6 输出：[1,3] 解释：\u0026gt; 2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。 示例 3： 输入：numbers = [-1,0], target = -1 输出：[1,2] 解释：\u0026gt; -1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。 提示： 2 \u0026lt;= numbers.length \u0026lt;= 3 * 104 -1000 \u0026lt;= numbers[i] \u0026lt;= 1000 numbers 按 非递减顺序 排列 -1000 \u0026lt;= target \u0026lt;= 1000 仅存在一个有效答案 func twoSum(numbers []int, target int) []int { } func twoSum(numbers []int, target int) (ans []int) { // 双指针 头指向最小 尾指向最大 // 头 + 尾 \u0026lt; 目标数 头指针就要往尾移动 // 头 + 尾 \u0026gt; 目标数 尾指针就要往头移动 // 头 + 尾 = 目标数 返回答案 // 双指针 相遇 返回 nil j := 0 k := len(numbers) - 1 for j \u0026lt; k { f := target - (numbers[j] + numbers[k]) if f == 0 { return []int{j + 1, k + 1} } else if f \u0026gt; 0 { j++ } else if f \u0026lt; 0 { k-- } } return } ","permalink":"https://loommii.github.io/posts/leetcode/data/167._%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C_ii_-_%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/\"\u003e167. 两数之和 II - 输入有序数组\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e给你一个下标从 1 开始的整数数组 \u003ccode\u003enumbers\u003c/code\u003e ，该数组已按 \u003cstrong\u003e非递减顺序排列\u003c/strong\u003e ，请你从数组中找出满足相加之和等于目标数 \u003ccode\u003etarget\u003c/code\u003e 的两个数。如果设这两个数分别是 \u003ccode\u003enumbers[index1]\u003c/code\u003e 和 \u003ccode\u003enumbers[index2]\u003c/code\u003e ，则 \u003ccode\u003e1 \u0026lt;= index1 \u0026lt; index2 \u0026lt;= numbers.length\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e以长度为 2 的整数数组 \u003ccode\u003e[index1, index2]\u003c/code\u003e 的形式返回这两个整数的下标 \u003ccode\u003eindex1\u003c/code\u003e 和 \u003ccode\u003eindex2\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以假设每个输入 \u003cstrong\u003e只对应唯一的答案\u003c/strong\u003e ，而且你 \u003cstrong\u003e不可以\u003c/strong\u003e 重复使用相同的元素。\u003c/p\u003e\n\u003cp\u003e你所设计的解决方案必须只使用 \u003cstrong\u003e常量级的额外空间\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enumbers = [2,7,11,15]\u003c/code\u003e, \u003ccode\u003etarget = 9\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[1,2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 \u003ccode\u003e[1, 2]\u003c/code\u003e 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enumbers = [2,3,4]\u003c/code\u003e, \u003ccode\u003etarget = 6\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[1,3]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; 2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 \u003ccode\u003e[1, 3]\u003c/code\u003e 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例-3\"\u003e示例 3：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enumbers = [-1,0]\u003c/code\u003e, \u003ccode\u003etarget = -1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e[1,2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解释：\u003c/strong\u003e\u0026gt; -1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 \u003ccode\u003e[1, 2]\u003c/code\u003e 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"提示\"\u003e提示：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e2 \u0026lt;= numbers.length \u0026lt;= 3 * 104\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= numbers[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enumbers\u003c/code\u003e 按 \u003cstrong\u003e非递减顺序\u003c/strong\u003e 排列\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= target \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e仅存在一个有效答案\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etwoSum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etwoSum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 双指针 头指向最小 尾指向最大\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 头 + 尾 \u0026lt; 目标数 头指针就要往尾移动\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 头 + 尾 \u0026gt; 目标数 尾指针就要往头移动\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 头 + 尾 = 目标数 返回答案\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 双指针 相遇 返回 nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etarget\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"167. 两数之和 II - 输入有序数组"},{"content":"下面代码中 A B 两处应该怎么修改才能顺利编译？\nfunc main() { var m map[string]int //A m[\u0026#34;a\u0026#34;] = 1 if v := m[\u0026#34;b\u0026#34;]; v != nil { //B fmt.Println(v) } } func main() { m := make(map[string]int) m[\u0026#34;a\u0026#34;] = 1 if v,ok := m[\u0026#34;b\u0026#34;]; ok { fmt.Println(v) } } 🔑 答案解析： 在 A 处只声明了map m ,并没有分配内存空间，不能直接赋值，需要使用 make()，都提倡使用 make() 或者字面量的方式直接初始化 map。\nB 处，v,k := m[\u0026ldquo;b\u0026rdquo;] 当 key 为 b 的元素不存在的时候，v 会返回值类型对应的零值，k 返回 false。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_220/","summary":"\u003cp\u003e下面代码中 A B 两处应该怎么修改才能顺利编译？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e]; \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {  \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e]; \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e在 A 处只声明了map m ,并没有分配内存空间，不能直接赋值，需要使用 make()，都提倡使用 make() 或者字面量的方式直接初始化 map。\u003c/p\u003e\n\u003cp\u003eB 处，v,k := m[\u0026ldquo;b\u0026rdquo;] 当 key 为 b 的元素不存在的时候，v 会返回值类型对应的零值，k 返回 false。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_220"},{"content":"力扣链接: 1295. 统计位数为偶数的数字\n力扣难度 简单\n给你一个整数数组 nums，请你返回其中包含 偶数 个数位的数字的个数。\n示例 1： 输入：nums = [12,345,2,6,7896] 输出：2 解释：\n12 是 2 位数字（位数为偶数） 345 是 3 位数字（位数为奇数） 2 是 1 位数字（位数为奇数） 6 是 1 位数字（位数为奇数） 7896 是 4 位数字（位数为偶数） 因此只有 12 和 7896 是位数为偶数的数字。\n示例 2： 输入：nums = [555,901,482,1771] 输出：1 解释： 只有 1771 是位数为偶数的数字。\n提示： 1 \u0026lt;= nums.length \u0026lt;= 500 1 \u0026lt;= nums[i] \u0026lt;= 105 func findNumbers(nums []int) int { } func findNumbers(nums []int) int { // 计数 ans := 0 for _, v := range nums { i := 0 for v != 0 { i++ v /= 10 } if i%2 == 0 { ans++ } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/1295_%E7%BB%9F%E8%AE%A1%E4%BD%8D%E6%95%B0%E4%B8%BA%E5%81%B6%E6%95%B0%E7%9A%84%E6%95%B0%E5%AD%97/","summary":"\u003cp\u003e力扣链接: \u003ca href=\"https://leetcode.cn/problems/find-numbers-with-even-number-of-digits/description/\"\u003e1295. 统计位数为偶数的数字\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e给你一个整数数组 \u003ccode\u003enums\u003c/code\u003e，请你返回其中包含 \u003cstrong\u003e偶数\u003c/strong\u003e 个数位的数字的个数。\u003c/p\u003e\n\u003ch3 id=\"示例-1\"\u003e示例 1：\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [12,345,2,6,7896]\u003c/code\u003e\n\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e2\u003c/code\u003e\n\u003cstrong\u003e解释：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e12\u003c/code\u003e 是 2 位数字（位数为偶数）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e345\u003c/code\u003e 是 3 位数字（位数为奇数）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2\u003c/code\u003e 是 1 位数字（位数为奇数）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e6\u003c/code\u003e 是 1 位数字（位数为奇数）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e7896\u003c/code\u003e 是 4 位数字（位数为偶数）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因此只有 \u003ccode\u003e12\u003c/code\u003e 和 \u003ccode\u003e7896\u003c/code\u003e 是位数为偶数的数字。\u003c/p\u003e\n\u003ch3 id=\"示例-2\"\u003e示例 2：\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u003ccode\u003enums = [555,901,482,1771]\u003c/code\u003e\n\u003cstrong\u003e输出：\u003c/strong\u003e\u003ccode\u003e1\u003c/code\u003e\n\u003cstrong\u003e解释：\u003c/strong\u003e\n只有 \u003ccode\u003e1771\u003c/code\u003e 是位数为偶数的数字。\u003c/p\u003e\n\u003ch3 id=\"提示\"\u003e提示：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= 105\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindNumbers\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindNumbers\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 计数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enums\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"1295_统计位数为偶数的数字"},{"content":"下面这段代码输出什么？\nfunc main() { i := -5 j := +5 fmt.Printf(\u0026#34;%+d %+d\u0026#34;, i, j) } A. -5 +5 B. +5 +5 C. 0 0 🔑 答案解析： A %d表示输出十进制数字，+表示输出数值的符号。这里不表示取反。 %d 输出 正数不会输出符号 + ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_219/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%+d %+d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. -5 +5\nB. +5 +5\nC. 0 0\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A\n%d表示输出十进制数字，+表示输出数值的符号。这里不表示取反。\n%d 输出 正数不会输出符号 +\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_219"},{"content":"切片 a、b、c 的长度和容量分别是多少？\nfunc main() { s := [3]int{1, 2, 3} a := s[:0] b := s[:2] c := s[1:2:cap(s)] } 🔑 答案解析： a len 0 cap 3 b len 2 cap 3 c len 1 cap 2\nc 下表1 开始\n参考答案及解析：a、b、c 的长度和容量分别是 0 3、2 3、1 2。\n知识点：数组或切片的截取操作。截取操作有带 2 个或者 3 个参数，形如：[i:j] 和 [i:j:k]，假设截取对象的底层数组长度为 l。在操作符 [i:j] 中，如果 i 省略，默认 0，如果 j 省略，默认底层数组的长度，截取得到的切片长度和容量计算方法是 j-i、l-i。操作符 [i:j:k]，k 主要是用来限制切片的容量，但是不能大于数组的长度 l，截取得到的切片长度和容量计算方法是 j-i、k-i。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_218/","summary":"\u003cp\u003e切片 a、b、c 的长度和容量分别是多少？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:cap(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003ea len 0 cap 3\nb len 2 cap 3\nc len 1 cap 2\u003c/p\u003e\n\u003cp\u003ec 下表1 开始\u003c/p\u003e\n\u003cp\u003e参考答案及解析：a、b、c 的长度和容量分别是 0 3、2 3、1 2。\u003c/p\u003e\n\u003cp\u003e知识点：数组或切片的截取操作。截取操作有带 2 个或者 3 个参数，形如：[i:j] 和 [i:j:k]，假设截取对象的底层数组长度为 l。在操作符 [i:j] 中，如果 i 省略，默认 0，如果 j 省略，默认底层数组的长度，截取得到的切片长度和容量计算方法是 j-i、l-i。操作符 [i:j:k]，k 主要是用来限制切片的容量，但是不能大于数组的长度 l，截取得到的切片长度和容量计算方法是 j-i、k-i。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_218"},{"content":"下面代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; type A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowB()) fmt.Println(b.ShowA()) } A. 23 13 B. compilation error 🔑 答案解析： B 在线运行\nA接口没有ShowB方法 B接口没有ShowA方法\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_217/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 23 13\u003c/li\u003e\n\u003cli\u003eB. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB \u003ca href=\"https://go.dev/play/p/yz3LsE6kw-U\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA接口没有ShowB方法\nB接口没有ShowA方法\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_217"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { i := 65 fmt.Println(string(i)) } A. A B. 65 C. compilation error 🔑 答案解析： 参考答案及解析：A。\n在线运行\nUTF-8 编码中，十进制数字 65 对应的符号是 A。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_216/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(string(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. A\u003c/li\u003e\n\u003cli\u003eB. 65\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：A。\u003cbr\u003e\n\u003ca href=\"https://go.dev/play/p/h8IE-NTMImR\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eUTF-8 编码中，十进制数字 65 对应的符号是 A。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_216"},{"content":"下面代码下划线处可以填入哪个选项？\npackage main import \u0026#34;fmt\u0026#34; func main() { var s1 []int var s2 = []int{} if __ == nil { fmt.Println(\u0026#34;yes nil\u0026#34;) } else { fmt.Println(\u0026#34;no nil\u0026#34;) } } A. s1 B. s2 C. s1、s2 都可以 🔑 答案解析： 参考答案及解析：A。\n知识点：nil 切片和空切片。nil 切片和 nil 相等，一般用来表示一个不存在的切片；空切片和 nil 不相等，表示一个空的集合。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_215/","summary":"\u003cp\u003e下面代码下划线处可以填入哪个选项？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yes nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. s1\u003c/li\u003e\n\u003cli\u003eB. s2\u003c/li\u003e\n\u003cli\u003eC. s1、s2 都可以\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：A。\u003c/p\u003e\n\u003cp\u003e知识点：nil 切片和空切片。nil 切片和 nil 相等，一般用来表示一个不存在的切片；空切片和 nil 不相等，表示一个空的集合。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_215"},{"content":"unc main() { a := [2]int{5, 6} b := [3]int{5, 6} if a == b { fmt.Println(\u0026ldquo;equal\u0026rdquo;) } else { fmt.Println(\u0026ldquo;not equal\u0026rdquo;) } }\n- A. compilation error - B. equal - C. not equal 🔑 答案解析： 在线运行 A [2]int 和 [3]int 在Go中是不同的类型 不能通过 == 运算符对比\n./prog.go:8:10: invalid operation: a == b (mismatched types [2]int and [3]int)\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_214/","summary":"\u003cp\u003eunc main() {\na := [2]int{5, 6}\nb := [3]int{5, 6}\nif a == b {\nfmt.Println(\u0026ldquo;equal\u0026rdquo;)\n} else {\nfmt.Println(\u0026ldquo;not equal\u0026rdquo;)\n}\n}\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\n- A. compilation error\n- B. equal\n- C. not equal\n\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/rNBNzx3dOUY\"\u003e在线运行\u003c/a\u003e\nA  [2]int 和 [3]int 在Go中是不同的类型 不能通过 == 运算符对比\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e./prog.go:8:10: invalid operation: a == b (mismatched types [2]int and [3]int)\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\n\u003c/code\u003e\u003c/pre\u003e","title":"Go每日一题_214"},{"content":" Joplin 的官方 GUI 并未提供修改存储位置的选项，需要通过启动参数来进行修改。\n由于笔者购买的是存储仅为 256GB 的”丐版“” Mac mini，而笔记内容占用的空间较大，因此希望将存储路径更改为 NAS 网络卷。\n启动命令 open -a /Applications/Joplin.app --args --profile /Volumes/mac_data/joplin/note 需要修改的部分：\n/Applications/Joplin.app：替换为你自己的 Joplin 应用程序路径。 /Volumes/mac_data/joplin/note：替换为你希望使用的存储路径。 在 Mac 的终端中输入修改后的命令并执行时，你会看到它会尝试启动 Joplin 应用并使用指定的存储路径。\n创建启动程序 打开Mac自带的自动操作程序\n选择应用程序 在操作中选择运行Shell脚本 将启动命令输入右侧输入框 点击左上角存储 修改程序名称并存储到应用程序 到这里你将看到启动台中多了刚刚保存的应用程序! 点击程序验证一下效果\n修改启动程序图标 在访达 -\u0026gt; 应用程序 中找到刚刚创建的启动程序 右键 -\u0026gt; 显示简介 将下载的图标拖入替代老的机器人图标 下面是Joplin的LOGO ","permalink":"https://loommii.github.io/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/","summary":"\u003cblockquote\u003e\n\u003cp\u003eJoplin 的官方 GUI 并未提供修改存储位置的选项，需要通过启动参数来进行修改。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image.png\"\u003e\u003c/p\u003e\n\u003cp\u003e由于笔者购买的是存储仅为 256GB 的”丐版“” Mac mini，而笔记内容占用的空间较大，因此希望将存储路径更改为 NAS 网络卷。\u003c/p\u003e\n\u003ch2 id=\"启动命令\"\u003e启动命令\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eopen -a /Applications/Joplin.app --args --profile /Volumes/mac_data/joplin/note\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e需要修改的部分：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e/Applications/Joplin.app：替换为你自己的 Joplin 应用程序路径。\u003c/li\u003e\n\u003cli\u003e/Volumes/mac_data/joplin/note：替换为你希望使用的存储路径。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Mac 的终端中输入修改后的命令并执行时，你会看到它会尝试启动 Joplin 应用并使用指定的存储路径。\u003c/p\u003e\n\u003ch2 id=\"创建启动程序\"\u003e创建启动程序\u003c/h2\u003e\n\u003cp\u003e打开Mac自带的\u003ccode\u003e自动操作\u003c/code\u003e程序\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-1.png\"\u003e\n选择\u003ccode\u003e应用程序\u003c/code\u003e\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-2.png\"\u003e\n在操作中选择\u003ccode\u003e运行Shell脚本\u003c/code\u003e\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-3.png\"\u003e\n将启动命令输入右侧输入框\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-4.png\"\u003e\n点击左上角存储\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-5.png\"\u003e\n修改程序名称并存储到\u003ccode\u003e应用程序\u003c/code\u003e\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-6.png\"\u003e\n到这里你将看到\u003ccode\u003e启动台\u003c/code\u003e中多了刚刚保存的应用程序!\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-7.png\"\u003e\n点击程序验证一下效果\u003c/p\u003e\n\u003ch2 id=\"修改启动程序图标\"\u003e修改启动程序图标\u003c/h2\u003e\n\u003cp\u003e在\u003ccode\u003e访达\u003c/code\u003e -\u0026gt; 应用程序 中找到刚刚创建的\u003ccode\u003e启动程序\u003c/code\u003e\n右键 -\u0026gt; 显示简介\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-8.png\"\u003e\n将下载的图标拖入替代老的机器人图标\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-9.png\"\u003e\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-10.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"下面是joplin的logo\"\u003e下面是Joplin的LOGO\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/mac%E7%89%88%E6%9C%AC_joplin_%E7%AC%94%E8%AE%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%9B%B4%E6%94%B9/image-11.png\"\u003e\u003c/p\u003e","title":"mac版本 Joplin 笔记与配置信息存储更改"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := [5]int{1, 2, 3, 4, 5} t := a[3:4:4] fmt.Println(t[0]) } A.3 B.4 C.compilation error 🔑 答案解析： B\n在线运行\n答案： B\n知识点： Go 语言切片 (Slice) 操作符 [i:j:k]\n解析：\n数组初始化： a := [5]int{1, 2, 3, 4, 5} 创建了一个包含 5 个整数的数组 a。其内容为 [1, 2, 3, 4, 5]，索引从 0 到 4。\n切片操作 a[i:j:k]： Go 语言允许使用三个索引来从数组或切片创建新的切片：slice := source[i:j:k]。\ni：起始索引（包含）。新切片从 source 的第 i 个元素开始。 j：结束索引（不包含）。新切片包含到 source 的第 j-1 个元素为止。 k：容量限制索引。新切片的容量 (Capacity) 被设置为 k - i。这限制了新切片能访问的底层数组的范围。k 的值不能超过 source 的容量（对于数组，即为其长度）。 新切片的长度 (Length) 计算为 j - i。 新切片的容量 (Capacity) 计算为 k - i。 分析 t := a[3:4:4]：\nsource 是数组 a ([1, 2, 3, 4, 5])。 i = 3：起始索引是 3，对应的值是 a[3] = 4。 j = 4：结束索引是 4。切片包含从索引 3 开始，到索引 4 之前的元素，也就是只包含索引为 3 的元素 4。 k = 4：容量限制索引是 4。 计算 t 的长度：length = j - i = 4 - 3 = 1。 计算 t 的容量：capacity = k - i = 4 - 3 = 1。 因此，t 是一个新创建的切片，其长度为 1，容量为 1。它包含了原数组 a 中索引为 3 的元素。所以 t 的内容是 [4]。 输出： fmt.Println(t[0]) 语句尝试打印切片 t 中索引为 0 的元素。因为 t 是 [4]，所以 t[0] 的值就是 4。\n结论： 代码运行后会输出 4。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_213/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA.3\u003c/li\u003e\n\u003cli\u003eB.4\u003c/li\u003e\n\u003cli\u003eC.compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\u003cbr\u003e\n\u003ca href=\"https://go.dev/play/p/z3KqBXFXMm3\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e答案：\u003c/strong\u003e B\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e知识点：\u003c/strong\u003e Go 语言切片 (Slice) 操作符 \u003ccode\u003e[i:j:k]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e解析：\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e数组初始化：\u003c/strong\u003e\n\u003ccode\u003ea := [5]int{1, 2, 3, 4, 5}\u003c/code\u003e 创建了一个包含 5 个整数的数组 \u003ccode\u003ea\u003c/code\u003e。其内容为 \u003ccode\u003e[1, 2, 3, 4, 5]\u003c/code\u003e，索引从 0 到 4。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e切片操作 \u003ccode\u003ea[i:j:k]\u003c/code\u003e：\u003c/strong\u003e\nGo 语言允许使用三个索引来从数组或切片创建新的切片：\u003ccode\u003eslice := source[i:j:k]\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ei\u003c/code\u003e：起始索引（包含）。新切片从 \u003ccode\u003esource\u003c/code\u003e 的第 \u003ccode\u003ei\u003c/code\u003e 个元素开始。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ej\u003c/code\u003e：结束索引（不包含）。新切片包含到 \u003ccode\u003esource\u003c/code\u003e 的第 \u003ccode\u003ej-1\u003c/code\u003e 个元素为止。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ek\u003c/code\u003e：容量限制索引。新切片的容量 (Capacity) 被设置为 \u003ccode\u003ek - i\u003c/code\u003e。这限制了新切片能访问的底层数组的范围。\u003ccode\u003ek\u003c/code\u003e 的值不能超过 \u003ccode\u003esource\u003c/code\u003e 的容量（对于数组，即为其长度）。\u003c/li\u003e\n\u003cli\u003e新切片的\u003cstrong\u003e长度 (Length)\u003c/strong\u003e 计算为 \u003ccode\u003ej - i\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e新切片的\u003cstrong\u003e容量 (Capacity)\u003c/strong\u003e 计算为 \u003ccode\u003ek - i\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e分析 \u003ccode\u003et := a[3:4:4]\u003c/code\u003e：\u003c/strong\u003e\u003c/p\u003e","title":"Go每日一题_213"},{"content":"下面代码是否可以编译通过？为什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { sn1 := struct { age int name string }{age: 11, name: \u0026#34;qq\u0026#34;} sn2 := struct { age int name string }{age: 11, name: \u0026#34;qq\u0026#34;} if sn1 == sn2 { fmt.Println(\u0026#34;sn1 == sn2\u0026#34;) } sm1 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} sm2 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} if sm1 == sm2 { fmt.Println(\u0026#34;sm1 == sm2\u0026#34;) } } 🔑 答案解析： 答: 无法通过编译\n在线运行\n结构体比较规则注意1：只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关。 sn1 := struct { age int name string }{age: 11, name: \u0026#34;qq\u0026#34;} sn3:= struct { name string age int }{age:11, name:\u0026#34;qq\u0026#34;} sn3与sn1就不是相同的结构体了，不能比较。\n结构体比较规则注意2：结构体是相同的，但是结构体属性中有不可以比较的类型，如map,slice，则结构体不能用==比较。 sm1 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} sm2 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} if sm1 == sm2 { fmt.Println(\u0026#34;sm1 == sm2\u0026#34;) } sm1 与 sm2 的结构体属性类型为map 因此不可通过 == 比较 可以使用reflect.DeepEqual进行比较\nif reflect.DeepEqual(sm1, sm2) { fmt.Println(\u0026#34;sm1 == sm2\u0026#34;) } else { fmt.Println(\u0026#34;sm1 != sm2\u0026#34;) } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_212/","summary":"\u003cp\u003e下面代码是否可以编译通过？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esn1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esn2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esn1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esn2\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sn1 == sn2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esm1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esm2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esm1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esm2\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sm1 == sm2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答: 无法通过编译\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/wjc-79OT_gk\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e结构体比较规则注意1：只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esn1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esn3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003esn3与sn1就不是相同的结构体了，不能比较。\u003c/p\u003e","title":"Go每日一题_212"},{"content":"Go101 作者发布了一道有意思的题目，这道题主要考察细节点，Go101 这本书也是以抠细节著称。看看这道题，以下程序输出什么？（单选）\npackage main const s = \u0026#34;Go101.org\u0026#34; // len(s) == 9 // 1 \u0026lt;\u0026lt; 9 == 512 // 512 / 128 == 4 var a byte = 1 \u0026lt;\u0026lt; len(s) / 128 var b byte = 1 \u0026lt;\u0026lt; len(s[:]) / 128 func main() { println(a, b) } A、0 0 B、0 4 C：4 0 D：4 4 🔑 答案解析： 这里共有2个知识点：\nlen(s)\n若s为字符串常量或者简单的数组表达式，则len返回的为int型的常量 若s为不为上述情况（有函数计算、通道等），则len返回的为int型的变量 关于位移操作\n如果常量位移表达式 的左侧操作数是一个无类型常量，那么其结果是一个整数常量；否则就是和左侧操作数同一类型的常量（必须是 整数类型 ） 如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型 回到题目 const s = \u0026#34;Go101.org\u0026#34; // 声明了一个string常量s len(s) = 9 // len(string常量s) len返回的为int型的常量 len(s[:]) = 9 // len(string常量s的切片 ) len返回的为int型的变量 1 \u0026lt;\u0026lt; int型的常量 // 常量 位移表达式 1 \u0026lt;\u0026lt; int型的变量 //非 常量 位移表达式 常量 位移表达式的结果为整数常量 非常量 位移表达式 的结果要看左侧的操作数的类型。 如果左侧的操作数有类型,结果为原类型 若左侧的操作数无类型,结果为左侧的类型将被隐式转化为要赋值变量的类型。 该题目为byte 这里 byte 1 \u0026lt;\u0026lt; int 9 结果为 byte 512 越界了, = 0 0 / 9 = 0 因此输出结果 b = 0 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_211/","summary":"\u003cp\u003eGo101 作者发布了一道有意思的题目，这道题主要考察细节点，Go101 这本书也是以抠细节著称。看看这道题，以下程序输出什么？（单选）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go101.org\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// len(s) == 9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1 \u0026lt;\u0026lt; 9 == 512\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 512 / 128 == 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:]) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA、0 0\u003c/li\u003e\n\u003cli\u003eB、0 4\u003c/li\u003e\n\u003cli\u003eC：4 0\u003c/li\u003e\n\u003cli\u003eD：4 4\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e这里共有2个知识点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elen(s)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e若s为字符串常量或者简单的数组表达式，则len返回的为int型的常量\u003c/li\u003e\n\u003cli\u003e若s为不为上述情况（有函数计算、通道等），则len返回的为int型的变量\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e关于位移操作\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果常量位移表达式 的左侧操作数是一个无类型常量，那么其结果是一个整数常量；否则就是和左侧操作数同一类型的常量（必须是 整数类型 ）\u003c/li\u003e\n\u003cli\u003e如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"回到题目\"\u003e回到题目\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go101.org\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 声明了一个string常量s \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elen(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)  = \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// len(string常量s) len返回的为int型的常量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elen(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:])  = \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// len(string常量s的切片 ) len返回的为int型的变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eint型的常量\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 常量 位移表达式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eint型的变量\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e//非  常量 位移表达式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e常量\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e位移表达式的结果为整数常量\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e非常量\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e位移表达式\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e的结果要看左侧的操作数的类型\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e如果左侧的操作数有类型\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003e结果为原类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e若左侧的操作数无类型\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003e结果为左侧的类型将被隐式转化为要赋值变量的类型\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e该题目为byte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e这里\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e结果为\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e512\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e越界了\u003c/span\u003e, = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e因此输出结果\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_211"},{"content":"Go 1.15 中 var i interface{} = a 会有额外堆内存分配吗？ 具体代码是：\nvar a int = 3 // 以下有额外内存分配吗？ var i interface{} = a 🔑 答案解析： 正确答案:不会\n解析:\n在 Go 中，接口被实现为一对指针（请参阅 Russ Cox 的 Go 数据结构：接口）：指向有关类型信息的指针和指向值的指针。可以简单的表示为：\ntype iface struct { tab *itab data unsafe.Pointer } 其中 tab 是指向类型信息的指针；data 是指向值的指针。因此，一般来说接口意味着必须在堆中动态分配该值。\n简单来说，接口等于类型加上值，因此会在堆中动态分配该值。 那什么这道题是不会呢？ 因为在Go1.15版本Go 1.15 发行说明在 runtime 部分中提到了一个有趣的改进：\nConverting a small integer value into an interface value no longer causes allocation.\n意思是说，将小整数转换为接口值不再需要进行内存分配。小整数是指 0 到 255 之间的数。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_210/","summary":"\u003cp\u003eGo 1.15 中 var i interface{} = a 会有额外堆内存分配吗？\n具体代码是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 以下有额外内存分配吗？\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e正确答案:不会\u003c/p\u003e\n\u003cp\u003e解析:\u003c/p\u003e\n\u003cp\u003e在 Go 中，接口被实现为一对指针（请参阅 Russ Cox 的 Go 数据结构：接口）：指向有关类型信息的指针和指向值的指针。可以简单的表示为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eiface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etab\u003c/span\u003e  \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitab\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其中 tab 是指向类型信息的指针；data 是指向值的指针。因此，一般来说接口意味着必须在堆中动态分配该值。\u003c/p\u003e\n\u003cp\u003e简单来说，接口等于类型加上值，因此会在堆中动态分配该值。\n那什么这道题是不会呢？\n因为在Go1.15版本\u003ca href=\"https://golang.google.cn/doc/go1.15\"\u003e\u003cstrong\u003eGo 1.15 发行说明\u003c/strong\u003e\u003c/a\u003e在 runtime 部分中提到了一个有趣的改进：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eConverting a small integer value into an interface value no longer causes allocation.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e意思是说，将小整数转换为接口值不再需要进行内存分配。小整数是指 0 到 255 之间的数。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_210"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var a, b float64 = 1.0, 4.0 fmt.Println(a | b) } A：5 B：+Inf C：panic D：不能编译\n🔑 答案解析： D 不能编译\n在线运行\n| 操作是按位或操作符，它的操作数只能是整数，而上面这道题的操作数是 float64，因此编译不通过。\n编译报错内容\n./prog.go:9:14: invalid operation: operator | not defined on a (variable of type float64)\n./prog.go:9:14: 无效操作：运算符 | 不能在类型为 float64 的变量 a 上使用\n这是 Go 规范的内容\n+ sum integers, floats, complex values, strings - difference integers, floats, complex values * product integers, floats, complex values / quotient integers, floats, complex values % remainder integers \u0026amp; bitwise AND integers | bitwise OR integers ^ bitwise XOR integers \u0026amp;^ bit clear (AND NOT) integers \u0026lt;\u0026lt; left shift integer \u0026lt;\u0026lt; integer \u0026gt;= 0 \u0026gt;\u0026gt; right shift integer \u0026gt;\u0026gt; integer \u0026gt;= 0 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_209/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e | \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：5\nB：+Inf\nC：panic\nD：不能编译\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eD 不能编译\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/lLMbGE_ajrg\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e|\u003c/code\u003e 操作是按位或操作符，它的操作数只能是整数，而上面这道题的操作数是 float64，因此编译不通过。\u003cbr\u003e\n编译报错内容\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e./prog.go:9:14: invalid operation: operator | not defined on a (variable of type float64)\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e./prog.go:9:14: 无效操作：运算符 | 不能在类型为 float64 的变量 a 上使用\u003c/p\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\n\u003cp\u003e这是 \u003ca href=\"https://golang.google.cn/ref/spec#Arithmetic_operators\"\u003eGo 规范\u003c/a\u003e的内容\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e                    \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efloats\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecomplex\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003edifference\u003c/span\u003e             \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efloats\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecomplex\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eproduct\u003c/span\u003e                \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efloats\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecomplex\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003equotient\u003c/span\u003e               \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efloats\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecomplex\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eremainder\u003c/span\u003e              \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebitwise\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAND\u003c/span\u003e            \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|    \u003cspan style=\"color:#a6e22e\"\u003ebitwise\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eOR\u003c/span\u003e             \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e^    \u003cspan style=\"color:#a6e22e\"\u003ebitwise\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eXOR\u003c/span\u003e            \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;^\u003c/span\u003e   \u003cspan style=\"color:#a6e22e\"\u003ebit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclear\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eAND\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNOT\u003c/span\u003e)    \u003cspan style=\"color:#a6e22e\"\u003eintegers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e   \u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshift\u003c/span\u003e             \u003cspan style=\"color:#a6e22e\"\u003einteger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einteger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e   \u003cspan style=\"color:#a6e22e\"\u003eright\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshift\u003c/span\u003e            \u003cspan style=\"color:#a6e22e\"\u003einteger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einteger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_209"},{"content":"下面这段代码能否通过编译，如果可以，输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { s1 := []int{1, 2, 3} s2 := []int{4, 5} s1 = append(s1, s2) fmt.Println(s1) } 🔑 答案解析： 在线运行\n不能通过编译。\nappend() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：\nappend(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_208/","summary":"\u003cp\u003e下面这段代码能否通过编译，如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/xOWsWj0Evni\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e不能通过编译。\u003cbr\u003e\nappend() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：\u003cbr\u003e\nappend(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_208"},{"content":"执行下面的代码会发生什么？\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { ch := make(chan int, 1000) go func() { for i := 0; i \u0026lt; 10; i++ { ch \u0026lt;- i } }() go func() { for { a, ok := \u0026lt;-ch if !ok { fmt.Println(\u0026#34;close\u0026#34;) return } fmt.Println(\u0026#34;a: \u0026#34;, a) } }() close(ch) fmt.Println(\u0026#34;ok\u0026#34;) time.Sleep(time.Second * 100) } 🔑 答案解析： ok close panic: send on closed channel goroutine 6 [running]: 对已经关闭的管道写数据会发生panic 对已经关闭的管道读数据,无已写缓存的情况下读的是零值\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_207/","summary":"\u003cp\u003e执行下面的代码会发生什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;close\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    close(\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ok\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eok\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclose\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epanic: send on closed channel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egoroutine 6 [running]:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对已经关闭的管道写数据会发生panic\n对已经关闭的管道读数据,无已写缓存的情况下读的是零值\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_207"},{"content":"Go 中 Channel 可能会引发 Goroutine 泄漏 疑问 什么是 Goroutine 泄漏？ Goroutine 泄漏是指 Goroutine 在程序中被创建后，由于某种原因无法正常结束，并且永远不会被垃圾回收（GC）。这会导致 Goroutine 占用的资源（如内存、栈空间等）无法释放，随着时间的推移，可能会耗尽系统资源，导致程序崩溃。\nChannel 如何导致 Goroutine 泄漏？ Channel 是 Goroutine 之间同步和通信的重要机制。但是，如果 Channel 的使用不当，就可能导致 Goroutine 阻塞并最终泄漏。以下是导致泄漏的常见场景：\n发送阻塞: Goroutine 尝试向一个已满的无缓冲 Channel 或已满的有缓冲 Channel 发送数据，如果没有其他 Goroutine 接收数据，发送操作会阻塞。\n接收阻塞: Goroutine 尝试从一个空的无缓冲 Channel 或空的有缓冲 Channel 接收数据，如果没有其他 Goroutine 发送数据，接收操作会阻塞。\n泄漏的原因是 goroutine 操作 channel 后，处于发送或接收阻塞状态，而 channel 处于满或空的状态，一直得不到改变。同时，垃圾回收器也不会回收此类资源，进而导致 gouroutine 会一直处于等待队列中，不见天日。\n代码示例 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;time\u0026#34; ) func main() { ch := make(chan int) // 无缓冲 Channel go func() { ch \u0026lt;- 1 // 第一次发送成功（Channel 未满） fmt.Println(\u0026#34;第一次发送成功\u0026#34;) ch \u0026lt;- 2 // 第二次发送永久阻塞（Channel 已满且无接收者） fmt.Println(\u0026#34;第二次发送成功（永远不会执行）\u0026#34;) }() time.Sleep(500 * time.Millisecond) fmt.Println(\u0026#34;接收到:\u0026#34;, \u0026lt;-ch) // 只消费一次数据 // 监控 Goroutine 数量 for { fmt.Printf(\u0026#34;当前 Goroutine 数量: %d\\n\u0026#34;, runtime.NumGoroutine()) // 2 time.Sleep(1 * time.Second) } } 在线运行\n","permalink":"https://loommii.github.io/posts/skill/data/channel_%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%BC%95%E5%8F%91_goroutine_%E6%B3%84%E6%BC%8F/","summary":"\u003ch2 id=\"go-中-channel-可能会引发-goroutine-泄漏\"\u003eGo 中 Channel 可能会引发 Goroutine 泄漏\u003c/h2\u003e\n\u003ch3 id=\"疑问\"\u003e疑问\u003c/h3\u003e\n\u003ch4 id=\"什么是-goroutine-泄漏\"\u003e什么是 Goroutine 泄漏？\u003c/h4\u003e\n\u003cp\u003eGoroutine 泄漏是指 Goroutine 在程序中被创建后，由于某种原因无法正常结束，并且永远不会被垃圾回收（GC）。这会导致 Goroutine 占用的资源（如内存、栈空间等）无法释放，随着时间的推移，可能会耗尽系统资源，导致程序崩溃。\u003c/p\u003e\n\u003ch4 id=\"channel-如何导致-goroutine-泄漏\"\u003eChannel 如何导致 Goroutine 泄漏？\u003c/h4\u003e\n\u003cp\u003eChannel 是 Goroutine 之间同步和通信的重要机制。但是，如果 Channel 的使用不当，就可能导致 Goroutine 阻塞并最终泄漏。以下是导致泄漏的常见场景：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e发送阻塞: Goroutine 尝试向一个已满的无缓冲 Channel 或已满的有缓冲 Channel 发送数据，如果没有其他 Goroutine 接收数据，发送操作会阻塞。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e接收阻塞:  Goroutine 尝试从一个空的无缓冲 Channel 或空的有缓冲 Channel 接收数据，如果没有其他 Goroutine 发送数据，接收操作会阻塞。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e泄漏的原因是 goroutine 操作 channel 后，处于发送或接收阻塞状态，而 channel 处于满或空的状态，一直得不到改变。同时，垃圾回收器也不会回收此类资源，进而导致 gouroutine 会一直处于等待队列中，不见天日。\u003c/p\u003e\n\u003ch3 id=\"代码示例\"\u003e代码示例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 无缓冲 Channel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 第一次发送成功（Channel 未满）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;第一次发送成功\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 第二次发送永久阻塞（Channel 已满且无接收者）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;第二次发送成功（永远不会执行）\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e500\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMillisecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;接收到:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 只消费一次数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 监控 Goroutine 数量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;当前 Goroutine 数量: %d\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eruntime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNumGoroutine\u003c/span\u003e()) \u003cspan style=\"color:#75715e\"\u003e// 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/ZY9038_1BYW\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e","title":"Go 中 Channel 可能会引发 Goroutine 泄漏"},{"content":"下面这段代码能否编译通过？如果可以，输出什么？\nfunc GetValue() int { return 1 } func main() { i := GetValue() switch i.(type) { case int: println(\u0026#34;int\u0026#34;) case string: println(\u0026#34;string\u0026#34;) case interface{}: println(\u0026#34;interface\u0026#34;) default: println(\u0026#34;unknown\u0026#34;) } } 🔑 答案解析： 编译失败 i.(type) 类型断言的语法形如：i.(type)，其中 i 是接口，type 是固定关键字，需要注意的是，只有接口类型才可以使用类型断言。 官方：https://go.dev/tour/methods/16 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_206/","summary":"\u003cp\u003e下面这段代码能否编译通过？如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetValue\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetValue\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;int\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;interface\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  编译失败\ni.(type)\n类型断言的语法形如：i.(type)，其中 i 是接口，type 是固定关键字，需要注意的是，只有接口类型才可以使用类型断言。\n官方：\u003ca href=\"https://go.dev/tour/methods/16\"\u003ehttps://go.dev/tour/methods/16\u003c/a\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_206"},{"content":"下面这段代码输出什么以及原因？\nfunc hello() []string { return nil } func main() { h := hello if h == nil { fmt.Println(\u0026#34;nil\u0026#34;) } else { fmt.Println(\u0026#34;not nil\u0026#34;) } } A. nil B. not nil C. compilation error 🔑 答案解析： B\nhello 是个Function values.函数在GO中时一等公民。因此可以 if h == nil 有应为Function values.有值(地址)因此也不为nil 函数也是值。它们可以像其他值一样传递。 函数值可以用作函数参数和返回值。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_205/","summary":"\u003cp\u003e下面这段代码输出什么以及原因？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e() []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. nil\u003c/li\u003e\n\u003cli\u003eB. not nil\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ehello 是个Function values.函数在GO中时一等公民。因此可以 if h == nil\n有应为Function values.有值(地址)因此也不为nil\n函数也是值。它们可以像其他值一样传递。\n函数值可以用作函数参数和返回值。\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_205"},{"content":"Go函数类型是否可以比较？ 比较运算符 在Go官方文档比较运算符中有这一段话\nSlice, map, and function types are not comparable. However, as a special case, a slice, map, or function value may be compared to the predeclared identifier nil. Comparison of pointer, channel, and interface values to nil is also allowed and follows from the general rules above.\n切片（Slice）、映射（map）和函数类型是不可比较的。然而，作为一种特殊情况，切片、映射或函数值可以与预先声明的标识符 nil 进行比较。指针、通道（channel）和接口值与 nil 的比较也是允许的，并且遵循上述一般规则。\n因此我们可以看到，Go函数类型之间是不能使用比较运算符的，但是可以和nil进行比较。\n例 1:\npackage main import \u0026#34;fmt\u0026#34; func foo() {} func main() { f1 := foo f2 := f1 if f1 == f2 { // 编译错误：invalid operation: f1 == f2 (func can only be compared to nil) fmt.Println(\u0026#34;函数相等\u0026#34;) } } 在线运行\n例 2:\npackage main import \u0026#34;fmt\u0026#34; func main() { var f1 func() if f1 == nil { // 函数类型是可以和`nil`进行比较 fmt.Println(\u0026#34;f1 is nil\u0026#34;) } } 在线运行\nreflect.DeepEqual 上面是使用比较运算符来进行二者的比较,我们知道在Go中，还可以使用reflect包中DeepEqual来比较。\nfunc DeepEqual(x, y any) bool\n功能：判断两个值是否“深度相等”\nFunc values are deeply equal if both are nil; otherwise they are not deeply equal.\n函数值只有在两者都为 nil 时才深度相等；否则，它们不深度相等。\n例 3:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; ) func foo() {} func main() { f1 := foo f2 := f1 if reflect.DeepEqual(f1, f2) { // 返回 false fmt.Println(\u0026#34;函数相等\u0026#34;) }else{ fmt.Println(\u0026#34;函数不相等\u0026#34;) // 输出 函数不相等 } } 在线运行\n我们还能通过reflect.DeepEqual的源码\ncase Func: if v1.IsNil() \u0026amp;\u0026amp; v2.IsNil() { return true } // Can\u0026#39;t do better than this: return false 总结 Go函数类型之间是不能使用比较,但是可以和nil进行比较。\n为什么？ 从上文我们了解到,Go团队在设计Go语言时就限制了函数类型之间对比。但是这样设计是为了什么？\n猜想一 (编译器内联优化) package main var a = func() int { return 1 }() var b = func() int { return 1 }() func main() { sun := add(a, b) print(sun) } func add(a, b int) int { return a + b } 编译并通过objdump工具查看汇编\ngo build .\\main.go go tool objdump -s main.main .\\main.exe TEXT main.main(SB) C:/Code/Github/Go_T/main.go main.go:6 0x469960 493b6610 CMPQ SP, 0x10(R14) main.go:6 0x469964 7635 JBE 0x46999b main.go:6 0x469966 55 PUSHQ BP main.go:6 0x469967 4889e5 MOVQ SP, BP main.go:6 0x46996a 4883ec10 SUBQ $0x10, SP main.go:7 0x46996e 488b05f3490800 MOVQ main.a(SB), AX main.go:11 0x469975 480305f4490800 ADDQ main.b(SB), AX main.go:11 0x46997c 4889442408 MOVQ AX, 0x8(SP) main.go:8 0x469981 e81a8afcff CALL runtime.printlock(SB) main.go:8 0x469986 488b442408 MOVQ 0x8(SP), AX main.go:8 0x46998b e8b090fcff CALL runtime.printint(SB) main.go:8 0x469990 e86b8afcff CALL runtime.printunlock(SB) main.go:9 0x469995 4883c410 ADDQ $0x10, SP main.go:9 0x469999 5d POPQ BP main.go:9 0x46999a c3 RET main.go:6 0x46999b 0f1f440000 NOPL 0(AX)(AX*1) main.go:6 0x4699a0 e8bb88ffff CALL runtime.morestack_noctxt.abi0(SB) main.go:6 0x4699a5 ebb9 JMP main.main(SB) 作为对比我们也可以在编译是禁止内联优化\ngo build -gcflags=\u0026#34;all=-l\u0026#34; .\\main.go PS C:\\Code\\Github\\Go_T\u0026gt; go tool objdump -s main.main .\\main.exe main.go:6 0x470000 493b6610 CMPQ SP, 0x10(R14) main.go:6 0x470004 763e JBE 0x470044 main.go:6 0x470006 55 PUSHQ BP main.go:6 0x470007 4889e5 MOVQ SP, BP main.go:6 0x47000a 4883ec18 SUBQ $0x18, SP main.go:7 0x47000e 488b1d9bfc0b00 MOVQ main.b(SB), BX main.go:7 0x470015 488b058cfc0b00 MOVQ main.a(SB), AX main.go:7 0x47001c 0f1f4000 NOPL 0(AX) main.go:7 0x470020 e83b000000 CALL main.add(SB) main.go:7 0x470025 4889442410 MOVQ AX, 0x10(SP) main.go:8 0x47002a e8517cfcff CALL runtime.printlock(SB) main.go:8 0x47002f 488b442410 MOVQ 0x10(SP), AX main.go:8 0x470034 e8e782fcff CALL runtime.printint(SB) main.go:8 0x470039 e8a27cfcff CALL runtime.printunlock(SB) main.go:9 0x47003e 4883c418 ADDQ $0x18, SP main.go:9 0x470042 5d POPQ BP main.go:9 0x470043 c3 RET main.go:6 0x470044 e83786ffff CALL runtime.morestack_noctxt.abi0(SB) main.go:6 0x470049 ebb5 JMP main.main(SB) 编译器内联优化 禁止编译器内联优化 猜想一 总结 我们可以看出编译器内联优化会优化一些代码。add函数会展开内联到main函数中了。 在默认情况下，编译器内联优化导致有些函数调用会被替换为函数体的实际代码。函数都消失了，那就很不用说拿函数之间进行比较。\n需要函数对比的场景，如何解决？ 监听者模式 package main import \u0026#34;fmt\u0026#34; type Listener func() var Listeners []Listener func AddListener(l Listener) { Listeners = append(Listeners, l) } func CallListeners() { for _, l := range Listeners { l() } } func RmListener(l Listener) { // TODO 删除监听器 } func main() { AddListener(func() { fmt.Println(\u0026#34;Hello\u0026#34;) }) AddListener(func() { fmt.Println(\u0026#34;world\u0026#34;) }) CallListeners() } 从上述代码中我们需要为Listener添加一个删除监听器函数。 由于Go中函数不能进行比较。因此下面这种写法是错误的\nfunc RmListener(l Listener) { Listeners = slices.DeleteFunc(Listeners, func(x Listener) bool { return x == l }) // invalid operation: x == l (func can only be compared to nil)compilerUndefinedOp } 解决方案一 使用结构体为函数添加一个可比较的标签 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;slices\u0026#34; ) type Tag struct{ *int } type Listener func() type taggedListener struct { tag Tag listener Listener } var Listeners []taggedListener func AddListener(l Listener) Tag { tag := Tag{new(int)} Listeners = append(Listeners, taggedListener{tag, l}) return tag } func CallListeners() { for _, l := range Listeners { l.listener() } } func RmListener(tag Tag) { Listeners = slices.DeleteFunc(Listeners, func(x taggedListener) bool { return x.tag == tag }) } func main() { HelloTag := AddListener(func() { fmt.Println(\u0026#34;Hello\u0026#34;) }) AddListener(func() { fmt.Println(\u0026#34;world\u0026#34;) }) CallListeners() // 删除Hello RmListener(HelloTag) CallListeners() } ","permalink":"https://loommii.github.io/posts/skill/data/go%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83/","summary":"\u003ch2 id=\"go函数类型是否可以比较\"\u003eGo函数类型是否可以比较？\u003c/h2\u003e\n\u003ch3 id=\"比较运算符\"\u003e比较运算符\u003c/h3\u003e\n\u003cp\u003e在\u003ca href=\"https://go.dev/ref/spec#Comparison_operators\"\u003eGo官方文档\u003c/a\u003e比较运算符中有这一段话\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSlice, map, and function types are not comparable. However, as a special case, a slice, map, or function value may be compared to the predeclared identifier nil. Comparison of pointer, channel, and interface values to nil is also allowed and follows from the general rules above.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e切片（Slice）、映射（map）和函数类型是不可比较的。然而，作为一种特殊情况，切片、映射或函数值可以与预先声明的标识符 \u003ccode\u003enil\u003c/code\u003e 进行比较。指针、通道（channel）和接口值与 \u003ccode\u003enil\u003c/code\u003e 的比较也是允许的，并且遵循上述一般规则。\u003c/p\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\n\u003cp\u003e因此我们可以看到，Go函数类型之间是不能使用比较运算符的，但是可以和\u003ccode\u003enil\u003c/code\u003e进行比较。\u003cbr\u003e\n例 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e() {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e// 编译错误：invalid operation: f1 == f2 (func can only be compared to nil)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;函数相等\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/-MKUWeDBml7\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e","title":"Go函数类型是否可以比较,为什么？"},{"content":"关于 init 函数，下面说法正确的是：\nA. 一个包中，可以包含多个 init 函数； B. 程序运行时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数； C. main 包中，不能有 init 函数； D. init 函数可以被其他函数调用； 🔑 答案解析： A B\n关于 init() 函数有几个需要注意的地方：\ninit() 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等; 一个包可以出线多个 init() 函数,一个源文件也可以包含多个 init() 函数； 同一个包中多个 init() 函数的执行顺序没有明确定义，但是不同包的init函数是根据包导入的依赖关系决定的; init() 函数在代码中不能被显示调用、不能被引用（赋值给函数变量），否则出现编译错误; 一个包被引用多次，如 A import B,C import B,A import C，B 被引用多次，但 B 包只会初始化一次； 引入包，不可出现死循坏。即A import B,B import A，这种情况编译失败； ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_204/","summary":"\u003cp\u003e关于 init 函数，下面说法正确的是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. 一个包中，可以包含多个 init 函数；\u003c/li\u003e\n\u003cli\u003eB. 程序运行时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数；\u003c/li\u003e\n\u003cli\u003eC. main 包中，不能有 init 函数；\u003c/li\u003e\n\u003cli\u003eD. init 函数可以被其他函数调用；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA B\u003c/p\u003e\n\u003cp\u003e关于 init() 函数有几个需要注意的地方：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003einit() 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等;\u003c/li\u003e\n\u003cli\u003e一个包可以出线多个 init() 函数,一个源文件也可以包含多个 init() 函数；\u003c/li\u003e\n\u003cli\u003e同一个包中多个 init() 函数的执行顺序没有明确定义，但是不同包的init函数是根据包导入的依赖关系决定的;\u003c/li\u003e\n\u003cli\u003einit() 函数在代码中不能被显示调用、不能被引用（赋值给函数变量），否则出现编译错误;\u003c/li\u003e\n\u003cli\u003e一个包被引用多次，如 A import B,C import B,A import C，B 被引用多次，但 B 包只会初始化一次；\u003c/li\u003e\n\u003cli\u003e引入包，不可出现死循坏。即A import B,B import A，这种情况编译失败；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_204"},{"content":"今天给两道类似的题目，注意，有半数以上的人可能会做错！\n题一:\npackage main func main() { var a int8 = -1 var b int8 = -128 / a println(b) } 题二：\npackage main func main() { const a int8 = -1 var b int8 = -128 / a println(b) } 上面2个问题能否通过编译,能编译通过的话会输出什么内容\n🔑 答案解析： 答: 题目一能通过编译 输出的是 -128 题目二不能通过编译 GO语言规范里面有这一句话\n对于带符号整数值来说， + , - , * , / 和 \u0026laquo; 运算可以合法地溢出，其产生的值是存在的并且可以被带符号整数表示法、其运算和操作数明确地定义 因此 -128/-1 = 128，int8的范围是 -128~127 这里的 128就越界了 128 的二进制表示是 10000000 正好是 -128 的补码。所以，第一题的结果是 -128。\n为什么第二题会编译失败呢？\n对于 var b int8 = -128 / a，因为 a 是 int8 类型常量，所以 -128 / a 是常量表达式。编译器计算，结果必然也是常量。 因为 a 的类型是 int8，因此 -128 也会隐式转为 int8 类型，128 这个结果超过了 int8 的范围，但常量不允许溢出，因此编译报错。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_203/","summary":"\u003cp\u003e今天给两道类似的题目，注意，有半数以上的人可能会做错！\u003c/p\u003e\n\u003cp\u003e题一:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e题二：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面2个问题能否通过编译,能编译通过的话会输出什么内容\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:\n题目一能通过编译 输出的是 -128\n题目二不能通过编译\nGO语言规范里面有这一句话\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于带符号整数值来说， + , - , * , / 和 \u0026laquo; 运算可以合法地溢出，其产生的值是存在的并且可以被带符号整数表示法、其运算和操作数明确地定义\n因此 -128/-1 = 128，int8的范围是 -128~127 这里的 128就越界了 128 的二进制表示是 10000000 正好是 -128 的补码。所以，第一题的结果是 -128。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e为什么第二题会编译失败呢？\u003c/p\u003e\n\u003cp\u003e对于 var b int8 = -128 / a，因为 a 是 int8 类型常量，所以 -128 / a 是常量表达式。编译器计算，结果必然也是常量。\n因为 a 的类型是 int8，因此 -128 也会隐式转为 int8 类型，128 这个结果超过了 int8 的范围，但常量不允许溢出，因此编译报错。\u003c/p\u003e","title":"Go每日一题_203"},{"content":"下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { list := new([]int) list = append(list, 1) fmt.Println(list) } 🔑 答案解析： 在线运行\n不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_202/","summary":"\u003cp\u003e下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/qVPyu9pXAAG\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_202"},{"content":"160. 相交链表 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。\n图示两个链表在节点 c1 开始相交**：**\n题目数据 保证 整个链式结构中不存在环。\n注意，函数返回结果后，链表必须 保持其原始结构 。\n自定义评测：\n评测系统 的输入如下（你设计的程序 不适用 此输入）：\nintersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0\nlistA - 第一个链表\nlistB - 第二个链表\nskipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数\nskipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数\n评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。\n示例 1：\n**输入：**intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3 **输出：**Intersected at \u0026#39;8\u0026#39; **解释：**相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。 在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 — 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。 示例 2：\n**输入：**intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 **输出：**Intersected at \u0026#39;2\u0026#39; **解释：**相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。 在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例 3：\n**输入：**intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 **输出：**No intersection **解释：**从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。 由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。 这两个链表不相交，因此返回 null 。 提示：\nlistA 中节点数目为 m\nlistB 中节点数目为 n\n1 \u0026amp;lt;= m, n \u0026amp;lt;= 3 * 104\n1 \u0026amp;lt;= Node.val \u0026amp;lt;= 105\n0 \u0026amp;lt;= skipA \u0026amp;lt;= m\n0 \u0026amp;lt;= skipB \u0026amp;lt;= n\n如果 listA 和 listB 没有交点，intersectVal 为 0\n如果 listA 和 listB 有交点，intersectVal == listA[skipA] == listB[skipB]\n**进阶：**你能否设计一个时间复杂度 O(m + n) 、仅用 O(1) 内存的解决方案？\n/** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func getIntersectionNode(headA, headB *ListNode) *ListNode { } 解决 哈希 暴力破解，将A全部节点加入map,再遍历B节点，如果map中存在，则返回该节点\nfunc getIntersectionNode(headA, headB *ListNode) (ans *ListNode) { var headMap = make(map[*ListNode]struct{}) for headA != nil { headMap[headA] = struct{}{} headA = headA.Next } for headB != nil { _, ok := headMap[headB] if ok { return headB } headB = headB.Next } return } 时间复杂度 O(N),空间复杂度 O(N)\n双指针 func getIntersectionNode(headA, headB *ListNode) (ans *ListNode) { if headA == nil || headB == nil { return } p, q := headA, headB for p != q { if p != nil { p = p.Next } else { // 如果已经走到最后的空节点 p = headB // 进入例外一个链表 y } if q != nil { q = q.Next } else { // 如果已经走到最后的空节点 q = headA // 进入例外一个链表 x } } return p } 时间复杂度 O(N),空间复杂度 O(1)\n","permalink":"https://loommii.github.io/posts/leetcode/data/160_%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","summary":"\u003ch2 id=\"160-相交链表\"\u003e\u003ca href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists/\"\u003e160. 相交链表\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e给你两个单链表的头节点 \u003ccode\u003eheadA\u003c/code\u003e 和 \u003ccode\u003eheadB\u003c/code\u003e ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 \u003ccode\u003enull\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e图示两个链表在节点 \u003ccode\u003ec1\u003c/code\u003e 开始相交**：**\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"160_statement.png\" loading=\"lazy\" src=\"/posts/leetcode/data/160_%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/image.png\"\u003e\u003c/p\u003e\n\u003cp\u003e题目数据 \u003cstrong\u003e保证\u003c/strong\u003e 整个链式结构中不存在环。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注意\u003c/strong\u003e，函数返回结果后，链表必须 \u003cstrong\u003e保持其原始结构\u003c/strong\u003e 。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e自定义评测：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e评测系统\u003c/strong\u003e 的输入如下（你设计的程序 \u003cstrong\u003e不适用\u003c/strong\u003e 此输入）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eintersectVal\u003c/code\u003e - 相交的起始节点的值。如果不存在相交节点，这一值为 \u003ccode\u003e0\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elistA\u003c/code\u003e - 第一个链表\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elistB\u003c/code\u003e - 第二个链表\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eskipA\u003c/code\u003e - 在 \u003ccode\u003elistA\u003c/code\u003e 中（从头节点开始）跳到交叉节点的节点数\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eskipB\u003c/code\u003e - 在 \u003ccode\u003elistB\u003c/code\u003e 中（从头节点开始）跳到交叉节点的节点数\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e评测系统将根据这些输入创建链式数据结构，并将两个头节点 \u003ccode\u003eheadA\u003c/code\u003e 和 \u003ccode\u003eheadB\u003c/code\u003e 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 \u003cstrong\u003e视作正确答案\u003c/strong\u003e 。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/160_%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/image-1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e**输入：**intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e**输出：**Intersected at \u0026#39;8\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e**解释：**相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e","title":"160. 相交链表"},{"content":"new() 与 make() 的区别\n🔑 答案解析： new(T) 会为 T 类型的新值分配已置零的内存空间，并返回地址（指针），即类型为 *T 的值。换句话说就是，返回一个指针，该指针指向新分配的、类型为 T 的零值。适用于值类型，如数组、结构体等。\nmake(T,args) 返回初始化之后的 T 类型的值，这个值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。make() 只适用于 slice、map 和 channel。\n参考资料:\n🔗📺️:【Golang】slice类型存什么？make和new？slice和数组？扩容规则 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_201/","summary":"\u003cp\u003enew() 与 make() 的区别\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003enew(T) 会为 T 类型的新值分配已置零的内存空间，并返回地址（指针），即类型为 *T 的值。换句话说就是，返回一个指针，该指针指向新分配的、类型为 T 的零值。适用于值类型，如数组、结构体等。\u003c/p\u003e\n\u003cp\u003emake(T,args) 返回初始化之后的 T 类型的值，这个值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。make() 只适用于 slice、map 和 channel。\u003c/p\u003e\n\u003cp\u003e参考资料:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔗📺️:\u003ca href=\"https://www.bilibili.com/video/BV1CV411d7W8/?spm_id_from=333.999.0.0\u0026amp;vd_source=2efe9e7b9d8ada5878fa15a7ad28b0dd\"\u003e【Golang】slice类型存什么？make和new？slice和数组？扩容规则\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_201"},{"content":"init() 函数是什么时候执行的？\n🔑 答案解析： 答:init()是再main()函数执行前\n一句话总结： import –\u0026gt; const –\u0026gt; var –\u0026gt; init() –\u0026gt; main()\n如果有多个init就要分情况\n单个源文件的 init 执行顺序 结论： 同一个源文件的 init 函数执行顺序与其定义顺序一致，从上到下。\npackage main func init() { println(\u0026#34;init a\u0026#34;) } func init() { println(\u0026#34;init b\u0026#34;) } func init() { println(\u0026#34;init c\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go run main.go init a init b init c main 单个包的 init 执行顺序 结论： 同一个包中不同源文件 init 函数的执行顺序，是根据文件名的字典序来确定。\n// a.go package main func init() { println(\u0026#34;init a\u0026#34;) } // b.go package main func init() { println(\u0026#34;init b\u0026#34;) } // c.go package main func init() { println(\u0026#34;init c\u0026#34;) } // main.go package main func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init a init b init c init main main main 包导入多个包时 init 执行顺序-不存在依赖 结论： 对于不同的包，如果不相互依赖的话，按照 main 包中导入顺序调用包的 init 函数，最后再调用 main 包的 init 函数。\n// a 包 // a.go package a func init() { println(\u0026#34;init a\u0026#34;) } // b 包 // b.go package b func init() { println(\u0026#34;init b\u0026#34;) } // c 包 // c.go package c func init() { println(\u0026#34;init c\u0026#34;) } // main 包 // main.go package main import ( _ \u0026#34;main/a\u0026#34; _ \u0026#34;main/b\u0026#34; _ \u0026#34;main/c\u0026#34; ) func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init a init b init c init main main main 包导入多个包时 init 执行顺序-存在依赖 结论： 如果 package 存在依赖，不同包的 init 函数按照包导入的依赖关系决定执行顺序。 调用顺序为最后被依赖的最先被初始化，如导入顺序 main \u0026gt; a \u0026gt; b \u0026gt; c，则初始化顺序为 c \u0026gt; b \u0026gt; a \u0026gt; main，依次执行对应的 init 方法\n// a 包 // a.go package a import _ \u0026#34;main/b\u0026#34; func init() { println(\u0026#34;init a\u0026#34;) } // b 包 // b.go package b import _ \u0026#34;main/c\u0026#34; func init() { println(\u0026#34;init b\u0026#34;) } // c 包 // c.go package c func init() { println(\u0026#34;init c\u0026#34;) } // main 包 // main.go package main import ( _ \u0026#34;main/a\u0026#34; ) func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init c init b init a init main main 包级变量初始化与 init 函数执行顺序 结论:如果包存在包级变量，则先于包的 init 函数完成初始化。\n// a 包 // a.go package a import _ \u0026#34;main/b\u0026#34; var A = func() string { println(\u0026#34;init var A\u0026#34;) return \u0026#34;A\u0026#34; }() func init() { println(\u0026#34;init a\u0026#34;) } // b 包 // b.go package b import _ \u0026#34;main/c\u0026#34; var B = func() string { println(\u0026#34;init var B\u0026#34;) return \u0026#34;B\u0026#34; }() func init() { println(\u0026#34;init b\u0026#34;) } // c 包 // c.go package c var C = func() string { println(\u0026#34;init var C\u0026#34;) return \u0026#34;C\u0026#34; }() func init() { println(\u0026#34;init c\u0026#34;) } // main 包 // main.go package main import ( _ \u0026#34;main/a\u0026#34; ) var m = func() string { println(\u0026#34;init var m\u0026#34;) return \u0026#34;m\u0026#34; }() func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init var C init c init var B init b init var A init a init var m init main main 参考资料:\n🔗:一文读懂 Golang init 函数执行顺序 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_200/","summary":"\u003cp\u003einit() 函数是什么时候执行的？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:init()是再main()函数执行前\u003c/p\u003e\n\u003cp\u003e一句话总结： \u003ccode\u003eimport –\u0026gt; const –\u0026gt; var –\u0026gt; init() –\u0026gt; main()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果有多个init就要分情况\u003c/p\u003e\n\u003ch2 id=\"单个源文件的-init-执行顺序\"\u003e单个源文件的 init 执行顺序\u003c/h2\u003e\n\u003cp\u003e结论： \u003ccode\u003e同一个源文件的 init 函数执行顺序与其定义顺序一致，从上到下。\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init a\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init b\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init c\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"单个包的-init-执行顺序\"\u003e单个包的 init 执行顺序\u003c/h2\u003e\n\u003cp\u003e结论： \u003ccode\u003e同一个包中不同源文件 init 函数的执行顺序，是根据文件名的字典序来确定。\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// a.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init a\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// b.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init b\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// c.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init c\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// main.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init main\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e .\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"main-包导入多个包时-init-执行顺序-不存在依赖\"\u003emain 包导入多个包时 init 执行顺序-不存在依赖\u003c/h2\u003e\n\u003cp\u003e结论： \u003ccode\u003e对于不同的包，如果不相互依赖的话，按照 main 包中导入顺序调用包的 init 函数，最后再调用 main 包的 init 函数。\u003c/code\u003e\u003c/p\u003e","title":"Go每日一题_200"},{"content":"空 struct{} 占多少空间？有什么用途？\n🔑 答案解析： 答:0 , 用于占位符\n例如:\nmap[string]struct{},只关注key是否存在的话可以使用节省内存空间 ch := make(chan struct{}, 1)，使用信道(channel)控制并发时，我们只是需要一个信号，但并不需要传递值，这个时候，也可以使用 struct{} 代替。 type Lamp struct{} ,声明只包含方法的结构体。 type Lamp struct{} func (l Lamp) On() { println(\u0026#34;On\u0026#34;) } func (l Lamp) Off() { println(\u0026#34;Off\u0026#34;) } 解析: Go为每一种类型都有全局唯一的类型元数据，元数据记录了该类型大小。因为空结构体内没有任何的类型因此空类型的大小为0。但是因为有创建类型元数据因此可以想正常的类型一样用于占位 这里建议看一下参考资料【幼麟实验室】- Go类型系统讲解\n参考资料：\n🔗📺️:【幼麟实验室】- Go类型系统讲解 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_199/","summary":"\u003cp\u003e空 struct{} 占多少空间？有什么用途？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:0 , 用于占位符\u003c/p\u003e\n\u003cp\u003e例如:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003emap[string]struct{},只关注key是否存在的话可以使用节省内存空间\u003c/li\u003e\n\u003cli\u003ech := make(chan struct{}, 1)，使用信道(channel)控制并发时，我们只是需要一个信号，但并不需要传递值，这个时候，也可以使用 struct{} 代替。\u003c/li\u003e\n\u003cli\u003etype Lamp struct{} ,声明只包含方法的结构体。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLamp\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLamp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eOn\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;On\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLamp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eOff\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Off\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解析:\nGo为每一种类型都有全局唯一的类型元数据，元数据记录了该类型大小。因为空结构体内没有任何的类型因此空类型的大小为0。但是因为有创建类型元数据因此可以想正常的类型一样用于占位\n这里建议看一下参考资料\u003ccode\u003e【幼麟实验室】- Go类型系统讲解\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e参考资料：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔗📺️:\u003ca href=\"https://www.bilibili.com/video/BV1hv411x7we?p=12\u0026amp;vd_source=2efe9e7b9d8ada5878fa15a7ad28b0dd\"\u003e【幼麟实验室】- Go类型系统讲解\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_199"},{"content":"如何确认两个 map 是否相等？\n🔑 答案解析： map 深度相等的条件：\n都为 nil 非空、长度相等，指向同一个 map 实体对象 相应的 key 指向的 value “深度”相等\n直接将使用 map1 == map2 是错误的。这种写法只能比较 map 是否为 nil。\npackage main import \u0026#34;fmt\u0026#34; func main() { var m map[string]int var n map[string]int fmt.Println(m == nil) fmt.Println(n == nil) // 不能通过编译 //fmt.Println(m == n) } 方案一: 遍历（比较麻烦） 遍历 map 的每个元素，比较元素是否都是深度相等。\nfunc main() { var m = map[string]int{} var n = map[string]int{} m[\u0026#34;1\u0026#34;], m[\u0026#34;2\u0026#34;], m[\u0026#34;3\u0026#34;] = 1, 2, 3 n[\u0026#34;1\u0026#34;], n[\u0026#34;2\u0026#34;], n[\u0026#34;3\u0026#34;] = 1, 2, 3 if len(m) == len(n) { for mk, mv := range m { nv, ok := n[mk] if ok \u0026amp;\u0026amp; nv == mv { } } } } 方案二: 反射\npackage main import( \u0026#34;fmt\u0026#34; \u0026#34;relflect\u0026#34; ) func main() { var m map[string]int var n map[string]int fmt.Println(reflect.DeepEqual(m,n)) } 参考资料：\n🔗:reflect.DeepEqual函数：判断两个值是否一致 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_198/","summary":"\u003cp\u003e如何确认两个 map 是否相等？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003emap 深度相等的条件：\u003c/p\u003e\n\u003cp\u003e都为 nil\n非空、长度相等，指向同一个 map 实体对象\n相应的 key 指向的 value “深度”相等\u003c/p\u003e\n\u003cp\u003e直接将使用 \u003ccode\u003emap1 == map2\u003c/code\u003e 是\u003ccode\u003e错误\u003c/code\u003e的。这种写法只能比较 map 是否为 nil。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 不能通过编译\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//fmt.Println(m == n)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e方案一: 遍历（比较麻烦）\n遍历 map 的每个元素，比较元素是否都是深度相等。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emk\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003env\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003emk\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003env\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emv\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e方案二: 反射\u003c/p\u003e","title":"Go每日一题_198"},{"content":"以下代码是否能编译通过？\npackage main import \u0026#34;fmt\u0026#34; func main() { m := make(map[string]int) m[\u0026#34;qcrao\u0026#34;] = 1 fmt.Println(\u0026amp;m[\u0026#34;qcrao\u0026#34;]) } 🔑 答案解析： 不能.\n./prog.go:8:15: invalid operation: cannot take address of m[\u0026#34;qcrao\u0026#34;] (map index expression of type int) 在线运行 map 的元素不能直接取地址。\nmap 一旦发生扩容，key 和 value 的位置就会改变，之前保存的地址也就失效了。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_197/","summary":"\u003cp\u003e以下代码是否能编译通过？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qcrao\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qcrao\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e不能.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprog\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003einvalid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ecannot\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etake\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eof\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qcrao\u0026#34;\u003c/span\u003e] (\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpression\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eof\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/4W5-rMuIiYI\"\u003e在线运行\u003c/a\u003e\nmap 的元素不能直接取地址。\u003cbr\u003e\nmap 一旦发生扩容，key 和 value 的位置就会改变，之前保存的地址也就失效了。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_197"},{"content":"以下代码是否能编译通过？\npackage main import \u0026#34;fmt\u0026#34; func main() { m := make(map[string]int) fmt.Println(\u0026amp;m[\u0026#34;qcrao\u0026#34;]) } 🔑 答案解析： 不能.\n./prog.go:8:15: invalid operation: cannot take address of m[\u0026#34;qcrao\u0026#34;] (map index expression of type int) 在线运行 map 的元素不能直接取地址。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_196/","summary":"\u003cp\u003e以下代码是否能编译通过？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qcrao\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e不能.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprog\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003einvalid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ecannot\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etake\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eof\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qcrao\u0026#34;\u003c/span\u003e] (\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpression\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eof\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/F-dYKNEFmvp\"\u003e在线运行\u003c/a\u003e\nmap 的元素不能直接取地址。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_196"},{"content":"下面这段代码有什么缺陷：\nfunc sum(x, y int)(total int, error) { return x+y, nil } 🔑 答案解析： 答案：第二个返回值没有命名。\n解析：\n在函数有多个返回值时，只要有一个返回值有命名，其他的也必须命名。\n如果有多个返回值必须加上括号()；如果只有一个返回值且命名也必须加上括号()。这里的第一个返回值有命名 total，第二个没有命名，所以错误。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_195/","summary":"\u003cp\u003e下面这段代码有什么缺陷：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)(\u003cspan style=\"color:#a6e22e\"\u003etotal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答案：第二个返回值没有命名。\u003c/p\u003e\n\u003cp\u003e解析：\u003c/p\u003e\n\u003cp\u003e在函数有多个返回值时，只要有一个返回值有命名，其他的也必须命名。\u003cbr\u003e\n如果有多个返回值必须加上括号()；如果只有一个返回值且命名也必须加上括号()。这里的第一个返回值有命名 total，第二个没有命名，所以错误。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_195"},{"content":"Go 的 map 可以边遍历边删除吗？\n🔑 答案解析： 这题要分情况分析。\n若在不同协程内，map 不可以边遍历边删除。map 并不是一个线程安全的数据结构。同时读写一个 map 是未定义的行为，如果被检测到，会直接 panic。\n若在同一个协程内，map 是可以边遍历边删除的：\nfor k := range m { delete(m, k) } 但是不建议这样清空 map，建议为 map 重新赋值一个空 map。旧的 map 由 GC 回收。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_194/","summary":"\u003cp\u003eGo 的 map 可以边遍历边删除吗？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e这题要分情况分析。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e若在不同协程内，map 不可以边遍历边删除。map 并不是一个线程安全的数据结构。同时读写一个 map 是未定义的行为，如果被检测到，会直接 panic。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若在同一个协程内，map 是可以边遍历边删除的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delete(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是不建议这样清空 map，建议为 map 重新赋值一个空 map。旧的 map 由 GC 回收。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_194"},{"content":"下面两段代码输出什么。\n// 1. func main() { s := make([]int, 5) s = append(s, 1, 2, 3) fmt.Println(s) } // 2. func main() { s := make([]int,0) s = append(s,1,2,3,4) fmt.Println(s) } 🔑 答案解析： // 1. [0 0 0 0 0 1 2 3] // 2. [1 2 3 4] 参考解析：这道题考的是使用 append 向 slice 添加元素，第一段代码常见的错误是 [1 2 3]，需要注意。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_193/","summary":"\u003cp\u003e下面两段代码输出什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参考解析：这道题考的是使用 append 向 slice 添加元素，第一段代码常见的错误是 [1 2 3]，需要注意。\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_193"},{"content":"在遍历 map 的时候，我们会发现，输出的 key 是无序的。为什么？\n🔑 答案解析： 输出的 key 是无序的本质原因是,遍历 map 时并不是固定地从 0 号 bucket 开始遍历，每次都是从一个随机值序号的 bucket 开始遍历，并且是从这个 bucket 的一个随机序号的 cell 开始遍历。\n该随机值序号是在Go1.0开始加入的。\n为什么要引入随机种子呢？因为在老版本若不发生扩容,遍历输出的顺序是固定的，但当扩容后,遍历输出的顺序就不固定了。这样会导致歧义。\n扩容的时候，会导致原本在同一个bucket的key，被分配到不同的bucket中。导致遍历输出的顺序发生改变。\n可以阅读文章Go_为什么Map是无序的\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_192/","summary":"\u003cp\u003e在遍历 map 的时候，我们会发现，输出的 key 是无序的。为什么？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e输出的 key 是无序的本质原因是,遍历 map 时并不是固定地从 0 号 bucket 开始遍历，每次都是从一个随机值序号的 bucket 开始遍历，并且是从这个 bucket 的一个随机序号的 cell 开始遍历。\u003cbr\u003e\n该随机值序号是在Go1.0开始加入的。\u003cbr\u003e\n为什么要引入随机种子呢？因为在老版本若不发生扩容,遍历输出的顺序是固定的，但当扩容后,遍历输出的顺序就不固定了。这样会导致歧义。\u003cbr\u003e\n扩容的时候，会导致原本在同一个bucket的key，被分配到不同的bucket中。导致遍历输出的顺序发生改变。\u003c/p\u003e\n\u003cp\u003e可以阅读文章\u003ca href=\"../../../skill/data/Go_%E4%B8%BA%E4%BB%80%E4%B9%88Map%E6%98%AF%E6%97%A0%E5%BA%8F%E7%9A%84\"\u003eGo_为什么Map是无序的\u003c/a\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_192"},{"content":"下面这段代码输出什么，说明原因。\npackage main import \u0026#34;fmt\u0026#34; func main() { slice := []int{0, 1, 2, 3} m := make(map[int]*int) for key, val := range slice { m[key] = \u0026amp;val } for k, v := range m { fmt.Println(k, \u0026#34;-\u0026gt;\u0026#34;, *v) } } 🔑 答案解析： Go1.22 版本之前\n0 -\u0026gt; 3 1 -\u0026gt; 3 2 -\u0026gt; 3 3 -\u0026gt; 3 Go1.22 版本之后\n0 -\u0026gt; 0 1 -\u0026gt; 1 2 -\u0026gt; 2 3 -\u0026gt; 3 Go在线运行\nGo1.22 之前 for range 循环的时候会key, val的地址是不会变化的，所以输出都是3\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_191/","summary":"\u003cp\u003e下面这段代码输出什么，说明原因。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026gt;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eGo1.22 版本之前\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGo1.22 版本之后\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/9TPNWgfwp0J\"\u003eGo在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGo1.22 之前 for range 循环的时候会key, val的地址是不会变化的，所以输出都是3\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_191"},{"content":"内存泄漏有哪些场景?\n🔑 答案解析： 长生命周期的对象持有短生命周期对象的引用： 例如全局变量引用到的对象 未关闭的 Goroutine：Goroutine 启动后，如果由于某种原因（例如死锁、无限循环、channel 阻塞）而无法正常结束，就会一直占用内存。 time包使用不当 字符串操作不当 文件、网络连接等资源未关闭： CGO 内存管理不当 :如果你的 Go 代码使用了 CGO，并且在 C 代码中分配了内存，那么你需要手动释放这些内存。 否则，会导致内存泄漏。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_190/","summary":"\u003cp\u003e内存泄漏有哪些场景?\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cul\u003e\n\u003cli\u003e长生命周期的对象持有短生命周期对象的引用： 例如全局变量引用到的对象\u003c/li\u003e\n\u003cli\u003e未关闭的 Goroutine：Goroutine 启动后，如果由于某种原因（例如死锁、无限循环、channel 阻塞）而无法正常结束，就会一直占用内存。\u003c/li\u003e\n\u003cli\u003etime包使用不当\u003c/li\u003e\n\u003cli\u003e字符串操作不当\u003c/li\u003e\n\u003cli\u003e文件、网络连接等资源未关闭：\u003c/li\u003e\n\u003cli\u003eCGO 内存管理不当 :如果你的 Go 代码使用了 CGO，并且在 C 代码中分配了内存，那么你需要手动释放这些内存。 否则，会导致内存泄漏。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_190"},{"content":"如果 Add() 函数的调用代码为：\nfunc main() { var a Integer = 1 var b Integer = 2 var i interface{} = \u0026amp;a sum := i.(*Integer).Add(b) fmt.Println(sum) } 则Add函数定义正确的是：\nA. type Integer int func (a Integer) Add(b Integer) Integer { return a + b } B. type Integer int func (a Integer) Add(b *Integer) Integer { return a + *b } C. type Integer int func (a *Integer) Add(b Integer) Integer { return *a + b } D. type Integer int func (a *Integer) Add(b *Integer) Integer { return *a + *b } 🔑 答案解析： A C\n从代码i.(*Integer).Add(b) 就可以得出C答案是一定符合的。\nA代码 接收者类型：值类型 Integer，但可通过指针调用（Go 自动解引用*Integer为 Integer）。 因此A代码也合法。\nGo官方文档-Method_values\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_189/","summary":"\u003cp\u003e如果 Add() 函数的调用代码为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e则Add函数定义正确的是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eD\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA C\u003c/p\u003e\n\u003cp\u003e从代码i.(*Integer).Add(b) 就可以得出C答案是一定符合的。\u003cbr\u003e\nA代码 接收者类型：值类型 Integer，但可通过指针调用（Go 自动解引用\u003ccode\u003e*Integer\u003c/code\u003e为 Integer）。\n因此A代码也合法。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/ref/spec#Method_values\"\u003eGo官方文档-Method_values\u003c/a\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_189"},{"content":"谈一下切片的复制过程。\n🔑 答案解析： Go切片分为浅拷贝和深拷贝 浅拷贝 Go切片是由长度、容量、底层数值组成的。浅拷贝就是仅复制切片头（切片指针、长度、容量）\n由于切片的底层数组是共享的，因此修改切片元素会影响到其他切片。\n// 浅拷贝 方式一 package main import \u0026#34;fmt\u0026#34; func main() { var slice1 []int = []int{1, 2, 3} slice2 := slice1 // 浅拷贝 slice2[0] = 4 fmt.Println(slice1) // [4 2 3] } 深拷贝 // 深拷贝 方式一 package main import \u0026#34;fmt\u0026#34; func main() { var slice1 []int = []int{1, 2, 3} var slice2 []int = make([]int, len(slice1)) copy(slice2, slice1) slice2[0] = 4 fmt.Println(slice1) // [1 2 3] } // 深拷贝 方案二 package main import \u0026#34;fmt\u0026#34; func main() { var slice1 []int = []int{1, 2, 3} var slice2 []int slice2 = append(slice2, slice1...) slice2[0] = 4 fmt.Println(slice1) // [1 2 3] fmt.Println(slice2) // [4 2 3] } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_188/","summary":"\u003cp\u003e谈一下切片的复制过程。\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch3 id=\"go切片分为浅拷贝和深拷贝\"\u003eGo切片分为浅拷贝和深拷贝\u003c/h3\u003e\n\u003ch4 id=\"浅拷贝\"\u003e浅拷贝\u003c/h4\u003e\n\u003cp\u003eGo切片是由长度、容量、底层数值组成的。浅拷贝就是仅复制切片头（切片指针、长度、容量）\u003cbr\u003e\n由于切片的底层数组是共享的，因此修改切片元素会影响到其他切片。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 浅拷贝 方式一\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 浅拷贝\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// [4 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"深拷贝\"\u003e深拷贝\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 深拷贝 方式一\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    copy(\u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e// [1 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 深拷贝 方案二\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e// [1 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e// [4 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_188"},{"content":"力扣链接: 1287. 有序数组中出现次数超过25%的元素\n力扣难度 简单\n算法评级: 3 理解常用数据结构和算法\n难度分 1179\n题目: 给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。\n请你找到并返回这个整数\n示例：\n输入：arr = [1,2,2,6,6,6,6,7,10]\n输出：6\n提示：\n1 \u0026lt;= arr.length \u0026lt;= 10^4 0 \u0026lt;= arr[i] \u0026lt;= 10^5 func findSpecialInteger(arr []int) int { } 👈点击 func findSpecialInteger(arr []int) (ans int) { n := len(arr) / 4 f := arr[0] i := 0 for _, v := range arr { if v == f { i++ } else { f = v i = 1 } if i \u0026gt; n { ans = f break } } return } ","permalink":"https://loommii.github.io/posts/leetcode/data/1287_%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%E7%9A%84%E5%85%83%E7%B4%A0/","summary":"\u003cp\u003e力扣链接: \u003ca href=\"https://leetcode.cn/problems/element-appearing-more-than-25-in-sorted-array/description/\"\u003e1287. 有序数组中出现次数超过25%的元素\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  3      理解常用数据结构和算法\u003c/p\u003e\n\u003cp\u003e难度分 1179\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。\u003c/p\u003e\n\u003cp\u003e请你找到并返回这个整数\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：arr = [1,2,2,6,6,6,6,7,10]\u003cbr\u003e\n输出：6\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= arr.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= arr[i] \u0026lt;= 10^5\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindSpecialInteger\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindSpecialInteger\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"1287_有序数组中出现次数超过25%的元素"},{"content":"力扣链接: 1299. 将每个元素替换为右侧最大元素\n力扣难度 简单\n算法评级: 3 理解常用数据结构和算法\n难度分 1219\n题目: 给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。\n完成所有替换操作后，请你返回这个数组。\n示例 1：\n输入：arr = [17,18,5,4,6,1] 输出：[18,6,6,6,1,-1] 解释：\n下标 0 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 1 的元素 (18) 下标 1 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 4 的元素 (6) 下标 2 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 4 的元素 (6) 下标 3 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 4 的元素 (6) 下标 4 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 5 的元素 (1) 下标 5 的元素 \u0026ndash;\u0026gt; 右侧没有其他元素，替换为 -1 示例 2：\n输入：arr = [400] 输出：[-1] 解释：下标 0 的元素右侧没有其他元素。\nfunc replaceElements(arr []int) []int { } 🔑 答案解析： 👈点击 // 暴力 func replaceElements(arr []int) []int { n := len(arr) ans := make([]int, n) for i := 0; i \u0026lt; n; i++ { maxV := -1 for j := i + 1; j \u0026lt; n; j++ { maxV = max(maxV, arr[j]) } ans[i] = maxV } return ans } // DP 从后往前 维护最大值 func replaceElements(arr []int) []int { n := len(arr) ans := make([]int, n) ans[n-1] = -1 for i := n - 2; i \u0026gt;= 0; i-- { ans[i] = max(arr[i+1], ans[i+1]) } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/1299_%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/","summary":"\u003cp\u003e力扣链接: \u003ca href=\"https://leetcode.cn/problems/replace-elements-with-greatest-element-on-right-side/description/\"\u003e1299. 将每个元素替换为右侧最大元素\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  3      理解常用数据结构和算法\u003c/p\u003e\n\u003cp\u003e难度分 1219\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。\u003c/p\u003e\n\u003cp\u003e完成所有替换操作后，请你返回这个数组。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：arr = [17,18,5,4,6,1]\n输出：[18,6,6,6,1,-1]\n解释：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e下标 0 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 1 的元素 (18)\u003c/li\u003e\n\u003cli\u003e下标 1 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 4 的元素 (6)\u003c/li\u003e\n\u003cli\u003e下标 2 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 4 的元素 (6)\u003c/li\u003e\n\u003cli\u003e下标 3 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 4 的元素 (6)\u003c/li\u003e\n\u003cli\u003e下标 4 的元素 \u0026ndash;\u0026gt; 右侧最大元素是下标 5 的元素 (1)\u003c/li\u003e\n\u003cli\u003e下标 5 的元素 \u0026ndash;\u0026gt; 右侧没有其他元素，替换为 -1\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e","title":"1299_将每个元素替换为右侧最大元素"},{"content":"向一个 nil 的切片中 append 数据可以吗?\n🔑 答案解析： 具体要看声明的时候，如果声明为 var a []int = nil，那么就可以 append 数据,若为var a *[]int = nil 这不可以 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_187/","summary":"\u003cp\u003e向一个 nil 的切片中 append 数据可以吗?\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  具体要看声明的时候，如果声明为 \u003ccode\u003evar a []int = nil\u003c/code\u003e，那么就可以 append 数据,若为\u003ccode\u003evar a *[]int = nil\u003c/code\u003e 这不可以\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_187"},{"content":"数组和切片的区别\n🔑 答案解析： 从结构上对比：切片的的结构是由长度、容量、底层数组这3部分组成的。数组的结构是一段连续连续的内存。 从功能上对比：切片是相对灵活的支持容量的动态地扩容。数组的容量的固定不变的。 从限制上对比：相同类型且容量相同的数组是可以通过==运算符对比的，而切片则不行。 常考资料 🔗:数组和切片有什么不同\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_186/","summary":"\u003cp\u003e数组和切片的区别\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003col\u003e\n\u003cli\u003e从结构上对比：切片的的结构是由长度、容量、底层数组这3部分组成的。数组的结构是一段连续连续的内存。\u003c/li\u003e\n\u003cli\u003e从功能上对比：切片是相对灵活的支持容量的动态地扩容。数组的容量的固定不变的。\u003c/li\u003e\n\u003cli\u003e从限制上对比：相同类型且容量相同的数组是可以通过==运算符对比的，而切片则不行。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e常考资料 🔗:\u003ca href=\"https://golang.design/go-questions/slice/vs-array/\"\u003e数组和切片有什么不同\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_186"},{"content":"关于switch语句，下面说法正确的有?\nA. 条件表达式必须为常量或者整数； B. 单个case中，可以出现多个结果选项； C. 需要用break来明确退出一个case； D. 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case； 🔑 答案解析： BD\nA 错误,条件不限于常量或整数\nB 正确,case中可以出现多个结果选项\ncase \u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;: fmt.Println(\u0026#34;Fruit\u0026#34;) C 错误 Go语言不需要break D 正确\ncase 1: fmt.Println(\u0026#34;1\u0026#34;) fallthrough // 会继续执行下一个case case 2: fmt.Println(\u0026#34;2\u0026#34;) ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_185/","summary":"\u003cp\u003e关于switch语句，下面说法正确的有?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. 条件表达式必须为常量或者整数；\u003c/li\u003e\n\u003cli\u003eB. 单个case中，可以出现多个结果选项；\u003c/li\u003e\n\u003cli\u003eC. 需要用break来明确退出一个case；\u003c/li\u003e\n\u003cli\u003eD. 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eBD\u003c/p\u003e\n\u003cp\u003eA 错误,条件不限于常量或整数\u003cbr\u003e\nB 正确,case中可以出现多个结果选项\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;banana\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fruit\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eC 错误 Go语言不需要break\nD 正确\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efallthrough\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// 会继续执行下一个case\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_185"},{"content":"关于类型转化，下面选项正确的是？\nA. type MyInt int var i int = 1 var j MyInt = i B. type MyInt int var i int = 1 var j MyInt = (MyInt)i C. type MyInt int var i int = 1 var j MyInt = MyInt(i) D. type MyInt int var i int = 1 var j MyInt = i.(MyInt) 🔑 答案解析： C\ntype MyInt int // 定义一个类型别名 var i int = 1 // 声明并赋值变量i 值为 1 // A var j MyInt = i // 错误，因为变量i的类型为int，而变量j的类型为MyInt，它们不是同一种类型，不能直接赋值。 // B var j MyInt = (MyInt)i // 错误,C/C++ 风格的强制转换语法，在 Go 中无效 // C var j MyInt = MyInt(i) // 正确,Go 的类型转换语法，将变量i转换为MyInt类型 // D var j MyInt = i.(MyInt) // 错误, 这是Go 类型断言语法,断言使用在空接口或any上。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_184/","summary":"\u003cp\u003e关于类型转化，下面选项正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = (\u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eD\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 定义一个类型别名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// 声明并赋值变量i 值为 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 错误，因为变量i的类型为int，而变量j的类型为MyInt，它们不是同一种类型，不能直接赋值。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = (\u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 错误,C/C++ 风格的强制转换语法，在 Go 中无效\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 正确,Go 的类型转换语法，将变量i转换为MyInt类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 错误, 这是Go 类型断言语法,断言使用在空接口或any上。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_184"},{"content":"下面代码输出正确的是？\npackage main import \u0026#34;fmt\u0026#34; func main() { i := 1 s := []string{\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;} i, s[i-1] = 2, \u0026#34;Z\u0026#34; fmt.Printf(\u0026#34;s: %v \\n\u0026#34;, s) } A. s: [Z,B,C] B. s: [A,Z,C] 🔑 答案解析： 答案：A Go在线运行\n知识点：多重赋值 多重赋值分为两个步骤，并且有严格的先后顺序：\n计算阶段： 首先计算等号左边的索引表达式和取址表达式，然后再计算等号右边的所有表达式。 注意，这里是 先左后右，但是 左侧内部是从左往右计算。 赋值阶段： 将计算出的右侧表达式的值，按照从左到右的顺序，依次赋值给左侧相应的变量。 重点 计算阶段先计算左侧索引，如果索引涉及到变量，此时变量的值就是参与索引计算的值。 赋值阶段的顺序是从左到右。 本例解析 在本例中，会首先计算 s[i-1]。此时 i 的值为 1，所以计算的是 s[0]。等号右边的两个表达式都是常量，计算结果分别为 2 和 \u0026ldquo;Z\u0026rdquo;。 然后执行赋值，因此赋值运算等同于 i, s[0] = 2, \u0026quot;Z\u0026quot;。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_183/","summary":"\u003cp\u003e下面代码输出正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Z\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s: %v \\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. s: [Z,B,C]\u003c/li\u003e\n\u003cli\u003eB. s: [A,Z,C]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch3 id=\"答案a\"\u003e答案：A\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/cLui57mACBf\"\u003eGo在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"知识点多重赋值\"\u003e知识点：多重赋值\u003c/h3\u003e\n\u003cp\u003e多重赋值分为两个步骤，并且有严格的先后顺序：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e计算阶段： 首先计算等号左边的索引表达式和取址表达式，然后再计算等号右边的所有表达式。  注意，这里是 \u003cem\u003e先左后右\u003c/em\u003e，但是 \u003cem\u003e左侧内部是从左往右计算\u003c/em\u003e。\u003c/li\u003e\n\u003cli\u003e赋值阶段： 将计算出的右侧表达式的值，按照从左到右的顺序，依次赋值给左侧相应的变量。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"重点\"\u003e重点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e计算阶段先计算左侧索引，如果索引涉及到变量，此时变量的值就是参与索引计算的值。\u003c/li\u003e\n\u003cli\u003e赋值阶段的顺序是从左到右。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"本例解析\"\u003e本例解析\u003c/h3\u003e\n\u003cp\u003e在本例中，会首先计算 \u003ccode\u003es[i-1]\u003c/code\u003e。此时 \u003ccode\u003ei\u003c/code\u003e 的值为 1，所以计算的是 \u003ccode\u003es[0]\u003c/code\u003e。等号右边的两个表达式都是常量，计算结果分别为 2 和 \u0026ldquo;Z\u0026rdquo;。  然后执行赋值，因此赋值运算等同于 \u003ccode\u003ei, s[0] = 2, \u0026quot;Z\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_183"},{"content":"关于循环语句，下面说法正确的有（）\nA. 循环语句既支持 for 关键字，也支持 while 和 do-while； B. 关键字 for 的基本使用方法与 C/C++ 中没有任何差异； C. for 循环支持 continue 和 break 来控制循环，但是它提供了一个更高级的 break，可以选择中断哪一个循环； D. for 循环不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量； 🔑 答案解析： CD\nC Go 支持带标签的 break，可指定中断外层循环：\nOuterLoop: for i := 0; i \u0026lt; 5; i++ { for j := 0; j \u0026lt; 5; j++ { if someCondition { break OuterLoop // 直接跳出外层循环 } } } D Go 支持带标签的 break，可指定中断外层循环：\n// ✅ 正确写法（平行赋值） for i, j := 0, 1; i \u0026lt; 10; i, j = i+1, j*2 { ... } // ❌ 错误写法（逗号分隔） for i = 0, j = 1; i \u0026lt; 10; i++, j*=2 { ... } A❌ 错误 Go 语言只有 for 循环，没有 while 和 do-while 关键字，但可以通过 for 的变体模拟这两种循环。\nB❌ 错误 C/C++ 的 for 循环（需要括号） Go多个赋值语句必须使用平行赋值的方式,C/C++ 逗号分隔的多变量初始化\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_182/","summary":"\u003cp\u003e关于循环语句，下面说法正确的有（）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. 循环语句既支持 for 关键字，也支持 while 和 do-while；\u003c/li\u003e\n\u003cli\u003eB. 关键字 for 的基本使用方法与 C/C++ 中没有任何差异；\u003c/li\u003e\n\u003cli\u003eC. for 循环支持 continue 和 break 来控制循环，但是它提供了一个更高级的 break，可以选择中断哪一个循环；\u003c/li\u003e\n\u003cli\u003eD. for 循环不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eCD\u003c/p\u003e\n\u003ch3 id=\"c\"\u003eC\u003c/h3\u003e\n\u003cp\u003eGo 支持带标签的 break，可指定中断外层循环：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eOuterLoop\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esomeCondition\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eOuterLoop\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 直接跳出外层循环\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"d\"\u003eD\u003c/h3\u003e\n\u003cp\u003eGo 支持带标签的 break，可指定中断外层循环：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ✅ 正确写法（平行赋值）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e { \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ❌ 错误写法（逗号分隔）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e { \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"a-错误\"\u003eA❌ 错误\u003c/h3\u003e\n\u003cp\u003eGo 语言只有 for 循环，没有 while 和 do-while 关键字，但可以通过 for 的变体模拟这两种循环。\u003c/p\u003e","title":"Go每日一题_182"},{"content":"下面代码里的 counter 的输出值？\npackage main import \u0026#34;fmt\u0026#34; func main() { var m = map[string]int{ \u0026#34;A\u0026#34;: 21, \u0026#34;B\u0026#34;: 22, \u0026#34;C\u0026#34;: 23, } counter := 0 for k, v := range m { if counter == 0 { delete(m, \u0026#34;A\u0026#34;) } counter++ fmt.Println(k, v) } fmt.Println(\u0026#34;counter is \u0026#34;, counter) } A. 2 B. 3 C. 2 或 3 🔑 答案解析： C Go在线运行 for range map 是无序的，如果第一次循环到 A，则输出 3；否则输出 2。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_181/","summary":"\u003cp\u003e下面代码里的 counter 的输出值？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delete(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;counter is \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 2\u003c/li\u003e\n\u003cli\u003eB. 3\u003c/li\u003e\n\u003cli\u003eC. 2 或 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  C\n\u003ca href=\"https://go.dev/play/p/-OKOFSeE6GS\"\u003eGo在线运行\u003c/a\u003e\nfor range map 是无序的，如果第一次循环到 A，则输出 3；否则输出 2。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_181"},{"content":"下面这段代码输出结果正确吗？为什么？\npackage main import \u0026#34;fmt\u0026#34; type Foo struct { bar string } func main() { s1 := []Foo{ {\u0026#34;A\u0026#34;}, {\u0026#34;B\u0026#34;}, {\u0026#34;C\u0026#34;}, } s2 := make([]*Foo, len(s1)) for i, value := range s1 { s2[i] = \u0026amp;value } fmt.Println(s1[0], s1[1], s1[2]) fmt.Println(s2[0], s2[1], s2[2]) } // 输出： // {A} {B} {C} // \u0026amp;{A} \u0026amp;{B} \u0026amp;{C} 🔑 答案解析： Go在线运行\n这个问题要看Go版本，在Go版本\u0026lt;1.22时输出的结果为\n// 输出： // {A} {B} {C} // \u0026amp;{C} \u0026amp;{C} \u0026amp;{C} 而1.22以后的版本输出的结果是\n// 输出： // {A} {B} {C} // \u0026amp;{A} \u0026amp;{B} \u0026amp;{C} 在1.22以前 for i, value := range s1 中会复用value的地址。\ns2[i] = \u0026amp;value 记录的地址都是同一个地址。 每次循环迭代中value的内容不断的变换，直到遍历到最后一个值即{C}\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_180/","summary":"\u003cp\u003e下面这段代码输出结果正确吗？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFoo\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebar\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003eFoo\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eFoo\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 输出：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {A} {B} {C}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// \u0026amp;{A} \u0026amp;{B} \u0026amp;{C}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/4uuNEdJyZAC\"\u003eGo在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这个问题要看Go版本，在Go版本\u0026lt;1.22时输出的结果为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 输出：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {A} {B} {C}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// \u0026amp;{C} \u0026amp;{C} \u0026amp;{C}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而1.22以后的版本输出的结果是\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 输出：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {A} {B} {C}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// \u0026amp;{A} \u0026amp;{B} \u0026amp;{C}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在1.22以前 for i, value := range s1 中会复用value的地址。\u003cbr\u003e\ns2[i] = \u0026amp;value 记录的地址都是同一个地址。\n每次循环迭代中value的内容不断的变换，直到遍历到最后一个值即{C}\u003c/p\u003e","title":"Go每日一题_180"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { var a = []int{1, 2, 3, 4, 5} var r [5]int for i, v := range a { if i == 0 { a[1] = 12 a[2] = 13 } r[i] = v } fmt.Println(\u0026#34;r = \u0026#34;, r) fmt.Println(\u0026#34;a = \u0026#34;, a) } 🔑 答案解析： r = [1 12 13 4 5] a = [1 12 13 4 5] Go在线运行\n遍历的虽然是a的副本，但是在不发生扩容的情况下，副本和a指向的都是同一个底层数组，因此可以修改到a的内容\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_179/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;r = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e =  [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =  [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/70_mTGYgNo3\"\u003eGo在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e遍历的虽然是a的副本，但是在不发生扩容的情况下，副本和a指向的都是同一个底层数组，因此可以修改到a的内容\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_179"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func change(s ...int) { s = append(s, 3) } func main() { slice := make([]int, 5, 5) slice[0] = 1 slice[1] = 2 change(slice...) fmt.Println(slice) change(slice[0:2]...) fmt.Println(slice) } 🔑 答案解析： [1 2 0 0 0] [1 2 3 0 0] Go在线运行\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_178/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/sJ68ZpNd2Tj\"\u003eGo在线运行\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_178"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { var a = [5]int{1, 2, 3, 4, 5} var r [5]int for i, v := range a { if i == 0 { a[1] = 12 a[2] = 13 } r[i] = v } fmt.Println(\u0026#34;r = \u0026#34;, r) fmt.Println(\u0026#34;a = \u0026#34;, a) } 🔑 答案解析： r = [1 2 3 4 5] a = [1 12 13 4 5] Go在线运行\n数组的 range 行为：当使用 range 遍历数组时，Go 会先创建原数组的副本，遍历的是这个副本。因此，循环中对原数组的修改不会影响迭代中的值。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_177/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;r = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e =  [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =  [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/rUJZHJQLR1b\"\u003eGo在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e数组的 range 行为：当使用 range 遍历数组时，Go 会先创建原数组的副本，遍历的是这个副本。因此，循环中对原数组的修改不会影响迭代中的值。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_177"},{"content":"下面这段代码输出什么？为什么？\npackage main import \u0026#34;fmt\u0026#34; type People interface { Show() } type Student struct{} func (stu *Student) Show() { } func main() { var s *Student if s == nil { fmt.Println(\u0026#34;s is nil\u0026#34;) } else { fmt.Println(\u0026#34;s is not nil\u0026#34;) } var p People = s if p == nil { fmt.Println(\u0026#34;p is nil\u0026#34;) } else { fmt.Println(\u0026#34;p is not nil\u0026#34;) } } 🔑 答案解析： s is nil p is not nil 记住一点，当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。\n代码解析：\n1. 变量 s 的判断 var s *Student 声明了一个 *Student 类型的指针变量 s，默认值为 nil 直接判断 s == nil 为 true，输出 s is nil 2. 变量 p 的判断 var p People = s 将 s（值为 nil 的指针）赋值给接口类型 People 的变量 p Go 接口的底层结构：接口变量 p 包含两个字段： 动态类型（*Student）：存储赋值给接口的具体类型 动态值（nil）：存储具体类型的值 接口判空规则：只有当接口的 动态类型 和 动态值 同时为 nil 时，接口变量才等于 nil 本例中，p 的 动态类型 是 *Student（非 nil），动态值 是 nil，因此 p == nil 为 false，输出 p is not nil 关键结论 指针判空：var s *T 的默认值是 nil 接口判空： 如果直接将 nil 赋给接口（如 var p People = nil），则接口的 动态类型 和 动态值 均为 nil，此时 p == nil 为 true 如果通过具体类型的 nil 指针赋给接口（如 var p People = s），则接口的 动态类型 会被记录为具体类型（非 nil），即使值为 nil，接口变量也不等于 nil 总结：\n我们分配给变量 p 的值明明是 nil，然而 p 却不是 nil。记住一点，当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。上面的代码中，给变量 p 赋值之后，p 的动态值是 nil，但是动态类型却是 *Student，是一个 nil 指针，所以 p == nil 为 false。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_176/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s is nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s is not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;p is nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;p is not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e记住一点，当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e代码解析：\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"1-变量-s-的判断\"\u003e1. 变量 \u003ccode\u003es\u003c/code\u003e 的判断\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evar s *Student\u003c/code\u003e 声明了一个 \u003ccode\u003e*Student\u003c/code\u003e 类型的指针变量 \u003ccode\u003es\u003c/code\u003e，默认值为 \u003ccode\u003enil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e直接判断 \u003ccode\u003es == nil\u003c/code\u003e 为 \u003ccode\u003etrue\u003c/code\u003e，输出 \u003ccode\u003es is nil\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-变量-p-的判断\"\u003e2. 变量 \u003ccode\u003ep\u003c/code\u003e 的判断\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evar p People = s\u003c/code\u003e 将 \u003ccode\u003es\u003c/code\u003e（值为 \u003ccode\u003enil\u003c/code\u003e 的指针）赋值给接口类型 \u003ccode\u003ePeople\u003c/code\u003e 的变量 \u003ccode\u003ep\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGo 接口的底层结构\u003c/strong\u003e：接口变量 \u003ccode\u003ep\u003c/code\u003e 包含两个字段：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e动态类型\u003c/code\u003e（\u003ccode\u003e*Student\u003c/code\u003e）：存储赋值给接口的具体类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e动态值\u003c/code\u003e（\u003ccode\u003enil\u003c/code\u003e）：存储具体类型的值\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e接口判空规则\u003c/strong\u003e：只有当接口的 \u003ccode\u003e动态类型\u003c/code\u003e 和 \u003ccode\u003e动态值\u003c/code\u003e 同时为 \u003ccode\u003enil\u003c/code\u003e 时，接口变量才等于 \u003ccode\u003enil\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e本例中，\u003ccode\u003ep\u003c/code\u003e 的 \u003ccode\u003e动态类型\u003c/code\u003e 是 \u003ccode\u003e*Student\u003c/code\u003e（非 \u003ccode\u003enil\u003c/code\u003e），\u003ccode\u003e动态值\u003c/code\u003e 是 \u003ccode\u003enil\u003c/code\u003e，因此 \u003ccode\u003ep == nil\u003c/code\u003e 为 \u003ccode\u003efalse\u003c/code\u003e，输出 \u003ccode\u003ep is not nil\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"关键结论\"\u003e关键结论\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e指针判空\u003c/strong\u003e：\u003ccode\u003evar s *T\u003c/code\u003e 的默认值是 \u003ccode\u003enil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e接口判空\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e如果直接将 \u003ccode\u003enil\u003c/code\u003e 赋给接口（如 \u003ccode\u003evar p People = nil\u003c/code\u003e），则接口的 \u003ccode\u003e动态类型\u003c/code\u003e 和 \u003ccode\u003e动态值\u003c/code\u003e 均为 \u003ccode\u003enil\u003c/code\u003e，此时 \u003ccode\u003ep == nil\u003c/code\u003e 为 \u003ccode\u003etrue\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果通过具体类型的 \u003ccode\u003enil\u003c/code\u003e 指针赋给接口（如 \u003ccode\u003evar p People = s\u003c/code\u003e），则接口的 \u003ccode\u003e动态类型\u003c/code\u003e 会被记录为具体类型（非 \u003ccode\u003enil\u003c/code\u003e），即使值为 \u003ccode\u003enil\u003c/code\u003e，接口变量也不等于 \u003ccode\u003enil\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e总结：\u003c/strong\u003e\u003c/p\u003e","title":"Go每日一题_176"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; const ( a = iota b = iota ) const ( name = \u0026#34;name\u0026#34; c = iota d = iota ) func main() { fmt.Println(a) fmt.Println(b) fmt.Println(c) fmt.Println(d) } 🔑 答案解析： 0\r1\r1\r2 在线运行\n代码解析：\n第一个 const 块 a = iota: iota 在 const 块中从 0 开始计数，因此 a = 0 b = iota: iota 自增到 1，因此 b = 1 第二个 const 块 name = \u0026quot;name\u0026quot;: 未使用 iota，但 iota 初始值为 0，声明后自增到 1 c = iota: 当前 iota 值为 1，因此 c = 1 d = iota: iota 继续自增到 2，因此 d = 2 关键规则 iota 在每个 const 块中从 0 开始计数 每行常量声明（无论是否使用 iota）都会使 iota 自增 1 不同 const 块的 iota 相互独立 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_175/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e    = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e    = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0\r\n1\r\n1\r\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/3owhzDo5QeG\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e代码解析：\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"第一个-const-块\"\u003e第一个 \u003ccode\u003econst\u003c/code\u003e 块\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ea = iota\u003c/code\u003e: \u003ccode\u003eiota\u003c/code\u003e 在 \u003ccode\u003econst\u003c/code\u003e 块中从 \u003ccode\u003e0\u003c/code\u003e 开始计数，因此 \u003ccode\u003ea = 0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eb = iota\u003c/code\u003e: \u003ccode\u003eiota\u003c/code\u003e 自增到 \u003ccode\u003e1\u003c/code\u003e，因此 \u003ccode\u003eb = 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"第二个-const-块\"\u003e第二个 \u003ccode\u003econst\u003c/code\u003e 块\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ename = \u0026quot;name\u0026quot;\u003c/code\u003e: 未使用 \u003ccode\u003eiota\u003c/code\u003e，但 \u003ccode\u003eiota\u003c/code\u003e 初始值为 \u003ccode\u003e0\u003c/code\u003e，声明后自增到 \u003ccode\u003e1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ec = iota\u003c/code\u003e: 当前 \u003ccode\u003eiota\u003c/code\u003e 值为 \u003ccode\u003e1\u003c/code\u003e，因此 \u003ccode\u003ec = 1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ed = iota\u003c/code\u003e: \u003ccode\u003eiota\u003c/code\u003e 继续自增到 \u003ccode\u003e2\u003c/code\u003e，因此 \u003ccode\u003ed = 2\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"关键规则\"\u003e关键规则\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eiota\u003c/code\u003e 在每个 \u003ccode\u003econst\u003c/code\u003e 块中从 \u003ccode\u003e0\u003c/code\u003e 开始计数\u003c/li\u003e\n\u003cli\u003e每行常量声明（无论是否使用 \u003ccode\u003eiota\u003c/code\u003e）都会使 \u003ccode\u003eiota\u003c/code\u003e 自增 \u003ccode\u003e1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e不同 \u003ccode\u003econst\u003c/code\u003e 块的 \u003ccode\u003eiota\u003c/code\u003e 相互独立\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_175"},{"content":"下面这段代码输出什么？为什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { s1 := []int{1, 2, 3} s2 := s1[1:] s2[1] = 4 fmt.Println(s1) s2 = append(s2, 5, 6, 7) fmt.Println(s2) } 🔑 答案解析： [1 2 4] [2 4 5 6 7] 在线运行\n切片共享底层数组 s1 初始化为 []int{1, 2, 3}，底层数组为 [1, 2, 3]，长度和容量均为 3。 s2 := s1[1:] 创建了 s1 的子切片。此时： s2 的底层数组与 s1 相同。 s2 的起始索引为 1，长度为 2（元素为 [2, 3]），容量为 2（原切片容量 3 - 起始索引 1 = 2）。 修改共享元素 s2[1] = 4 修改的是底层数组的第三个元素（索引 2）。由于 s1 和 s2 共享底层数组，s1 变为 [1, 2, 4]。 append 触发扩容 s2 = append(s2, 5, 6, 7) 时，原容量 2 不足以容纳 5 个元素（原长度 2 + 3 个新增元素），触发扩容。 扩容后，s2 的底层数组变为全新的数组，与原 s1 完全独立。 新 s2 的元素为 [2, 4, 5, 6, 7]，而 s1 不受影响。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_174/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/XL6Vb0mzsEs\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"切片共享底层数组\"\u003e切片共享底层数组\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es1\u003c/code\u003e 初始化为 \u003ccode\u003e[]int{1, 2, 3}\u003c/code\u003e，底层数组为 \u003ccode\u003e[1, 2, 3]\u003c/code\u003e，长度和容量均为 3。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es2 := s1[1:]\u003c/code\u003e 创建了 \u003ccode\u003es1\u003c/code\u003e 的子切片。此时：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es2\u003c/code\u003e 的底层数组与 \u003ccode\u003es1\u003c/code\u003e 相同。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es2\u003c/code\u003e 的起始索引为 1，长度为 2（元素为 \u003ccode\u003e[2, 3]\u003c/code\u003e），容量为 2（原切片容量 3 - 起始索引 1 = 2）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"修改共享元素\"\u003e修改共享元素\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es2[1] = 4\u003c/code\u003e 修改的是底层数组的第三个元素（索引 2）。由于 \u003ccode\u003es1\u003c/code\u003e 和 \u003ccode\u003es2\u003c/code\u003e 共享底层数组，\u003ccode\u003es1\u003c/code\u003e 变为 \u003ccode\u003e[1, 2, 4]\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"append-触发扩容\"\u003eappend 触发扩容\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es2 = append(s2, 5, 6, 7)\u003c/code\u003e 时，原容量 2 不足以容纳 5 个元素（原长度 2 + 3 个新增元素），触发扩容。\u003c/li\u003e\n\u003cli\u003e扩容后，\u003ccode\u003es2\u003c/code\u003e 的底层数组变为全新的数组，与原 \u003ccode\u003es1\u003c/code\u003e 完全独立。\u003c/li\u003e\n\u003cli\u003e新 \u003ccode\u003es2\u003c/code\u003e 的元素为 \u003ccode\u003e[2, 4, 5, 6, 7]\u003c/code\u003e，而 \u003ccode\u003es1\u003c/code\u003e 不受影响。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_174"},{"content":"下面这段代码输出什么？为什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { s1 := []int{1, 2, 3} s2 := s1[1:] s2[1] = 4 fmt.Println(s1) s2 = append(s2, 5, 6, 7) fmt.Println(s1) } 🔑 答案解析： [1 2 4] [1 2 4] 在线运行\n切片共享底层数组 初始化切片 s1：\ns1 初始化为 []int{1, 2, 3}，底层数组容量为 3。 创建新切片 s2：\ns2 := s1[1:] 创建了一个新切片，起始索引为 1，长度为 2（元素为 2, 3），容量为 2（原数组容量 3 减去起始索引 1）。 修改共享元素：\ns2[1] = 4 修改的是底层数组的索引 2（对应 s1[2]），因此 s1 变为 [1, 2, 4]。 append 触发扩容：\n当执行 s2 = append(s2, 5, 6, 7) 时，原切片 s2 的容量已满（长度 2，容量 2）。 追加操作触发底层数组扩容，系统分配新数组，原数据被复制到新数组，后续修改不再影响 s1 的底层数组。 两次输出结果一致：\n第一次 fmt.Println(s1) 输出 [1 2 4]，反映共享数组的修改。 第二次输出时，s2 的扩容已使其脱离原数组，s1 仍保持为 [1 2 4]。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_173/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/vp5n-jw435M\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"切片共享底层数组\"\u003e切片共享底层数组\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e初始化切片 \u003ccode\u003es1\u003c/code\u003e\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es1\u003c/code\u003e 初始化为 \u003ccode\u003e[]int{1, 2, 3}\u003c/code\u003e，底层数组容量为 3。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e创建新切片 \u003ccode\u003es2\u003c/code\u003e\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es2 := s1[1:]\u003c/code\u003e 创建了一个新切片，起始索引为 1，长度为 2（元素为 \u003ccode\u003e2, 3\u003c/code\u003e），容量为 2（原数组容量 3 减去起始索引 1）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e修改共享元素\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es2[1] = 4\u003c/code\u003e 修改的是底层数组的索引 2（对应 \u003ccode\u003es1[2]\u003c/code\u003e），因此 \u003ccode\u003es1\u003c/code\u003e 变为 \u003ccode\u003e[1, 2, 4]\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eappend\u003c/code\u003e 触发扩容\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当执行 \u003ccode\u003es2 = append(s2, 5, 6, 7)\u003c/code\u003e 时，原切片 \u003ccode\u003es2\u003c/code\u003e 的容量已满（长度 2，容量 2）。\u003c/li\u003e\n\u003cli\u003e追加操作触发底层数组扩容，系统分配新数组，原数据被复制到新数组，后续修改不再影响 \u003ccode\u003es1\u003c/code\u003e 的底层数组。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e两次输出结果一致\u003c/strong\u003e：\u003c/p\u003e","title":"Go每日一题_173"},{"content":"下面的代码有几处语法问题，各是什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var x string = nil if x == nil { x = \u0026#34;default\u0026#34; } fmt.Println(x) } 🔑 答案解析： ./prog.go:8:17: cannot use nil as string value in variable declaration\r./prog.go:9:10: invalid operation: x == nil (mismatched types string and untyped nil) var x string = nil 错误 在 Go 语言中，string 类型的零值是空字符串 \u0026quot;\u0026quot;，而不是 nil。nil 通常用于指针、切片、映射、通道、接口等类型。因此，将 nil 赋值给 string 类型的变量 x 会导致编译错误。\n正确的写法应该是：var x string 或 var x string = \u0026quot;\u0026quot;。\nif x == nil 错误 由于 x 是 string 类型，不能与 nil 进行比较。string 类型的变量应该与空字符串 \u0026quot;\u0026quot; 进行比较。\n正确的写法应该是：if x == \u0026quot;\u0026quot;。\nackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var x string = \u0026#34;\u0026#34; // 或者直接写 var x string if x == \u0026#34;\u0026#34; { x = \u0026#34;default\u0026#34; } fmt.Println(x) } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_172/","summary":"\u003cp\u003e下面的代码有几处语法问题，各是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./prog.go:8:17: cannot use nil as string value in variable declaration\r\n./prog.go:9:10: invalid operation: x == nil (mismatched types string and untyped nil)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"var-x-string--nil-错误\"\u003e\u003ccode\u003evar x string = nil\u003c/code\u003e 错误\u003c/h3\u003e\n\u003cp\u003e在 Go 语言中，\u003ccode\u003estring\u003c/code\u003e 类型的零值是空字符串 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e，而不是 \u003ccode\u003enil\u003c/code\u003e。\u003ccode\u003enil\u003c/code\u003e 通常用于指针、切片、映射、通道、接口等类型。因此，将 \u003ccode\u003enil\u003c/code\u003e 赋值给 \u003ccode\u003estring\u003c/code\u003e 类型的变量 \u003ccode\u003ex\u003c/code\u003e 会导致编译错误。\u003c/p\u003e\n\u003cp\u003e正确的写法应该是：\u003ccode\u003evar x string\u003c/code\u003e 或 \u003ccode\u003evar x string = \u0026quot;\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"if-x--nil-错误\"\u003e\u003ccode\u003eif x == nil\u003c/code\u003e 错误\u003c/h3\u003e\n\u003cp\u003e由于 \u003ccode\u003ex\u003c/code\u003e 是 \u003ccode\u003estring\u003c/code\u003e 类型，不能与 \u003ccode\u003enil\u003c/code\u003e 进行比较。\u003ccode\u003estring\u003c/code\u003e 类型的变量应该与空字符串 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e 进行比较。\u003c/p\u003e","title":"Go每日一题_172"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } A：不能编译； B：45； C：45.2； D：45.0 🔑 答案解析： C 在线运行\n解析 1. 常量表达式 常量表达式是指仅包含常量操作数，且在编译时进行计算的表达式。 常量可以是： 无类型常量（untyped constants）：例如 1、2、5.2。 有类型常量（typed constants）：例如 const b int8 = 3。 字面值常量：例如 1、2、5.2。 具名常量：例如 const a = 1 + 2。 2. 无类型常量的默认类型 无类型常量虽然没有明确的类型，但它们有一个默认类型： 整数型字面量（如 15、25）的默认类型是 int。 浮点数字面量（如 5.2）的默认类型是 float64。 字符串字面量的默认类型是 string。 布尔字面量的默认类型是 bool。 复数字面量的默认类型是 complex128。 3. 类型推断 Go 语言支持类型推断。如果上下文没有明确的类型，编译器会将无类型常量视为其默认类型。 在常量表达式中，如果操作数包含不同类型的无类型常量，结果会按照以下优先级推断类型： 整数 \u0026lt; rune \u0026lt; 浮点数 \u0026lt; 复数。 4. 题目中的常量表达式 var ans float64 = 15 + 25 + 5.2 15 和 25 是无类型整数常量，默认类型是 int。 5.2 是无类型浮点数常量，默认类型是 float64。 在常量表达式中，由于 5.2 是浮点数常量，整个表达式的结果会被推断为浮点数类型（float64）。 运算过程 15 + 25 的结果是 40，仍然是无类型整数常量。 40 + 5.2 的结果是 45.2，由于 5.2 是浮点数常量，整个表达式的结果被推断为 float64 类型。 赋值与输出 最终结果 45.2 被赋值给变量 ans，其类型为 float64。 fmt.Println(ans) 输出 45.2。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_171/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5.2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：不能编译；\u003c/li\u003e\n\u003cli\u003eB：45；\u003c/li\u003e\n\u003cli\u003eC：45.2；\u003c/li\u003e\n\u003cli\u003eD：45.0\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC\n\u003ca href=\"https://go.dev/play/p/VCR1yAY32nG\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"解析\"\u003e解析\u003c/h2\u003e\n\u003ch3 id=\"1-常量表达式\"\u003e1. 常量表达式\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e常量表达式\u003c/strong\u003e是指仅包含常量操作数，且在编译时进行计算的表达式。\u003c/li\u003e\n\u003cli\u003e常量可以是：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e无类型常量\u003c/strong\u003e（untyped constants）：例如 \u003ccode\u003e1\u003c/code\u003e、\u003ccode\u003e2\u003c/code\u003e、\u003ccode\u003e5.2\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e有类型常量\u003c/strong\u003e（typed constants）：例如 \u003ccode\u003econst b int8 = 3\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字面值常量\u003c/strong\u003e：例如 \u003ccode\u003e1\u003c/code\u003e、\u003ccode\u003e2\u003c/code\u003e、\u003ccode\u003e5.2\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e具名常量\u003c/strong\u003e：例如 \u003ccode\u003econst a = 1 + 2\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-无类型常量的默认类型\"\u003e2. 无类型常量的默认类型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e无类型常量虽然没有明确的类型，但它们有一个默认类型：\n\u003cul\u003e\n\u003cli\u003e整数型字面量（如 \u003ccode\u003e15\u003c/code\u003e、\u003ccode\u003e25\u003c/code\u003e）的默认类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e浮点数字面量（如 \u003ccode\u003e5.2\u003c/code\u003e）的默认类型是 \u003ccode\u003efloat64\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e字符串字面量的默认类型是 \u003ccode\u003estring\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e布尔字面量的默认类型是 \u003ccode\u003ebool\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e复数字面量的默认类型是 \u003ccode\u003ecomplex128\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-类型推断\"\u003e3. 类型推断\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGo 语言支持类型推断。如果上下文没有明确的类型，编译器会将无类型常量视为其默认类型。\u003c/li\u003e\n\u003cli\u003e在常量表达式中，如果操作数包含不同类型的无类型常量，结果会按照以下优先级推断类型：\n\u003cul\u003e\n\u003cli\u003e整数 \u0026lt; rune \u0026lt; 浮点数 \u0026lt; 复数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-题目中的常量表达式\"\u003e4. 题目中的常量表达式\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5.2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e15\u003c/code\u003e 和 \u003ccode\u003e25\u003c/code\u003e 是无类型整数常量，默认类型是 \u003ccode\u003eint\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e5.2\u003c/code\u003e 是无类型浮点数常量，默认类型是 \u003ccode\u003efloat64\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在常量表达式中，由于 \u003ccode\u003e5.2\u003c/code\u003e 是浮点数常量，整个表达式的结果会被推断为浮点数类型（\u003ccode\u003efloat64\u003c/code\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"运算过程\"\u003e运算过程\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e15 + 25\u003c/code\u003e 的结果是 \u003ccode\u003e40\u003c/code\u003e，仍然是无类型整数常量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e40 + 5.2\u003c/code\u003e 的结果是 \u003ccode\u003e45.2\u003c/code\u003e，由于 \u003ccode\u003e5.2\u003c/code\u003e 是浮点数常量，整个表达式的结果被推断为 \u003ccode\u003efloat64\u003c/code\u003e 类型。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"赋值与输出\"\u003e赋值与输出\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e最终结果 \u003ccode\u003e45.2\u003c/code\u003e 被赋值给变量 \u003ccode\u003eans\u003c/code\u003e，其类型为 \u003ccode\u003efloat64\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efmt.Println(ans)\u003c/code\u003e 输出 \u003ccode\u003e45.2\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_171"},{"content":"A、B、C、D 哪些选项有语法错误？\ntype S struct { } func f(x interface{}) { } func g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A g(s) //B f(p) //C g(p) //D } 🔑 答案解析： BD 在线运行\n函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\n永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\n参数为 *interface{} 时，只能接受空接口的指针，而不是任何类型\nfunc g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A var r interface{} = p g(\u0026amp;r) //D } 例如这样 D就不会报错了，但是不建议这样使用\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_170/","summary":"\u003cp\u003eA、B、C、D 哪些选项有语法错误？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eBD \u003ca href=\"https://go.dev/play/p/sXFam1hdBhS\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e参数为 *interface{} 时，只能接受空接口的指针，而不是任何类型\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如这样 D就不会报错了，但是不建议这样使用\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_170"},{"content":"下面的两个切片声明中有什么区别？哪个更可取？\nA. var a []int B. a := []int{} 🔑 答案解析： A 声明的 []int 未初始化 指向的nil B 声明的 []int 是已经初始化的 指向的内容为空的数组。\nA 可以写到全局 B 只能写到函数内\nA 与 B 占用的内存空间理论上是相同的。 注意：空切片empty slice 指向了一个固定地址，所以实际上确实没有分配内存。\n但是B比A 多指向的内容为空的数组，这个操作也会消耗而外性能(🤏),在性能的角度上A具有优势\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_169/","summary":"\u003cp\u003e下面的两个切片声明中有什么区别？哪个更可取？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e. \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e. \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA 声明的 []int 未初始化 指向的nil\nB 声明的 []int 是已经初始化的 指向的内容为空的数组。\u003c/p\u003e\n\u003cp\u003eA 可以写到全局\nB 只能写到函数内\u003c/p\u003e\n\u003cp\u003eA 与 B 占用的内存空间理论上是相同的。\n注意：空切片empty slice 指向了一个固定地址，所以实际上确实没有分配内存。\u003c/p\u003e\n\u003cp\u003e但是B比A 多指向的内容为空的数组，这个操作也会消耗而外性能(🤏),在性能的角度上A具有优势\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_169"},{"content":"下面代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; type Person struct { age int } func main() { person := \u0026amp;Person{28} // 1. defer fmt.Println(person.age) // 2. defer func(p *Person) { fmt.Println(p.age) }(person) // 3. defer func() { fmt.Println(person.age) }() person = \u0026amp;Person{29} } 🔑 答案解析： 29\r28\r28 在线运行\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_168/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 3.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e29\r\n28\r\n28\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/9GBgmy_wQsn\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_168"},{"content":"下面这段代码正确的输出是什么？\npackage main import \u0026#34;fmt\u0026#34; func f() { defer fmt.Println(\u0026#34;D\u0026#34;) fmt.Println(\u0026#34;F\u0026#34;) } func main() { f() fmt.Println(\u0026#34;M\u0026#34;) } A. F M D B. D F M C. F D M 🔑 答案解析： C\n在线运行\ndefer 语句在返回之前就会被执行，所以输出顺序是 F D M。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_167/","summary":"\u003cp\u003e下面这段代码正确的输出是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;D\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;F\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. F M D\u003c/li\u003e\n\u003cli\u003eB. D F M\u003c/li\u003e\n\u003cli\u003eC. F D M\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/e6iBnPWk-UM\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003edefer 语句在返回之前就会被执行，所以输出顺序是 F D M。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_167"},{"content":"昨天只有3个G，如果把G的个数变为257个输出结果是怎么样\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;sync\u0026#34; ) func main() { runtime.GOMAXPROCS(1) var wg sync.WaitGroup wg.Add(257) for i := 1; i \u0026lt;= 257; i++ { go func(i int) { fmt.Println(i) wg.Done() }(i) } wg.Wait() } 🔑 答案解析： 在线运行\n257\r1\r2\r3\r...\r255\r256 结果和 3个G的一致，应为本地 runq 长度上线是256 ，257G 添到P的时候 会进入 runnext区（弹夹上限256但是可以上膛一颗。因此最多257）\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_166/","summary":"\u003cp\u003e昨天只有3个G，如果把G的个数变为257个输出结果是怎么样\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eruntime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGOMAXPROCS\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e257\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e257\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/pizDb_St91u\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e257\r\n1\r\n2\r\n3\r\n...\r\n255\r\n256\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结果和 3个G的一致，应为本地 runq 长度上线是256 ，257G 添到P的时候 会进入 runnext区（弹夹上限256但是可以上膛一颗。因此最多257）\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_166"},{"content":"下方代码输出什么并解释一下\npackage main import ( \u0026#34;runtime\u0026#34; \u0026#34;sync\u0026#34; ) func main() { runtime.GOMAXPROCS(1) var wg sync.WaitGroup wg.Add(3) go func(n int) { println(n) wg.Done() }(1) go func(n int) { println(n) wg.Done() }(2) go func(n int) { println(n) wg.Done() }(3) wg.Wait() } 🔑 答案解析： 在线运行\n3\r1\r2 浅谈： go函数会创建新的G，P里面有一个记录下一个运行的G 和一个本地队列（类似手枪上膛）。1G 2G 3G 依次进入P。最后就是下一个运行的G 是3G 队列里面是 1G、2G\n深谈： runtime.GOMAXPROCS(1)的作用是限制P的数量为1 go 函数本质会调用 newproc ，newproc会调用newproc1 newproc1 会初始化新的G，然后调用runqput将G添加到P。P中有一个本地runq 和 runnext 。先进入runnext，第二个G来了先把第一个G从runnetx中挤到了本地runq。注意这个本地runq的长度为256。因此会先运行runnetx中3G，然后依次运行1G、2G ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_165/","summary":"\u003cp\u003e下方代码输出什么并解释一下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eruntime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGOMAXPROCS\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              println(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              println(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              println(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/XqH_qtG5s5C\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e3\r\n1\r\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e浅谈：\ngo函数会创建新的G，P里面有一个记录下一个运行的G 和一个本地队列（类似手枪上膛）。1G 2G 3G 依次进入P。最后就是下一个运行的G 是3G 队列里面是 1G、2G\u003c/p\u003e\n\u003cp\u003e深谈：\nruntime.GOMAXPROCS(1)的作用是限制P的数量为1\ngo 函数本质会调用 newproc ，newproc会调用newproc1\nnewproc1 会初始化新的G，然后调用runqput将G添加到P。P中有一个本地runq 和 runnext 。先进入runnext，第二个G来了先把第一个G从runnetx中挤到了本地runq。注意这个本地runq的长度为256。因此会先运行runnetx中3G，然后依次运行1G、2G\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"image.png\"\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_165"},{"content":"下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\npackage main import \u0026#34;fmt\u0026#34; func main() { list := new([]int) list = append(list, 1) fmt.Println(list) } 🔑 答案解析： 在线运行\n不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_164/","summary":"\u003cp\u003e下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/QM6f730hoOc\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_164"},{"content":"下面代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; type A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { var a A = Work{3} s := a.(Work) fmt.Println(s.ShowA()) fmt.Println(s.ShowB()) } A. 13 23 B. compilation error 🔑 答案解析： A 在线运行\n代码分析 接口和结构体定义：\n定义了两个接口 A 和 B，分别包含方法 ShowA() 和 ShowB()。 定义了一个结构体 Work，并为其实现了 ShowA() 和 ShowB() 方法。 接口赋值：\n在 main 函数中，var a A = Work{3} 将 Work{3} 赋值给接口变量 a。此时 a 的动态类型是 Work，动态值是 Work{3}。 类型断言：\ns := a.(Work) 通过类型断言将接口变量 a 转换为其具体类型 Work。由于 a 的动态类型确实是 Work，类型断言成功，s 是 Work{3}。 方法调用：\ns.ShowA() 调用 ShowA() 方法，返回 w.i + 10，即 3 + 10 = 13。 s.ShowB() 调用 ShowB() 方法，返回 w.i + 20，即 3 + 20 = 23。 输出结果：\nfmt.Println(s.ShowA()) 输出 13。 fmt.Println(s.ShowB()) 输出 23。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_163/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 13 23\u003c/li\u003e\n\u003cli\u003eB. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA\n\u003ca href=\"https://go.dev/play/p/dy8gUTSGZz8\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"代码分析\"\u003e\u003cstrong\u003e代码分析\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e接口和结构体定义\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定义了两个接口 \u003ccode\u003eA\u003c/code\u003e 和 \u003ccode\u003eB\u003c/code\u003e，分别包含方法 \u003ccode\u003eShowA()\u003c/code\u003e 和 \u003ccode\u003eShowB()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e定义了一个结构体 \u003ccode\u003eWork\u003c/code\u003e，并为其实现了 \u003ccode\u003eShowA()\u003c/code\u003e 和 \u003ccode\u003eShowB()\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e接口赋值\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 \u003ccode\u003emain\u003c/code\u003e 函数中，\u003ccode\u003evar a A = Work{3}\u003c/code\u003e 将 \u003ccode\u003eWork{3}\u003c/code\u003e 赋值给接口变量 \u003ccode\u003ea\u003c/code\u003e。此时 \u003ccode\u003ea\u003c/code\u003e 的动态类型是 \u003ccode\u003eWork\u003c/code\u003e，动态值是 \u003ccode\u003eWork{3}\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e类型断言\u003c/strong\u003e：\u003c/p\u003e","title":"Go每日一题_163"},{"content":"下面代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func increaseA() int { var i int defer func() { i++ }() return i } func increaseB() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(increaseA()) fmt.Println(increaseB()) } A. 1 1 B. 0 1 C. 1 0 D. 0 0 🔑 答案解析： B 在线运行\n解析 increaseA() 的返回参数是匿名 increaseB() 是具名\n在 Go 语言中，函数返回值的内存空间会分配到调用者的栈上。先运行return赋值后运行defer。\n1. increaseA 的行为分析 func increaseA() int { var i int defer func() { i++ }() return i } 在 increaseA 的函数栈中，声明了一个局部变量 i，初始值为 0。 执行 return i 时，会将 i 的值（0）复制到调用者（main 函数）的栈上，作为返回值。 然后，defer 语句执行，将局部变量 i 的值从 0 增加到 1。 由于 defer 修改的是局部变量 i，而不是调用者栈上的返回值，因此返回值仍然是 0。 2. increaseB 的行为分析 func increaseB() (r int) { defer func() { r++ }() return r } 在 increaseB 的函数栈中，r 是一个命名返回值，其内存空间直接分配在调用者（main 函数）的栈上。 执行 return r 时，会将 r 的值（0）写入调用者栈上的返回值空间。 然后，defer 语句执行，直接修改调用者栈上的 r，将其值从 0 增加到 1。 由于 r 是命名返回值，defer 的修改会直接影响调用者栈上的值。 因此 正确答案是 B. 0 1。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_162/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 1 1\u003c/li\u003e\n\u003cli\u003eB. 0 1\u003c/li\u003e\n\u003cli\u003eC. 1 0\u003c/li\u003e\n\u003cli\u003eD. 0 0\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\n\u003ca href=\"https://go.dev/play/p/t2LDxNGFGQs\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"解析\"\u003e解析\u003c/h3\u003e\n\u003cp\u003eincreaseA() 的返回参数是匿名\nincreaseB() 是具名\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003e在 Go 语言中，函数返回值的内存空间会分配到调用者的栈上。先运行return赋值后运行defer。\u003c/p\u003e\n\u003ch5 id=\"1-increasea-的行为分析\"\u003e1. increaseA 的行为分析\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e在 increaseA 的函数栈中，声明了一个局部变量 i，初始值为 0。\u003c/li\u003e\n\u003cli\u003e执行 return i 时，会将 i 的值（0）复制到调用者（main 函数）的栈上，作为返回值。\u003c/li\u003e\n\u003cli\u003e然后，defer 语句执行，将局部变量 i 的值从 0 增加到 1。\u003c/li\u003e\n\u003cli\u003e由于 defer 修改的是局部变量 i，而不是调用者栈上的返回值，因此返回值仍然是 0。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"2-increaseb-的行为分析\"\u003e2. increaseB 的行为分析\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e在 increaseB 的函数栈中，r 是一个命名返回值，其内存空间直接分配在调用者（main 函数）的栈上。\u003c/li\u003e\n\u003cli\u003e执行 return r 时，会将 r 的值（0）写入调用者栈上的返回值空间。\u003c/li\u003e\n\u003cli\u003e然后，defer 语句执行，直接修改调用者栈上的 r，将其值从 0 增加到 1。\u003c/li\u003e\n\u003cli\u003e由于 r 是命名返回值，defer 的修改会直接影响调用者栈上的值。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e因此 正确答案是 B. 0 1。\u003c/p\u003e","title":"Go每日一题_162"},{"content":"下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\n1）x, _ := f() 2）x, _ = f() 3）x, y := f() 4）x, y = f() 🔑 答案解析： 1）错 2）对 3）对 4）错\n1. x, _ := f() 错误。\n原因：:= 是短变量声明操作符，要求左侧的所有变量都必须是未声明的。由于 x 已经声明，因此不能使用 :=。\n修正：如果 x 已经声明，应该使用 = 赋值操作符：\nx, _ = f() 2. x, _ = f() 正确。 原因：= 是赋值操作符，可以用于已声明的变量。x 已经声明，_ 是空白标识符，用于忽略返回值，因此这条语句是合法的。 3. x, y := f() 正确。 原因：:= 是短变量声明操作符，要求左侧至少有一个变量是未声明的。虽然 x 已经声明，但 y 是未声明的，因此这条语句是合法的。此时，x 会被重新赋值，y 会被声明并赋值。 4. x, y = f() 错误。\n原因：= 是赋值操作符，要求左侧的所有变量都必须是已声明的。由于 y 未声明，因此这条语句会编译失败。\n修正：如果 y 未声明，应该使用 :=：\nx, y := f() ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_161/","summary":"\u003cp\u003e下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e1）错\n2）对\n3）对\n4）错\u003c/p\u003e\n\u003ch3 id=\"1-x-_--f\"\u003e1. \u003ccode\u003ex, _ := f()\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e错误\u003c/strong\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e原因\u003c/strong\u003e：\u003ccode\u003e:=\u003c/code\u003e 是短变量声明操作符，要求左侧的所有变量都必须是未声明的。由于 \u003ccode\u003ex\u003c/code\u003e 已经声明，因此不能使用 \u003ccode\u003e:=\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e修正\u003c/strong\u003e：如果 \u003ccode\u003ex\u003c/code\u003e 已经声明，应该使用 \u003ccode\u003e=\u003c/code\u003e 赋值操作符：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-x-_--f\"\u003e2. \u003ccode\u003ex, _ = f()\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e正确\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e原因\u003c/strong\u003e：\u003ccode\u003e=\u003c/code\u003e 是赋值操作符，可以用于已声明的变量。\u003ccode\u003ex\u003c/code\u003e 已经声明，\u003ccode\u003e_\u003c/code\u003e 是空白标识符，用于忽略返回值，因此这条语句是合法的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-x-y--f\"\u003e3. \u003ccode\u003ex, y := f()\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e正确\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e原因\u003c/strong\u003e：\u003ccode\u003e:=\u003c/code\u003e 是短变量声明操作符，要求左侧至少有一个变量是未声明的。虽然 \u003ccode\u003ex\u003c/code\u003e 已经声明，但 \u003ccode\u003ey\u003c/code\u003e 是未声明的，因此这条语句是合法的。此时，\u003ccode\u003ex\u003c/code\u003e 会被重新赋值，\u003ccode\u003ey\u003c/code\u003e 会被声明并赋值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-x-y--f\"\u003e4. \u003ccode\u003ex, y = f()\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e错误\u003c/strong\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e原因\u003c/strong\u003e：\u003ccode\u003e=\u003c/code\u003e 是赋值操作符，要求左侧的所有变量都必须是已声明的。由于 \u003ccode\u003ey\u003c/code\u003e 未声明，因此这条语句会编译失败。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e修正\u003c/strong\u003e：如果 \u003ccode\u003ey\u003c/code\u003e 未声明，应该使用 \u003ccode\u003e:=\u003c/code\u003e：\u003c/p\u003e","title":"Go每日一题_161"},{"content":"它们是否能编译通过？为什么？\n// 32 位机器 1）var x int32 = 32. 2）var y int = x 3）var z rune = x 🔑 答案解析： 1 可以 2 不可以 3 可以\n解析 Go 语言类型系统与代码解析 1. 无类型字面量 在 Go 语言中，字面量（如 32.0）是无类型的（untyped）。无类型字面量可以根据上下文自动推断为目标类型。\n示例 var a int64 = 32.0 // 32.0 是无类型浮点数字面量，赋值给 int64 类型 var b int = 32.0 // 32.0 是无类型浮点数字面量，赋值给 int 类型 var c float32 = 32.0 // 32.0 是无类型浮点数字面量，赋值给 float32 类型 var d complex64 = 32.0 // 32.0 是无类型浮点数字面量，赋值给 complex64 类型 var e byte = 32.0 // 32.0 是无类型浮点数字面量，赋值给 byte 类型 var f rune = 32.0 // 32.0 是无类型浮点数字面量，赋值给 rune 类型 2. Go 语言的类型系统 Go 语言的类型系统非常严格，没有隐式类型转换。即使两种类型的底层表示相同，它们仍然是不同的类型，不能直接赋值\nvar x int32 = 32 var y int = x // 编译错误：cannot use x (type int32) as type int in assignment 修正方法 必须显式进行类型转换：\nvar y int = int(x) // 显式类型转换 3. 类型别名 Go 1.9 引入了类型别名的概念。类型别名和原类型是完全相同的类型。\ntype intalias = int // intalias 是 int 的别名 Go 语言中的 rune 和 byte 是内置的类型别名：\ntype rune = int32 type byte = uint8 本题中\nvar x int32 = 32 var z rune = x // 正确，rune 是 int32 的别名 4. 题目代码解析 1) var x int32 = 32.0 // 可以编译通过，因为无类型字面量 32.0 可以赋值给 int32 类型。 2) var y int = x // 编译失败，因为 int 和 int32 是不同的类型，Go 不会隐式转换。 3) var z rune = x // 可以编译通过，因为 rune 是 int32 的类型别名，x 的类型是 int32，可以直接赋值给 z。 5.修正后的代码 var x int32 = 32.0 // 正确，无类型字面量赋值给 int32 var y int = int(x) // 正确，显式类型转换 var z rune = x // 正确，rune 是 int32 的别名 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_160/","summary":"\u003cp\u003e它们是否能编译通过？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 32 位机器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e1 \u003ca href=\"https://go.dev/play/p/9eGpGYkcqqp\"\u003e可以\u003c/a\u003e\n2 \u003ca href=\"https://go.dev/play/p/L5LsYs4NvDO\"\u003e不可以\u003c/a\u003e\n3 \u003ca href=\"https://go.dev/play/p/xgIjiu6PQ1l\"\u003e可以\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"解析\"\u003e解析\u003c/h2\u003e\n\u003ch1 id=\"go-语言类型系统与代码解析\"\u003eGo 语言类型系统与代码解析\u003c/h1\u003e\n\u003ch2 id=\"1-无类型字面量\"\u003e1. 无类型字面量\u003c/h2\u003e\n\u003cp\u003e在 Go 语言中，字面量（如 \u003ccode\u003e32.0\u003c/code\u003e）是无类型的（untyped）。无类型字面量可以根据上下文自动推断为目标类型。\u003c/p\u003e\n\u003ch3 id=\"示例\"\u003e示例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e// 32.0 是无类型浮点数字面量，赋值给 int64 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e      \u003cspan style=\"color:#75715e\"\u003e// 32.0 是无类型浮点数字面量，赋值给 int 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// 32.0 是无类型浮点数字面量，赋值给 float32 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ecomplex64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 32.0 是无类型浮点数字面量，赋值给 complex64 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// 32.0 是无类型浮点数字面量，赋值给 byte 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// 32.0 是无类型浮点数字面量，赋值给 rune 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-go-语言的类型系统\"\u003e2. Go 语言的类型系统\u003c/h2\u003e\n\u003cp\u003eGo 语言的类型系统非常严格，没有隐式类型转换。即使两种类型的底层表示相同，它们仍然是不同的类型，不能直接赋值\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 编译错误：cannot use x (type int32) as type int in assignment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e修正方法\n必须显式进行类型转换：\u003c/p\u003e","title":"Go每日一题_160"},{"content":"以下代码是否能正常运行，结果是？\npackage main func main() { v := new(int) *v = 2 println(5/+-*v) } 🔑 答案解析： 可以正常运行 运行结果为 -2\n在线运行\n表达式解析 5/+-*v Go 语言的运算符优先级规则\nunary_op = \u0026ldquo;+\u0026rdquo; | \u0026ldquo;-\u0026rdquo; | \u0026ldquo;!\u0026rdquo; | \u0026ldquo;^\u0026rdquo; | \u0026ldquo;*\u0026rdquo; | \u0026ldquo;\u0026amp;\u0026rdquo; | \u0026ldquo;\u0026lt;-\u0026rdquo; .\n题中一元运算符(+、-、* )\n+、- 和 * 同时也是算术运算符中的加、减和乘。\n表达式: 5/+-v。5 后面 /，很显然，这是除法。 而 + 前面没有操作数，因此是一个一元运算符；同理 - 和 也是一元运算符。而一元运算符有最高的优先级，因此这个表达式优先计算 +-*v 的值。\n在规范中有这么一句话：\n对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释） +x 是 0 + x -x 取其负值 是 0 - x\n因此+-*v可以转化为 0+(0-(*v))\n带入*v = 2 得 0+(0-(2))\n因此结果变成了求 5/-2 的值\n答案为 -2\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_159/","summary":"\u003cp\u003e以下代码是否能正常运行，结果是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/+-*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e可以正常运行 运行结果为 -2\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/5A8BdXFzaOf\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"表达式解析\"\u003e表达式解析\u003c/h2\u003e\n\u003cp\u003e5/+-*v\nGo 语言的\u003ca href=\"https://golang.google.cn/ref/spec#Operators\"\u003e运算符\u003c/a\u003e优先级规则\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eunary_op   = \u0026ldquo;+\u0026rdquo; | \u0026ldquo;-\u0026rdquo; | \u0026ldquo;!\u0026rdquo; | \u0026ldquo;^\u0026rdquo; | \u0026ldquo;*\u0026rdquo; | \u0026ldquo;\u0026amp;\u0026rdquo; | \u0026ldquo;\u0026lt;-\u0026rdquo; .\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题中一元运算符(+、-、* )\u003c/p\u003e\n\u003cp\u003e+、- 和 * 同时也是算术运算符中的加、减和乘。\u003c/p\u003e\n\u003cp\u003e表达式: 5/+-\u003cem\u003ev。5 后面 /，很显然，这是除法。\n而 + 前面没有操作数，因此是一个一元运算符；同理 - 和\u003c/em\u003e 也是一元运算符。而一元运算符有最高的优先级，因此这个表达式优先计算 +-*v 的值。\u003c/p\u003e\n\u003cp\u003e在规范中有这么一句话：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释）\n+x         是 0 + x\n-x 取其负值 是 0 - x\u003c/p\u003e","title":"Go每日一题_159"},{"content":"下面代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; type A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowB()) fmt.Println(b.ShowA()) } A. 23 13 B. compilation error 🔑 答案解析： B 在线运行\nA接口没有ShowB方法 B接口没有ShowA方法\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_158/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 23 13\u003c/li\u003e\n\u003cli\u003eB. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB \u003ca href=\"https://go.dev/play/p/yz3LsE6kw-U\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA接口没有ShowB方法\nB接口没有ShowA方法\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_158"},{"content":"下面代码中 A B 两处应该怎么修改才能顺利编译？\nfunc main() { var m map[string]int //A m[\u0026#34;a\u0026#34;] = 1 if v := m[\u0026#34;b\u0026#34;]; v != nil { //B fmt.Println(v) } } 🔑 答案解析： // A\nA 处只声明了map m ,并没有分配内存空间未初始化的map，写入会panic，\n因此需要将 var m map[string]int 改为 m := make(map[string]int)\n// B\nkey 为 b 的元素不存在的时候，v 会返回值类型对应的零值，类型为int因此v为0。类型int != nil 是不能通过编译的类型不匹配\n因此需要v != nil 改为 v != 0\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { m := make(map[string]int) //A m[\u0026#34;a\u0026#34;] = 1 if v := m[\u0026#34;b\u0026#34;]; v != 0 { //B fmt.Println(v) } } 在线编译\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_157/","summary":"\u003cp\u003e下面代码中 A B 两处应该怎么修改才能顺利编译？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e]; \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {  \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e// A\u003cbr\u003e\nA 处只声明了map m ,并没有分配内存空间未初始化的map，写入会panic，\u003c/p\u003e\n\u003cp\u003e因此需要将 var m map[string]int 改为 m := make(map[string]int)\u003c/p\u003e\n\u003cp\u003e// B\u003cbr\u003e\nkey 为 b 的元素不存在的时候，v 会返回值类型对应的零值，类型为int因此v为0。类型int != nil 是不能通过编译的类型不匹配\u003c/p\u003e\n\u003cp\u003e因此需要v != nil 改为 v != 0\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e]; \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/SqJ3yFfgw4I\"\u003e在线编译\u003c/a\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_157"},{"content":"切片 a、b、c 的长度和容量分别是多少？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { s := [3]int{1, 2, 3} a := s[:0] b := s[:2] c := s[1:2:cap(s)] fmt.Println(len(a), cap(a)) fmt.Println(len(b), cap(b)) fmt.Println(len(c), cap(c)) } 🔑 答案解析： a 长度和容量 0 3 b 长度和容量 2 3 c 长度和容量 1 2\n在线运行\n知识点：数组或切片的截取操作 截取操作有带 2 个或者 3 个参数，形如：[i:j] 和 [i:j:k]，\n1. [i:j] 形式 [i:j] 是最常见的切片截取形式，表示从底层数组的第 i 个元素开始，到第 j 个元素（不包括第 j 个元素）结束。\n语法：s[i:j] 含义： i：切片的起始索引（包含）。 j：切片的结束索引（不包含）。 长度：j - i 容量：从索引 i 开始，到底层数组的末尾。 如果底层数组的长度为 n，则容量为 n - i。 示例 s := [3]int{1, 2, 3} b := s[:2] // 从索引 0 开始，到索引 3（不包含）左闭右开 fmt.Println(a) // 输出: [1 2] fmt.Println(len(a)) // 输出: 2 (长度) 2-0 fmt.Println(cap(a)) // 输出: 3 (容量，因为底层数组长度为 3，从索引 0 开始) 3-0 2. [i:j:k] 形式 [i:j:k] 是更灵活的切片截取形式，除了指定切片的起始和结束索引外，还可以显式指定切片的容量。\n语法：s[i:j:k] 含义： i：切片的起始索引（包含）。 j：切片的结束索引（不包含）。 k：切片的容量截止索引（不包含）。 长度：j - i 容量：k - i 容量不能超过底层数组的长度，否则会引发运行时错误。 示例 s := [3]int{1, 2, 3} c := s[1:2:cap(s)] // 从索引 1 开始，到索引 2（不包含），容量截止到索引 3 fmt.Println(c) // 输出: [2] fmt.Println(len(c)) // 输出: 1 (长度，2 - 1 = 1) fmt.Println(cap(c)) // 输出: 2 (容量，3 - 1 = 2) ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_156/","summary":"\u003cp\u003e切片 a、b、c 的长度和容量分别是多少？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:cap(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(len(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e), cap(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(len(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e), cap(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(len(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e), cap(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003ea 长度和容量 0 3\nb 长度和容量 2 3\nc 长度和容量 1 2\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://go.dev/play/p/QHiuY9qh4pw\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"知识点数组或切片的截取操作\"\u003e知识点：数组或切片的截取操作\u003c/h3\u003e\n\u003cp\u003e截取操作有带 2 个或者 3 个参数，形如：\u003ccode\u003e[i:j]\u003c/code\u003e 和 \u003ccode\u003e[i:j:k]\u003c/code\u003e，\u003c/p\u003e\n\u003ch2 id=\"1-ij-形式\"\u003e1. \u003ccode\u003e[i:j]\u003c/code\u003e 形式\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e[i:j]\u003c/code\u003e 是最常见的切片截取形式，表示从底层数组的第 \u003ccode\u003ei\u003c/code\u003e 个元素开始，到第 \u003ccode\u003ej\u003c/code\u003e 个元素（不包括第 \u003ccode\u003ej\u003c/code\u003e 个元素）结束。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e语法\u003c/strong\u003e：\u003ccode\u003es[i:j]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e含义\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ei\u003c/code\u003e：切片的起始索引（包含）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ej\u003c/code\u003e：切片的结束索引（不包含）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e长度\u003c/strong\u003e：\u003ccode\u003ej - i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e容量\u003c/strong\u003e：从索引 \u003ccode\u003ei\u003c/code\u003e 开始，到底层数组的末尾。\n\u003cul\u003e\n\u003cli\u003e如果底层数组的长度为 \u003ccode\u003en\u003c/code\u003e，则容量为 \u003ccode\u003en - i\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例\"\u003e示例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u003cspan style=\"color:#75715e\"\u003e// 从索引 0 开始，到索引 3（不包含）左闭右开\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)       \u003cspan style=\"color:#75715e\"\u003e// 输出: [1 2]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(len(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e))  \u003cspan style=\"color:#75715e\"\u003e// 输出: 2 (长度) 2-0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(cap(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e))  \u003cspan style=\"color:#75715e\"\u003e// 输出: 3 (容量，因为底层数组长度为 3，从索引 0 开始) 3-0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-ijk-形式\"\u003e2. \u003ccode\u003e[i:j:k]\u003c/code\u003e 形式\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e[i:j:k]\u003c/code\u003e 是更灵活的切片截取形式，除了指定切片的起始和结束索引外，还可以显式指定切片的容量。\u003c/p\u003e","title":"Go每日一题_156"},{"content":"力扣链接:2264. 字符串中最大的 3 位相同数字\n力扣难度 简单\n算法评级: 2\n难度分 1309\n题目：\n给你一个字符串 num ，表示一个大整数。如果一个整数满足下述所有条件，则认为该整数是一个 优质整数 ：\n该整数是 num 的一个长度为 3 的 子字符串 。 该整数由唯一一个数字重复 3 次组成。 以字符串形式返回 最大的优质整数 。如果不存在满足要求的整数，则返回一个空字符串 \u0026quot;\u0026quot; 。\n注意：\n子字符串 是字符串中的一个连续字符序列。 num 或优质整数中可能存在 前导零 。 示例 1：\n输入：num = \u0026ldquo;6777133339\u0026rdquo;\n输出：\u0026ldquo;777\u0026rdquo;\n解释：num 中存在两个优质整数：\u0026ldquo;777\u0026rdquo; 和 \u0026ldquo;333\u0026rdquo; 。\n\u0026ldquo;777\u0026rdquo; 是最大的那个，所以返回 \u0026ldquo;777\u0026rdquo; 。\n示例 2：\n输入：num = \u0026ldquo;2300019\u0026rdquo;\n输出：\u0026ldquo;000\u0026rdquo;\n解释：\u0026ldquo;000\u0026rdquo; 是唯一一个优质整数。\n示例 3：\n输入：num = \u0026ldquo;42352338\u0026rdquo;\n输出：\u0026quot;\u0026quot;\n解释：不存在长度为 3 且仅由一个唯一数字组成的整数。因此，不存在优质整数。\nfunc largestGoodInteger(num string) (ans string) { } 🔑 答案解析： 👈点击 func largestGoodInteger(num string) (ans string) { n := len(num) sig := struct { n int // 数字 i int // 重复次数 }{ n: -1, } maxn := -1 // for i := 0; i \u0026lt; n; i++ { if sig.n == int(num[i]-\u0026#39;0\u0026#39;) { // 重复的 sig.i += 1 //重复次数+1 } else { sig.n = int(num[i] - \u0026#39;0\u0026#39;) sig.i = 1 } if sig.i \u0026gt;= 3 { // 重复次数 大于等于3了 maxn = max(sig.n, maxn) } } if maxn == -1 { return \u0026#34;\u0026#34; } ans = strings.Repeat(string(maxn+\u0026#39;0\u0026#39;), 3) return } ","permalink":"https://loommii.github.io/posts/leetcode/data/2264_%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%843%E4%BD%8D%E7%9B%B8%E5%90%8C%E6%95%B0%E5%AD%97/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/largest-3-same-digit-number-in-string/description/\"\u003e2264. 字符串中最大的 3 位相同数字\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003cbr\u003e\n算法评级: 2\u003cbr\u003e\n难度分 1309\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\u003c/p\u003e\n\u003cp\u003e给你一个字符串 num ，表示一个大整数。如果一个整数满足下述所有条件，则认为该整数是一个 优质整数 ：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e该整数是 num 的一个长度为 3 的 子字符串 。\u003c/li\u003e\n\u003cli\u003e该整数由唯一一个数字重复 3 次组成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以字符串形式返回 最大的优质整数 。如果不存在满足要求的整数，则返回一个空字符串 \u0026quot;\u0026quot; 。\u003c/p\u003e\n\u003cp\u003e注意：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e子字符串 是字符串中的一个连续字符序列。\u003c/li\u003e\n\u003cli\u003enum 或优质整数中可能存在 前导零 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：num = \u0026ldquo;6777133339\u0026rdquo;\u003cbr\u003e\n输出：\u0026ldquo;777\u0026rdquo;\u003cbr\u003e\n解释：num 中存在两个优质整数：\u0026ldquo;777\u0026rdquo; 和 \u0026ldquo;333\u0026rdquo; 。\u003cbr\u003e\n\u0026ldquo;777\u0026rdquo; 是最大的那个，所以返回 \u0026ldquo;777\u0026rdquo; 。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：num = \u0026ldquo;2300019\u0026rdquo;\u003cbr\u003e\n输出：\u0026ldquo;000\u0026rdquo;\u003cbr\u003e\n解释：\u0026ldquo;000\u0026rdquo; 是唯一一个优质整数。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 3：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：num = \u0026ldquo;42352338\u0026rdquo;\u003cbr\u003e\n输出：\u0026quot;\u0026quot;\u003cbr\u003e\n解释：不存在长度为 3 且仅由一个唯一数字组成的整数。因此，不存在优质整数。\u003c/p\u003e","title":"2264_字符串中最大的3位相同数字"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) type A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowA()) fmt.Println(b.ShowB()) } 🔑 答案解析： 13\r23 在线运行\n知识点：接口。\nGo官方文档-Interface_types\n本题代码解析过程 结构体和接口实现：\nWork 结构体实现了接口 A 的 ShowA() 方法，返回 w.i + 10。 Work 结构体也实现了接口 B 的 ShowB() 方法，返回 w.i + 20。 变量赋值：\nc := Work{3}：创建了一个 Work 类型的实例 c，其字段 i 的值为 3。 var a A = c：将 c 赋值给接口类型 A 的变量 a。此时，a 可以调用 ShowA() 方法。 var b B = c：将 c 赋值给接口类型 B 的变量 b。此时，b 可以调用 ShowB() 方法。 方法调用：\na.ShowA()：调用 Work 的 ShowA() 方法，返回 3 + 10 = 13。 b.ShowB()：调用 Work 的 ShowB() 方法，返回 3 + 20 = 23。 输出结果：\nfmt.Println(a.ShowA()) 输出 13。 fmt.Println(b.ShowB()) 输出 23。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_155/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e13\r\n23\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/tzzCLmrk2Ns\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e知识点：接口。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://golang.google.cn/ref/spec#Interface_types\"\u003eGo官方文档-Interface_types\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"本题代码解析过程\"\u003e本题代码解析过程\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e结构体和接口实现\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eWork\u003c/code\u003e 结构体实现了接口 \u003ccode\u003eA\u003c/code\u003e 的 \u003ccode\u003eShowA()\u003c/code\u003e 方法，返回 \u003ccode\u003ew.i + 10\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWork\u003c/code\u003e 结构体也实现了接口 \u003ccode\u003eB\u003c/code\u003e 的 \u003ccode\u003eShowB()\u003c/code\u003e 方法，返回 \u003ccode\u003ew.i + 20\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e变量赋值\u003c/strong\u003e：\u003c/p\u003e","title":"Go每日一题_155"},{"content":"力扣链接:3019. 按键变更的次数\n力扣难度 简单 算法评级: 2 知道常用数据结构和算法并简单使用 难度分 1176\n题目:\n给你一个下标从 0 开始的字符串 s ，该字符串由用户输入。按键变更的定义是：使用与上次使用的按键不同的键。例如 s = \u0026ldquo;ab\u0026rdquo; 表示按键变更一次，而 s = \u0026ldquo;bBBb\u0026rdquo; 不存在按键变更。\n返回用户输入过程中按键变更的次数。\n注意：shift 或 caps lock 等修饰键不计入按键变更，也就是说，如果用户先输入字母 \u0026lsquo;a\u0026rsquo; 然后输入字母 \u0026lsquo;A\u0026rsquo; ，不算作按键变更。\n示例 1：\n输入：s = \u0026ldquo;aAbBcC\u0026rdquo;\n输出：2\n解释： 从 s[0] = \u0026lsquo;a\u0026rsquo; 到 s[1] = \u0026lsquo;A\u0026rsquo;，不存在按键变更，因为不计入 caps lock 或 shift 。\n从 s[1] = \u0026lsquo;A\u0026rsquo; 到 s[2] = \u0026lsquo;b\u0026rsquo;，按键变更。\n从 s[2] = \u0026lsquo;b\u0026rsquo; 到 s[3] = \u0026lsquo;B\u0026rsquo;，不存在按键变更，因为不计入 caps lock 或 shift 。\n从 s[3] = \u0026lsquo;B\u0026rsquo; 到 s[4] = \u0026lsquo;c\u0026rsquo;，按键变更。\n从 s[4] = \u0026lsquo;c\u0026rsquo; 到 s[5] = \u0026lsquo;C\u0026rsquo;，不存在按键变更，因为不计入 caps lock 或 shift 。\n示例 2：\n输入：s = \u0026ldquo;AaAaAaaA\u0026rdquo;\n输出：0\n解释： 不存在按键变更，因为这个过程中只按下字母 \u0026lsquo;a\u0026rsquo; 和 \u0026lsquo;A\u0026rsquo; ，不需要进行按键变更。\nfunc countKeyChanges(s string) (ans int) { } 🔑 答案解析： 👈点击 func countKeyChanges(s string) (ans int) { n := len(s) for i := 1; i \u0026lt; n; i++ { if s[i-1]\u0026amp;31 != s[i]\u0026amp;31 { ans++ } } return } ","permalink":"https://loommii.github.io/posts/leetcode/data/3019_%E6%8C%89%E9%94%AE%E5%8F%98%E6%9B%B4%E7%9A%84%E6%AC%A1%E6%95%B0/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/number-of-changing-keys/description/\"\u003e3019. 按键变更的次数\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\n算法评级: 2      知道常用数据结构和算法并简单使用\n难度分 1176\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\u003c/p\u003e\n\u003cp\u003e给你一个下标从 0 开始的字符串 s ，该字符串由用户输入。按键变更的定义是：使用与上次使用的按键不同的键。例如 s = \u0026ldquo;ab\u0026rdquo; 表示按键变更一次，而 s = \u0026ldquo;bBBb\u0026rdquo; 不存在按键变更。\u003c/p\u003e\n\u003cp\u003e返回用户输入过程中按键变更的次数。\u003c/p\u003e\n\u003cp\u003e注意：shift 或 caps lock 等修饰键不计入按键变更，也就是说，如果用户先输入字母 \u0026lsquo;a\u0026rsquo; 然后输入字母 \u0026lsquo;A\u0026rsquo; ，不算作按键变更。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：s = \u0026ldquo;aAbBcC\u0026rdquo;\u003cbr\u003e\n输出：2\u003cbr\u003e\n解释：\n从 s[0] = \u0026lsquo;a\u0026rsquo; 到 s[1] = \u0026lsquo;A\u0026rsquo;，不存在按键变更，因为不计入 caps lock 或 shift 。\u003cbr\u003e\n从 s[1] = \u0026lsquo;A\u0026rsquo; 到 s[2] = \u0026lsquo;b\u0026rsquo;，按键变更。\u003cbr\u003e\n从 s[2] = \u0026lsquo;b\u0026rsquo; 到 s[3] = \u0026lsquo;B\u0026rsquo;，不存在按键变更，因为不计入 caps lock 或 shift 。\u003cbr\u003e\n从 s[3] = \u0026lsquo;B\u0026rsquo; 到 s[4] = \u0026lsquo;c\u0026rsquo;，按键变更。\u003cbr\u003e\n从 s[4] = \u0026lsquo;c\u0026rsquo; 到 s[5] = \u0026lsquo;C\u0026rsquo;，不存在按键变更，因为不计入 caps lock 或 shift 。\u003c/p\u003e","title":"3019_按键变更的次数"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { i := 65 fmt.Println(string(i)) } A. A B. 65 C. compilation error 🔑 答案解析： A 在线运行\nstring(i),在 Go 语言中，string(int) 会将整数解释为 Unicode 码点，并返回对应的字符。\n65 是字符 \u0026lsquo;A\u0026rsquo; 的 ASCII 码（也是 Unicode 码点），因此 string(65) 的结果是字符串 \u0026ldquo;A\u0026rdquo;。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_154/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(string(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. A\u003c/li\u003e\n\u003cli\u003eB. 65\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA \u003ca href=\"https://go.dev/play/p/lYfJ6qOVMJV\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003estring(i),在 Go 语言中，string(int) 会将整数解释为 Unicode 码点，并返回对应的字符。\u003cbr\u003e\n65 是字符 \u0026lsquo;A\u0026rsquo; 的 ASCII 码（也是 Unicode 码点），因此 string(65) 的结果是字符串 \u0026ldquo;A\u0026rdquo;。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_154"},{"content":"下面代码填空cc处可以填入哪个选项？ 且描述一下填入后运行的结果\npackage main import \u0026#34;fmt\u0026#34; func main() { var s1 []int var s2 = []int{} _, _ = s1, s2 if 填空 == nil { fmt.Println(\u0026#34;yes nil\u0026#34;) } else { fmt.Println(\u0026#34;no nil\u0026#34;) } } A. s1 B. s2 C. s1、s2 都可以 D. 以上都不可以 🔑 答案解析： C 在线运行\npackage main import \u0026#34;fmt\u0026#34; func main() { var s1 []int var s2 = []int{} _, _ = s1, s2 if s1 == nil { fmt.Println(\u0026#34;yes nil\u0026#34;) } else { fmt.Println(\u0026#34;no nil\u0026#34;) } if s2 == nil { fmt.Println(\u0026#34;yes nil\u0026#34;) } else { fmt.Println(\u0026#34;no nil\u0026#34;) } } //yes nil //no nil 切片（Slice） nil 与空切片 在 Go 文档 - Slice types 中有这样一段描述：\nThe value of an uninitialized slice is nil.\n如果一个切片没有被初始化，它的值就是 nil。\n根据这段描述，我们可以得出以下结论：\n1. 填入 s1 的情况 s1 是通过 var s1 []int 声明的，这是一个未初始化的切片，其值为 nil。 因此，程序会进入 \u0026quot;yes nil\u0026quot; 分支。 2. 填入 s2 的情况 s2 是通过 var s2 = []int{} 声明的，这是一个已初始化的空切片。 虽然它的长度为 0，但它并不是 nil，而是指向了一个底层数组（即使该数组的空间为 0）。 因此，程序会进入 \u0026quot;no nil\u0026quot; 分支。 代码验证 以下代码验证了 s1 和 s2 的底层数据指针：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) func main() { var s1 []int var s2 = []int{} fmt.Println(\u0026#34;s1 底层 Data 值为\u0026#34;, unsafe.SliceData(s1)) // \u0026lt;nil\u0026gt; fmt.Println(\u0026#34;s2 底层 Data 值为\u0026#34;, unsafe.SliceData(s2)) // 0x572380（具体地址可能不同） } 补充 切片之间不能直接使用 == 或 != 进行比较\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_153/","summary":"\u003cp\u003e下面代码填空cc处可以填入哪个选项？ 且描述一下填入后运行的结果\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e填空\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yes nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. s1\u003c/li\u003e\n\u003cli\u003eB. s2\u003c/li\u003e\n\u003cli\u003eC. s1、s2 都可以\u003c/li\u003e\n\u003cli\u003eD. 以上都不可以\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC \u003ca href=\"https://go.dev/play/p/9yTgpE0eMFE\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yes nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yes nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//yes nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//no nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"切片slice--nil-与空切片\"\u003e切片（Slice）  \u003ccode\u003enil\u003c/code\u003e 与空切片\u003c/h2\u003e\n\u003cp\u003e在 \u003ca href=\"https://golang.google.cn/ref/spec#Slice_types\"\u003eGo 文档 - Slice types\u003c/a\u003e 中有这样一段描述：\u003c/p\u003e","title":"Go每日一题_153"},{"content":"以下代码输出什么？\npackage main func main() { var x = []int{4: 44, 55, 66, 1: 77, 88} println(len(x), x[2]) } A：5 66 B：5 88 C：7 88 D：以上都不对 🔑 答案解析： C 在线运行\nGo中切片\\数组初始化是可以携带索引的。\n// 1. 不带键的元素 slice1 := []int{1, 2, 3} // 2. 带键的元素（键是索引） slice2 := []string{0: \u0026#34;a\u0026#34;, 1: \u0026#34;b\u0026#34;, 2: \u0026#34;c\u0026#34;} 本题中是一种带有显式索引和隐式索引的混合初始化方式。\n解析 []int{4: 44, 55, 66, 1: 77, 88} 的初始化过程 4: 44,显式指定索引下标 4 处的值为 44。 [0, 0, 0, 0, 44] 55 和 66 ,未指定索引,则从上一个索引位置开始依次放置。\n[0, 0, 0, 0, 44, 55, 66] 1: 77,显式指定索引下标 1 处的值为 77。\n[0, 77, 0, 0, 44, 55, 66] 88 ,未指定索引,则从上一个索引位置开始依次放置。\n[0, 77, 88, 0, 44, 55, 66] 因此 x的内容为 [0, 77, 88, 0, 44, 55, 66]\n本题问该切片(len(x), x[2]) ,得出输出结果为答案C 7 88\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_152/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e44\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e55\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e77\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e88\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(len(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：5 66\u003c/li\u003e\n\u003cli\u003eB：5 88\u003c/li\u003e\n\u003cli\u003eC：7 88\u003c/li\u003e\n\u003cli\u003eD：以上都不对\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC \u003ca href=\"https://go.dev/play/p/0TLiSY6YQ9y\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGo中切片\\数组初始化是可以携带索引的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1. 不带键的元素\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2. 带键的元素（键是索引）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e本题中是一种带有显式索引和隐式索引的混合初始化方式。\u003c/p\u003e\n\u003ch4 id=\"解析-int4-44-55-66-1-77-88-的初始化过程\"\u003e解析 []int{4: 44, 55, 66, 1: 77, 88} 的初始化过程\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e4: 44,显式指定索引下标 4 处的值为 44。\n[0, 0, 0, 0, 44]\u003c/li\u003e\n\u003cli\u003e55 和 66 ,未指定索引,则从上一个索引位置开始依次放置。\u003cbr\u003e\n[0, 0, 0, 0, 44, 55, 66]\u003c/li\u003e\n\u003cli\u003e1: 77,显式指定索引下标 1 处的值为 77。\u003cbr\u003e\n[0, 77, 0, 0, 44, 55, 66]\u003c/li\u003e\n\u003cli\u003e88 ,未指定索引,则从上一个索引位置开始依次放置。\u003cbr\u003e\n[0, 77, 88, 0, 44, 55, 66]\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e因此 x的内容为 [0, 77, 88, 0, 44, 55, 66]\u003cbr\u003e\n本题问该切片(len(x), x[2]) ,得出输出结果为答案C 7 88\u003c/p\u003e","title":"Go每日一题_152"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := []int{2: 1} fmt.Println(a) } A：编译错误； B：[2 1]； C：[0 0 1]； D：[0 1] 🔑 答案解析： C 在线运行\nGo中切片\\数组初始化是可以携带索引的。\n// 1. 不带键的元素 slice1 := []int{1, 2, 3} // 2. 带键的元素（键是索引） slice2 := []string{0: \u0026#34;a\u0026#34;, 1: \u0026#34;b\u0026#34;, 2: \u0026#34;c\u0026#34;} 本题中含义为 索引下标2的元素为1 ，因此切片内容为[0 0 1]\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_151/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：编译错误；\u003c/li\u003e\n\u003cli\u003eB：[2 1]；\u003c/li\u003e\n\u003cli\u003eC：[0 0 1]；\u003c/li\u003e\n\u003cli\u003eD：[0 1]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC \u003ca href=\"https://go.dev/play/p/VMev1IAKxKY\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGo中切片\\数组初始化是可以携带索引的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1. 不带键的元素\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eslice1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2. 带键的元素（键是索引）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eslice2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e本题中含义为 索引下标2的元素为1 ，因此切片内容为[0 0 1]\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_151"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { ch1 := make(chan int) go fmt.Println(\u0026lt;-ch1) ch1 \u0026lt;- 5 time.Sleep(1 * time.Second) } A：5 B：不能编译 C：运行时死锁 🔑 答案解析： C 在线运行\nfatal error: all goroutines are asleep - deadlock!\n官方对Go语句的描述\ngo 语句用于启动一个新的 Goroutine（并发执行的线程），并在其中执行一个函数调用。\nThe function value and parameters are evaluated as usual in the calling goroutine, but unlike with a regular call, program execution does not wait for the invoked function to complete.\n函数值和参数会按照常规方式在调用 Goroutine 中求值。但与常规的函数调用不同，程序不会等待被调用的函数执行完成。\n本题目中通过go语句新的 Goroutine 去运行fmt.Println。（即 \u0026lt;-ch1 的值）会传递给 fmt.Println，并在 Goroutine b 中执行。\nmain Goroutine 在 go fmt.Println(\u0026lt;-ch1) 中求值 \u0026lt;-ch1 时被阻塞。 由于 ch1 是无缓冲通道，且没有其他 Goroutine 向 ch1 发送数据，\u0026lt;-ch1 会一直阻塞。 main Goroutine 被阻塞后，程序无法继续执行，最终触发死锁。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_150/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：5\u003c/li\u003e\n\u003cli\u003eB：不能编译\u003c/li\u003e\n\u003cli\u003eC：运行时死锁\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC \u003ca href=\"https://go.dev/play/p/FsQsswPtOpp\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003efatal error: all goroutines are asleep - deadlock!\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e官方对\u003ca href=\"https://go.dev/ref/spec#Go_statements\"\u003eGo语句\u003c/a\u003e的描述\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ego 语句用于启动一个新的 Goroutine（并发执行的线程），并在其中执行一个函数调用。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThe function value and parameters are evaluated as usual in the calling goroutine, but unlike with a regular call, program execution does not wait for the invoked function to complete.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e函数值和参数会按照常规方式在调用 Goroutine 中求值。但与常规的函数调用不同，程序不会等待被调用的函数执行完成。\u003c/p\u003e","title":"Go每日一题_150"},{"content":"对 add() 函数调用正确的是？\nfunc add(args ...int) int { sum := 0 for _, arg := range args { sum += arg } return sum } A. add(1, 2) B. add(1, 3, 7) C. add([]int{1, 2}) D. add([]int{1, 3, 7}\u0026hellip;) 🔑 答案解析： A B D 在线运行\nGo官方文档-Passing_arguments_to_\u0026hellip;_parameters\nadd 是一个可变参数函数，接受任意数量的 int 类型参数。\n参数 args 的类型是 \u0026hellip;int，在函数内部表现为 []int（即一个 int 类型的切片）。\n虽然 []int 和 \u0026hellip;int 在底层都是切片，但 Go 语言的类型系统要求显式地将切片展开为可变参数。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_149/","summary":"\u003cp\u003e对 add() 函数调用正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003earg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003earg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. add(1, 2)\u003c/li\u003e\n\u003cli\u003eB. add(1, 3, 7)\u003c/li\u003e\n\u003cli\u003eC. add([]int{1, 2})\u003c/li\u003e\n\u003cli\u003eD. add([]int{1, 3, 7}\u0026hellip;)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA B D\n\u003ca href=\"https://go.dev/play/p/869njWxkuwY\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://golang.google.cn/ref/spec#Passing_arguments_to_..._parameters\"\u003eGo官方文档-Passing_arguments_to_\u0026hellip;_parameters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eadd 是一个可变参数函数，接受任意数量的 int 类型参数。\u003cbr\u003e\n参数 args 的类型是 \u0026hellip;int，在函数内部表现为 []int（即一个 int 类型的切片）。\u003cbr\u003e\n虽然 []int 和 \u0026hellip;int 在底层都是切片，但 Go 语言的类型系统要求显式地将切片展开为可变参数。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_149"},{"content":"下列选项正确的是？\npackage main import \u0026#34;fmt\u0026#34; func main() { str := \u0026#34;hello\u0026#34; str[0] = \u0026#39;x\u0026#39; fmt.Println(str) } A. hello B. xello C. compilation error 🔑 答案解析： C\n在线运行\nGo官方文档-String_types\nStrings are immutable: once created, it is impossible to change the contents of a string.\n字符串是不可变的：一旦创建，就无法改变字符串的内容。\n题目中str是string,无法改变字符串的内容,因此str[0] = \u0026lsquo;x\u0026rsquo;会报错。\n扩展 string的内部结构 string在Go中的内部结构是reflect.StringHeader位于reflect/value.go\ntype StringHeader struct { Data uintptr Len int } Data 是一个 uintptr 类型，表示指向字符串数据（字节数组）的指针。 Len 是一个 int 类型，表示字符串的长度。 而Data字符串字面量：其数据存储在内存的只读的data段（数据区）。\n在Go语言中，字符串的内存管理具有一定的优化机制，相同字符串字面量共享底层数组。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) func main() { str1 := \u0026#34;hello\u0026#34; str2 := \u0026#34;hello\u0026#34; sh1 := unsafe.StringData(str1) sh2 := unsafe.StringData(str2) fmt.Println(\u0026#34;str1 Data:\u0026#34;, sh1) fmt.Println(\u0026#34;str2 Data:\u0026#34;, sh2) fmt.Println(\u0026#34;str1 == str2:\u0026#34;, str1 == str2) fmt.Println(\u0026#34;str1 same data as str2:\u0026#34;, sh1 == sh2) str3 := \u0026#34;hello\u0026#34; + \u0026#34; world\u0026#34; str4 := \u0026#34;hello\u0026#34; + \u0026#34; world\u0026#34; sh3 := unsafe.StringData(str3) sh4 := unsafe.StringData(str4) fmt.Println(\u0026#34;str3 Data:\u0026#34;, sh3) fmt.Println(\u0026#34;str4 Data:\u0026#34;, sh4) fmt.Println(\u0026#34;str3 == str4:\u0026#34;, str3 == str4) fmt.Println(\u0026#34;str3 same data as str4:\u0026#34;, sh3 == sh4) } // str1 Data: 0x4af0e8 // str2 Data: 0x4af0e8 // str1 == str2: true // str1 same data as str2: true // str3 Data: 0x4afc26 // str4 Data: 0x4afc26 // str3 == str4: true // str3 same data as str4: true 在线运行\n上面这个例子就可以展示不同的String变量使用了相同的Data\n因此假若允许改变字符串的内容，我们修改底层的Data数据可能会影响到其他字符串，为了避免这种情况。Go是不允许的会发生Panic\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) func main() { str1 := \u0026#34;hello\u0026#34; str2 := \u0026#34;hello\u0026#34; str1Slice := unsafe.Slice(unsafe.StringData(str1), len(str1)) str1Slice[0] = \u0026#39;x\u0026#39; fmt.Println(str2) } // unexpected fault address 0x4af0e8 // fatal error: fault // [signal SIGSEGV: segmentation violation code=0x2 addr=0x4af0e8 pc=0x48f21e] 在线运行\n这与本题错误是不一样的，一个是编译不通过，一个是运行时发生panic。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_148/","summary":"\u003cp\u003e下列选项正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. hello\u003c/li\u003e\n\u003cli\u003eB. xello\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC\u003cbr\u003e\n\u003ca href=\"https://go.dev/play/p/WKuFSxIZZM8\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://golang.google.cn/ref/spec#String_types\"\u003eGo官方文档-String_types\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eStrings are immutable: once created, it is impossible to change the contents of a string.\u003cbr\u003e\n字符串是不可变的：一旦创建，就无法改变字符串的内容。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题目中str是string,无法改变字符串的内容,因此str[0] = \u0026lsquo;x\u0026rsquo;会报错。\u003c/p\u003e\n\u003ch2 id=\"扩展\"\u003e扩展\u003c/h2\u003e\n\u003ch3 id=\"string的内部结构\"\u003estring的内部结构\u003c/h3\u003e\n\u003cp\u003estring在Go中的内部结构是reflect.StringHeader位于\u003ca href=\"https://github.com/golang/go/blob/master/src/reflect/value.go#L2530C1-L2531C1\"\u003ereflect/value.go\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStringHeader\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eData\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eData 是一个 uintptr 类型，表示指向字符串数据（字节数组）的指针。\u003c/li\u003e\n\u003cli\u003eLen 是一个 int 类型，表示字符串的长度。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而Data字符串字面量：其数据存储在内存的只读的data段（数据区）。\u003c/p\u003e\n\u003cp\u003e在Go语言中，字符串的内存管理具有一定的优化机制，相同字符串字面量共享底层数组。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unsafe\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esh1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringData\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esh2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringData\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str1 Data:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esh1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str2 Data:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esh2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str1 == str2:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estr1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str1 same data as str2:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esh1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; world\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr4\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; world\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esh3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringData\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esh4\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringData\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str3 Data:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esh3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str4 Data:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esh4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str3 == str4:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estr3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;str3 same data as str4:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esh3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str1 Data: 0x4af0e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str2 Data: 0x4af0e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str1 == str2: true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str1 same data as str2: true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str3 Data: 0x4afc26\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str4 Data: 0x4afc26\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str3 == str4: true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// str3 same data as str4: true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/FF90LU6QsJk\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e","title":"Go每日一题_148"},{"content":"下面这段代码输出什么?\npackage main import ( \u0026#34;fmt\u0026#34; ) func hello(i int) { fmt.Println(i) } func main() { i := 5 defer hello(i) i = i + 10 } 🔑 答案解析： 5 在线运行 Go传递只有值传递\n运行到defer hello(i)的时候就已经确定i的值了\n下方是defer的结构\ntype _defer struct { heap bool rangefunc bool // true for rangefunc list sp uintptr // sp at time of defer pc uintptr // pc at time of defer fn func() // can be nil for open-coded defers link *_defer // next defer on G; can point to either heap or stack! // If rangefunc is true, *head is the head of the atomic linked list // during a range-over-func execution. head *atomic.Pointer[_defer] } defer 的注册本质上是调用了内置函数 runtime.deferproc\nfunc deferproc(siz int32, fn *funcval) siz int32： 表示 defer 函数的参数总大小（以字节为单位）。 用于在栈上分配足够的空间来保存参数。 fn *funcval： 表示 defer 函数的函数值（包括函数指针和捕获的参数）。 funcval 是一个运行时内部结构体，用于表示函数的元数据。 因此我们可以得知 注册时就已经确定了捕获的参数\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_147/","summary":"\u003cp\u003e下面这段代码输出什么?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e5\n\u003ca href=\"https://go.dev/play/p/hMcMm9tJw2k\"\u003e在线运行\u003c/a\u003e\nGo传递只有值传递\u003cbr\u003e\n运行到defer hello(i)的时候就已经确定i的值了\u003c/p\u003e\n\u003cp\u003e下方是defer的结构\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_defer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eheap\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003erangefunc\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e// true for rangefunc list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// sp at time of defer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003epc\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// pc at time of defer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e()  \u003cspan style=\"color:#75715e\"\u003e// can be nil for open-coded defers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003elink\u003c/span\u003e      \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e_defer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// next defer on G; can point to either heap or stack!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#75715e\"\u003e// If rangefunc is true, *head is the head of the atomic linked list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#75715e\"\u003e// during a range-over-func execution.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ehead\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eatomic\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003e_defer\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003edefer 的注册本质上是调用了内置函数 runtime.deferproc\u003c/p\u003e","title":"Go每日一题_147"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { t := struct { time.Time N int }{ time.Date(2020, 12, 20, 0, 0, 0, 0, time.UTC), 5, } m, _ := json.Marshal(t) fmt.Printf(\u0026#34;%s\u0026#34;, m) } A：{\u0026ldquo;Time\u0026rdquo;: \u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;, \u0026ldquo;N\u0026rdquo;: 5 }； B：\u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;； C：{\u0026ldquo;N\u0026rdquo;: 5}； D：\u0026lt;nil\u0026gt; 🔑 答案解析： B 在线运行\nGo 结构体内嵌与继承方法 在 Go 语言中，结构体可以内嵌匿名结构体，从而实现类似继承的效果。例如，下面的结构体内嵌了匿名结构体 time.Time：\nstruct { time.Time N int } 这种内嵌匿名结构体的方式使得外部结构体继承了 time.Time 的方法集。具体来说，由于 time.Time 实现了 json.Marshaler 接口：\n// MarshalJSON implements the json.Marshaler interface. // The time is a quoted string in RFC 3339 format, with sub-second precision added if present. func (t Time) MarshalJSON() ([]byte, error) { if y := t.Year(); y \u0026lt; 0 || y \u0026gt;= 10000 { // RFC 3339 is clear that years are 4 digits exactly. // See golang.org/issue/4556#c15 for more discussion. return nil, errors.New(\u0026#34;Time.MarshalJSON: year outside of range [0,9999]\u0026#34;) } b := make([]byte, 0, len(RFC3339Nano)+2) b = append(b, \u0026#39;\u0026#34;\u0026#39;) b = t.AppendFormat(b, RFC3339Nano) b = append(b, \u0026#39;\u0026#34;\u0026#39;) return b, nil } 因此，这种结构体继承了 Time 类型的 MarshalJSON() 方法。当对该结构体进行 json.Marshal 操作时，效果与对 time.Time 进行相同操作的一致，输出结构为\u0026quot;2020-12-20T00:00:00Z\u0026quot;\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_146/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDate\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2020\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUTC\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMarshal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：{\u0026ldquo;Time\u0026rdquo;: \u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;, \u0026ldquo;N\u0026rdquo;: 5 }；\u003c/li\u003e\n\u003cli\u003eB：\u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;；\u003c/li\u003e\n\u003cli\u003eC：{\u0026ldquo;N\u0026rdquo;: 5}；\u003c/li\u003e\n\u003cli\u003eD：\u003ccode\u003e\u0026lt;nil\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\n\u003ca href=\"https://go.dev/play/p/ylPvSph0WKu\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"go-结构体内嵌与继承方法\"\u003eGo 结构体内嵌与继承方法\u003c/h3\u003e\n\u003cp\u003e在 Go 语言中，结构体可以内嵌匿名结构体，从而实现类似继承的效果。例如，下面的结构体内嵌了匿名结构体 \u003ccode\u003etime.Time\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种内嵌匿名结构体的方式使得外部结构体继承了 time.Time 的方法集。具体来说，由于 time.Time 实现了 json.Marshaler 接口：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// MarshalJSON implements the json.Marshaler interface.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The time is a quoted string in RFC 3339 format, with sub-second precision added if present.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eMarshalJSON\u003c/span\u003e() ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYear\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// RFC 3339 is clear that years are 4 digits exactly.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// See golang.org/issue/4556#c15 for more discussion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerrors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Time.MarshalJSON: year outside of range [0,9999]\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003eRFC3339Nano\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAppendFormat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eRFC3339Nano\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因此，这种结构体继承了 Time 类型的 MarshalJSON() 方法。当对该结构体进行 json.Marshal 操作时，效果与对 time.Time 进行相同操作的一致，输出结构为\u0026quot;2020-12-20T00:00:00Z\u0026quot;\u003c/p\u003e","title":"Go每日一题_146"},{"content":"力扣链接:3083. 字符串及其反转中是否存在同一子字符串\n力扣难度 简单\n算法评级: 2 知道常用数据结构和算法并简单使用\n难度分 1173\n题目：\n给你一个字符串 s ，请你判断字符串 s 是否存在一个长度为 2 的子字符串，在其反转后的字符串中也出现。\n如果存在这样的子字符串，返回 true；如果不存在，返回 false 。\n示例 1：\n输入：s = \u0026ldquo;leetcode\u0026rdquo;\n输出：true\n解释：子字符串 \u0026ldquo;ee\u0026rdquo; 的长度为 2，它也出现在 reverse(s) == \u0026ldquo;edocteel\u0026rdquo; 中。\n示例 2：\n输入：s = \u0026ldquo;abcba\u0026rdquo;\n输出：true\n解释：所有长度为 2 的子字符串 \u0026ldquo;ab\u0026rdquo;、\u0026ldquo;bc\u0026rdquo;、\u0026ldquo;cb\u0026rdquo;、\u0026ldquo;ba\u0026rdquo; 也都出现在 reverse(s) == \u0026ldquo;abcba\u0026rdquo; 中。\n示例 3：\n输入：s = \u0026ldquo;abcd\u0026rdquo;\n输出：false\n解释：字符串 s 中不存在满足「在其反转后的字符串中也出现」且长度为 2 的子字符串。\nfunc isSubstringPresent(s string) bool { } 🔑 答案解析： 👈点击 // isSubstringPresent 函数用于判断给定字符串 s 中是否存在一对字符的子串， // 这对字符以相反的顺序也出现过。 func isSubstringPresent(s string) bool { // 创建一个 26×26 的布尔数组 vis，用于记录每对字符是否出现过。 // 索引的含义是：vis[x][y] 表示字符 x 和字符 y 组成的子串是否出现过。 // 这里的 x 和 y 是字符在字母表中的索引，从 0 到 25 分别对应 \u0026#39;a\u0026#39; 到 \u0026#39;z\u0026#39;。 vis := [26][26]bool{} // 遍历字符串 s，从第二个字符开始，因为要检查相邻的两个字符组成的子串。 for i := 1; i \u0026lt; len(s); i++ { // 计算当前字符对中第一个字符在字母表中的索引。 // 例如，如果字符是 \u0026#39;a\u0026#39;，则 x 为 0；如果是 \u0026#39;b\u0026#39;，则 x 为 1，以此类推。 x := s[i-1] - \u0026#39;a\u0026#39; // 计算当前字符对中第二个字符在字母表中的索引。 y := s[i] - \u0026#39;a\u0026#39; // 将当前字符对标记为已出现过。 vis[x][y] = true // 检查是否存在相反顺序的字符对。 // 如果 vis[y][x] 为 true，说明字符 y 和字符 x 组成的子串也出现过， // 即找到了满足条件的子串，返回 true。 if vis[y][x] { return true } } // 如果遍历完整个字符串都没有找到满足条件的子串，返回 false。 return false } ","permalink":"https://loommii.github.io/posts/leetcode/data/3083_%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%85%B6%E5%8F%8D%E8%BD%AC%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%90%8C%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/existence-of-a-substring-in-a-string-and-its-reverse/description/\"\u003e3083. 字符串及其反转中是否存在同一子字符串\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003cbr\u003e\n算法评级:  2      知道常用数据结构和算法并简单使用\u003cbr\u003e\n难度分 1173\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\u003c/p\u003e\n\u003cp\u003e给你一个字符串 s ，请你判断字符串 s 是否存在一个长度为 2 的子字符串，在其反转后的字符串中也出现。\u003c/p\u003e\n\u003cp\u003e如果存在这样的子字符串，返回 true；如果不存在，返回 false 。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：s = \u0026ldquo;leetcode\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：true\u003c/p\u003e\n\u003cp\u003e解释：子字符串 \u0026ldquo;ee\u0026rdquo; 的长度为 2，它也出现在 reverse(s) == \u0026ldquo;edocteel\u0026rdquo; 中。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：s = \u0026ldquo;abcba\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：true\u003c/p\u003e\n\u003cp\u003e解释：所有长度为 2 的子字符串 \u0026ldquo;ab\u0026rdquo;、\u0026ldquo;bc\u0026rdquo;、\u0026ldquo;cb\u0026rdquo;、\u0026ldquo;ba\u0026rdquo; 也都出现在 reverse(s) == \u0026ldquo;abcba\u0026rdquo; 中。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 3：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：s = \u0026ldquo;abcd\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：false\u003c/p\u003e\n\u003cp\u003e解释：字符串 s 中不存在满足「在其反转后的字符串中也出现」且长度为 2 的子字符串。\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisSubstringPresent\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析： 👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// isSubstringPresent 函数用于判断给定字符串 s 中是否存在一对字符的子串，\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 这对字符以相反的顺序也出现过。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisSubstringPresent\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 创建一个 26×26 的布尔数组 vis，用于记录每对字符是否出现过。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 索引的含义是：vis[x][y] 表示字符 x 和字符 y 组成的子串是否出现过。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 这里的 x 和 y 是字符在字母表中的索引，从 0 到 25 分别对应 \u0026#39;a\u0026#39; 到 \u0026#39;z\u0026#39;。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evis\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e{} \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 遍历字符串 s，从第二个字符开始，因为要检查相邻的两个字符组成的子串。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 计算当前字符对中第一个字符在字母表中的索引。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 例如，如果字符是 \u0026#39;a\u0026#39;，则 x 为 0；如果是 \u0026#39;b\u0026#39;，则 x 为 1，以此类推。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 计算当前字符对中第二个字符在字母表中的索引。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 将当前字符对标记为已出现过。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003evis\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e] = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 检查是否存在相反顺序的字符对。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 如果 vis[y][x] 为 true，说明字符 y 和字符 x 组成的子串也出现过，\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 即找到了满足条件的子串，返回 true。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evis\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e] { \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 如果遍历完整个字符串都没有找到满足条件的子串，返回 false。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"3083_字符串及其反转中是否存在同一子字符串"},{"content":"力扣链接:3159. 查询数组中元素的出现位置\n力扣难度 中等\n算法评级: 2 知道常用数据结构和算法并简单使用\n难度分 1263\n题目： 给你一个整数数组 nums ，一个整数数组 queries 和一个整数 x 。\n对于每个查询 queries[i] ，你需要找到 nums 中第 queries[i] 个 x 的位置，并返回它的下标。如果数组中 x 的出现次数少于 queries[i] ，该查询的答案为 -1 。\n请你返回一个整数数组 answer ，包含所有查询的答案。\n示例 1：\n输入：nums = [1,3,1,7], queries = [1,3,2,4], x = 1\n输出：[0,-1,2,-1]\n解释：\n第 1 个查询，第一个 1 出现在下标 0 处。 第 2 个查询，nums 中只有两个 1 ，所以答案为 -1 。 第 3 个查询，第二个 1 出现在下标 2 处。 第 4 个查询，nums 中只有两个 1 ，所以答案为 -1 。 示例 2：\n输入：nums = [1,2,3], queries = [10], x = 5\n输出：[-1]\n解释：\n第 1 个查询，nums 中没有 5 ，所以答案为 -1 。 func occurrencesOfElement(nums, queries []int, x int) []int { } 🔑 答案解析： 👈点击 func occurrencesOfElement(nums, queries []int, x int) []int { queryLen := len(queries) ans := make([]int, queryLen) // 定义一个切片 indexList，用于存储目标元素 x 在 nums 数组中的所有索引位置 var indexList []int // 遍历 nums 数组 for i, v := range nums { // 如果当前元素 v 等于目标元素 x if v == x { // 将当前元素的索引 i 添加到 indexList 切片中 indexList = append(indexList, i) } } // 遍历查询数组 queries for i, v := range queries { // 如果查询值 v 大于 indexList 切片的长度，说明查询的位置超出了目标元素 x 出现的次数 if v \u0026gt; len(indexList) { // 在结果数组 ans 的对应位置存入 -1 ans[i] = -1 } else { // 在结果数组 ans 的对应位置存入 indexList 中索引为 v-1 的值 ans[i] = indexList[v-1] } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/3159_%E6%9F%A5%E8%AF%A2%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%BA%E7%8E%B0%E4%BD%8D%E7%BD%AE/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/find-occurrences-of-an-element-in-an-array/description/\"\u003e3159. 查询数组中元素的出现位置\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003cbr\u003e\n算法评级:  2      知道常用数据结构和算法并简单使用\u003cbr\u003e\n难度分 1263\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\n给你一个整数数组 nums ，一个整数数组 queries 和一个整数 x 。\u003c/p\u003e\n\u003cp\u003e对于每个查询 queries[i] ，你需要找到 nums 中第 queries[i] 个 x 的位置，并返回它的下标。如果数组中 x 的出现次数少于 queries[i] ，该查询的答案为 -1 。\u003c/p\u003e\n\u003cp\u003e请你返回一个整数数组 answer ，包含所有查询的答案。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [1,3,1,7], queries = [1,3,2,4], x = 1\u003c/p\u003e\n\u003cp\u003e输出：[0,-1,2,-1]\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第 1 个查询，第一个 1 出现在下标 0 处。\u003c/li\u003e\n\u003cli\u003e第 2 个查询，nums 中只有两个 1 ，所以答案为 -1 。\u003c/li\u003e\n\u003cli\u003e第 3 个查询，第二个 1 出现在下标 2 处。\u003c/li\u003e\n\u003cli\u003e第 4 个查询，nums 中只有两个 1 ，所以答案为 -1 。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e","title":"3159_查询数组中元素的出现位置"},{"content":"力扣链接:3046. 分割数组\n力扣难度 简单\n算法评级: 2 知道常用数据结构和算法并简单使用\n难度分 1212\n题目： 给你一个长度为 偶数 的整数数组 nums 。你需要将这个数组分割成 nums1 和 nums2 两部分，要求：\nnums1.length == nums2.length == nums.length / 2 。 nums1 应包含 互不相同 的元素。 nums2也应包含 互不相同 的元素。 如果能够分割数组就返回 true ，否则返回 false 。\n示例 1：\n输入：nums = [1,1,2,2,3,4]\n输出：true\n解释：分割 nums 的可行方案之一是 nums1 = [1,2,3] 和 nums2 = [1,2,4] 。\n示例 2：\n输入：nums = [1,1,1,1]\n输出：false\n解释：分割 nums 的唯一可行方案是 nums1 = [1,1] 和 nums2 = [1,1] 。但 nums1 和 nums2 都不是由互不相同的元素构成。因此，返回 false 。\n提示：\n1 \u0026lt;= nums.length \u0026lt;= 100\nnums.length % 2 == 0\n1 \u0026lt;= nums[i] \u0026lt;= 100\nfunc isPossibleToSplit(nums []int) bool { } 🔑 答案解析： 👈点击 func isPossibleToSplit(nums []int) bool { cnt := make(map[int]int) for _, v := range nums { cnt[v]++ if cnt[v] \u0026gt; 2 { return false } } return true } ","permalink":"https://loommii.github.io/posts/leetcode/data/3046_%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/split-the-array/description/\"\u003e3046. 分割数组\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003cbr\u003e\n算法评级:  2      知道常用数据结构和算法并简单使用\u003cbr\u003e\n难度分 1212\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\n给你一个长度为 偶数 的整数数组 nums 。你需要将这个数组分割成 nums1 和 nums2 两部分，要求：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enums1.length == nums2.length == nums.length / 2 。\u003c/li\u003e\n\u003cli\u003enums1 应包含 互不相同 的元素。\u003c/li\u003e\n\u003cli\u003enums2也应包含 互不相同 的元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果能够分割数组就返回 true ，否则返回 false 。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [1,1,2,2,3,4]\u003cbr\u003e\n输出：true\u003cbr\u003e\n解释：分割 nums 的可行方案之一是 nums1 = [1,2,3] 和 nums2 = [1,2,4] 。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [1,1,1,1]\u003cbr\u003e\n输出：false\u003cbr\u003e\n解释：分割 nums 的唯一可行方案是 nums1 = [1,1] 和 nums2 = [1,1] 。但 nums1 和 nums2 都不是由互不相同的元素构成。因此，返回 false 。\u003c/p\u003e","title":"3046_分割数组"},{"content":"定义一个包内全局字符串变量，下面语法正确的是（多选）：\nA. var str string B. str := \u0026quot;\u0026quot; C. str = \u0026quot;\u0026quot; D. var str = \u0026quot;\u0026quot; 🔑 答案解析： A D\n只有 用var来定义才能在全局定义\nB 只支持局部变量声明 C 赋值,不是定义\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_145/","summary":"\u003cp\u003e定义一个包内全局字符串变量，下面语法正确的是（多选）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. var str string\u003c/li\u003e\n\u003cli\u003eB. str := \u0026quot;\u0026quot;\u003c/li\u003e\n\u003cli\u003eC. str = \u0026quot;\u0026quot;\u003c/li\u003e\n\u003cli\u003eD. var str = \u0026quot;\u0026quot;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA D\u003c/p\u003e\n\u003cp\u003e只有 用var来定义才能在全局定义\u003c/p\u003e\n\u003cp\u003eB 只支持局部变量声明\nC 赋值,不是定义\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_145"},{"content":"下面这段代码输出什么？\ntype People struct{} func (p *People) ShowA() { fmt.Println(\u0026#34;showA\u0026#34;) p.ShowB() } func (p *People) ShowB() { fmt.Println(\u0026#34;showB\u0026#34;) } type Teacher struct { People } func (t *Teacher) ShowB() { fmt.Println(\u0026#34;teacher showB\u0026#34;) } func main() { t := Teacher{} t.ShowB() } 🔑 答案解析： teacher showB 在线运行\n知识点：结构体嵌套 Teacher struct 内嵌套了People struct 在嵌套结构体中，People 称为内部类型，Teacher 称为外部类型；通过嵌套，内部类型的属性、方法，可以为外部类型所有，就好像是外部类型自己的一样。此外，外部类型还可以定义自己的属性和方法，甚至可以定义与内部相同的方法，这样内部类型的方法就会被“屏蔽”。这个例子中的 ShowB() 就是同名方法。\n如果想要调用People的ShowB() 方法需要使用\nt.People.ShowB() 在线运行\nt.People.ShowA() 等价 t.ShowA() 因为Teacher没有ShowA()方法，因此可以省略。这是Go提供的语法糖\n// 二者等价 t.People.ShowA() t.ShowA() 在线运行\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_144/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showA\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;teacher showB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eteacher showB\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/dnitHoT5yHi\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"知识点结构体嵌套\"\u003e知识点：结构体嵌套\u003c/h3\u003e\n\u003cp\u003eTeacher struct 内嵌套了People struct\n在嵌套结构体中，People 称为内部类型，Teacher 称为外部类型；通过嵌套，内部类型的属性、方法，可以为外部类型所有，就好像是外部类型自己的一样。此外，外部类型还可以定义自己的属性和方法，甚至可以定义与内部相同的方法，这样内部类型的方法就会被“屏蔽”。这个例子中的 ShowB() 就是同名方法。\u003c/p\u003e\n\u003cp\u003e如果想要调用People的ShowB() 方法需要使用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/oi34XpDskH2\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003et.People.ShowA() 等价 t.ShowA()\n因为Teacher没有ShowA()方法，因此可以省略。这是Go提供的语法糖\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 二者等价\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/RZ0M-MjpMcM\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_144"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { i := -5 j := +5 fmt.Printf(\u0026#34;%+d %+d\u0026#34;, i, j) } A. -5 +5 B. +5 +5 C. -5 5 D. +5 -5 🔑 答案解析： A 在线运行\n根据官方文档:https://pkg.go.dev/fmt\n%b 二进制 %c 对应 Unicode 码位所表示的字符 %d 十进制 %o 八进制 %O 带 0o 前缀的八进制 %q 使用 Go 语法安全转义的单引号括起来的字符字面量 %x 十六进制，a - f 用小写字母 %X 十六进制，A - F 用大写字母 %U Unicode 格式：U+1234；等同于 \u0026#34;U+%04X\u0026#34; +：始终为数值打印符号；对于 %q（%+q），保证仅输出 ASCII 字符。 -：在右侧而非左侧填充空格（使字段左对齐）。 #：备用格式：二进制（%#b）添加前导 0b，八进制（%#o）添加前导 0，十六进制（%#x 或 %#X）添加前导 0x 或 0X；对于 %p（%#p），不显示前导 0x；对于 %q，如果 [strconv.CanBackquote] 返回 true，则打印原始（反引号包围）的字符串；对于 %e、%E、%f、%F、%g 和 %G，始终打印小数点；对于 %g 和 %G，不删除末尾的零；对于 %U（%#U），如果字符是可打印的，例如写成 U+0078 \u0026#39;x\u0026#39;。 （空格）：对于数字，为省略的符号留出一个空格（% d）；以十六进制打印字符串或切片时，在字节之间添加空格（% x，% X）。 0：用前导零而非空格填充；对于数字，这会将填充移到符号之后 。 回到本题目中 %+d 。 d 十进制 和 +：始终为数值打印符号\n组合在一起就是 打印带符号位的十进制因此输出为\nA. -5 +5\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_143/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%+d %+d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. -5 +5\u003c/li\u003e\n\u003cli\u003eB. +5 +5\u003c/li\u003e\n\u003cli\u003eC. -5 5\u003c/li\u003e\n\u003cli\u003eD. +5 -5\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA\n\u003ca href=\"https://go.dev/play/p/vDR1EXgEiDa\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e根据官方文档:\u003ca href=\"https://pkg.go.dev/fmt\"\u003ehttps://pkg.go.dev/fmt\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%b 二进制\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%c 对应 Unicode 码位所表示的字符\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%d 十进制\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%o 八进制\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%O 带 0o 前缀的八进制\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%q 使用 Go 语法安全转义的单引号括起来的字符字面量\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%x 十六进制，a - f 用小写字母\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%X 十六进制，A - F 用大写字母\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%U Unicode 格式：U+1234；等同于 \u0026#34;U+%04X\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+：始终为数值打印符号；对于 %q（%+q），保证仅输出 ASCII 字符。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-：在右侧而非左侧填充空格（使字段左对齐）。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#：备用格式：二进制（%#b）添加前导 0b，八进制（%#o）添加前导 0，十六进制（%#x 或 %#X）添加前导 0x 或 0X；对于 %p（%#p），不显示前导 0x；对于 %q，如果 [strconv.CanBackquote] 返回 true，则打印原始（反引号包围）的字符串；对于 %e、%E、%f、%F、%g 和 %G，始终打印小数点；对于 %g 和 %G，不删除末尾的零；对于 %U（%#U），如果字符是可打印的，例如写成 U+0078 \u0026#39;x\u0026#39;。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e（空格）：对于数字，为省略的符号留出一个空格（% d）；以十六进制打印字符串或切片时，在字节之间添加空格（% x，% X）。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0：用前导零而非空格填充；对于数字，这会将填充移到符号之后 。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e回到本题目中 %+d 。 d 十进制 和 +：始终为数值打印符号\u003cbr\u003e\n组合在一起就是 打印带符号位的十进制因此输出为\u003cbr\u003e\nA. -5 +5\u003c/p\u003e","title":"Go每日一题_143"},{"content":"力扣链接:3285. 找到稳定山的下标\n力扣难度 简单\n算法评级: 1 无算法要求\n难度分 1166\n有 n 座山排成一列，每座山都有一个高度。给你一个整数数组 height ，其中 height[i] 表示第 i 座山的高度，再给你一个整数 threshold 。\n对于下标不为 0 的一座山，如果它左侧相邻的山的高度 严格大于 threshold ，那么我们称它是 稳定 的。我们定义下标为 0 的山 不是 稳定的。\n请你返回一个数组，包含所有 稳定 山的下标，你可以以 任意 顺序返回下标数组。\n示例 1：\n输入：height = [1,2,3,4,5], threshold = 2\n输出：[3,4]\n解释：\n下标为 3 的山是稳定的，因为 height[2] == 3 大于 threshold == 2 。 下标为 4 的山是稳定的，因为 height[3] == 4 大于 threshold == 2.\n示例 2：\n输入：height = [10,1,10,1,10], threshold = 3\n输出：[1,3]\n示例 3：\n输入：height = [10,1,10,1,10], threshold = 10\n输出：[]\nfunc stableMountains(height []int, threshold int) []int { } 🔑 答案解析： 👈点击 func stableMountains(height []int, threshold int) []int { ans := make([]int, 0) for i := 0; i \u0026lt; len(height)-1; i++ { if height[i] \u0026gt; threshold { ans = append(ans, i+1) } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/3285_%E6%89%BE%E5%88%B0%E7%A8%B3%E5%AE%9A%E5%B1%B1%E7%9A%84%E4%B8%8B%E6%A0%87/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/find-indices-of-stable-mountains/description/\"\u003e3285. 找到稳定山的下标\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  1      无算法要求\u003c/p\u003e\n\u003cp\u003e难度分 1166\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e有 n 座山排成一列，每座山都有一个高度。给你一个整数数组 height ，其中 height[i] 表示第 i 座山的高度，再给你一个整数 threshold 。\u003c/p\u003e\n\u003cp\u003e对于下标不为 0 的一座山，如果它左侧相邻的山的高度 严格大于 threshold ，那么我们称它是 稳定 的。我们定义下标为 0 的山 不是 稳定的。\u003c/p\u003e\n\u003cp\u003e请你返回一个数组，包含所有 稳定 山的下标，你可以以 任意 顺序返回下标数组。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：height = [1,2,3,4,5], threshold = 2\u003c/p\u003e\n\u003cp\u003e输出：[3,4]\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003cp\u003e下标为 3 的山是稳定的，因为 height[2] == 3 大于 threshold == 2 。\n下标为 4 的山是稳定的，因为 height[3] == 4 大于 threshold == 2.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e","title":"3285_找到稳定山的下标"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { var s map[string]int delete(s, \u0026#34;h\u0026#34;) fmt.Println(s[\u0026#34;h\u0026#34;]) } A. runtime panic B. 0 C. compilation error 🔑 答案解析： B 在线运行\n对未初始化make的map使用delete是不会报错的 访问未初始化,返回值类型对应的零值 扩展 对未初始化的map赋值会panic\npackage main import \u0026#34;fmt\u0026#34; func main() { var s map[string]int s[\u0026#34;h\u0026#34;] = 1 // panic: assignment to entry in nil map fmt.Println(s[\u0026#34;h\u0026#34;]) } 在线运行\n这种错误是可避免的语法错误,建议使用单元测试试着跑一下代码流程\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_142/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       delete(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. runtime panic\u003c/li\u003e\n\u003cli\u003eB. 0\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\n\u003ca href=\"https://go.dev/play/p/rfK0pIKBRRx\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对未初始化make的map使用delete是不会报错的\u003c/li\u003e\n\u003cli\u003e访问未初始化,返回值类型对应的零值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"扩展\"\u003e扩展\u003c/h4\u003e\n\u003cp\u003e对未初始化的map赋值会panic\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// panic: assignment to entry in nil map\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://go.dev/play/p/MScHCsbM6bt\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这种错误是可避免的语法错误,建议使用单元测试试着跑一下代码流程\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_142"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { s := make(map[string]int) delete(s, \u0026#34;h\u0026#34;) fmt.Println(s[\u0026#34;h\u0026#34;]) } A. runtime panic B. 0 C. compilation error 🔑 答案解析： B 在线运行 delete不存在的Key 并不会panic\n扩展问题 本题中s是已经初始化的，如果未初始化结构还是一样的吗？\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_141/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delete(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. runtime panic\u003c/li\u003e\n\u003cli\u003eB. 0\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\n\u003ca href=\"https://go.dev/play/p/uvHvPF8EdU-\"\u003e在线运行\u003c/a\u003e\ndelete不存在的Key 并不会panic\u003c/p\u003e\n\u003ch4 id=\"扩展问题\"\u003e扩展问题\u003c/h4\u003e\n\u003cp\u003e本题中s是已经初始化的，如果未初始化结构还是一样的吗？\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_141"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { var i interface{} if i == nil { fmt.Println(\u0026#34;nil\u0026#34;) return } fmt.Println(\u0026#34;not nil\u0026#34;) } A. nil B. not nil C. compilation error 🔑 答案解析： A 在线运行\n简单来说,接口变量有2个值,一个是类型,另一个是值。 if 接口 时,值和类型都为零值时,接口live() == nil 判断才为T\n接口interface内部结构 interface共有2种表现形式\n// 1 空接口 var MyInterface interface{} // 2 非空接口 type MyInterface interface { function() } 对应的2种底层结构\n空接口 type eface struct { // 空接口 _type *_type // 类型信息 data unsafe.Pointer // 指向数据的指针(go 语言中特殊的指针类型 unsafe.Pointer 类似于 c 语言中的void*) } type _type struct { size uintptr // 类型大小 ptrdata uintptr // 前缀持有所有指针的内存大小 hash uint32 // 数据 hash 值 tflag tflag align uint8 // 对齐 fieldalign uint8 // 嵌入结构体时的对齐 kind uint8 // kind 有些枚举值 kind 等于 0 是无效的 // function for comparing objects of this type // (ptr to object A, ptr to object B) -\u0026gt; ==? equal func(unsafe.Pointer, unsafe.Pointer) bool gcdata *byte str nameOff ptrToThis typeOff } _type 属性：是 Go 语言中所有类型的公共描述，Go 语言几乎所有的数据结构都可以抽象成 _type，是所有类型的公共描述，_type 负责决定 data 应该如何解释和操作 data 属性： 表示指向具体的实例数据的指针，它是一个unsafe.Pointer类型，相当于一个 C 的万能指针void*。\n非空接口 /// 非空接口 type iface struct { tab *itab data unsafe.Pointer } type itab struct { inter *interfacetype // 接口自身的元信息 _type *_type // 具体类型的元信息 hash int32 // _type 里也有一个同样的 hash，此处多放一个是为了方便运行接口断言 _ [4]byte fun [1]uintptr // 函数指针，指向具体类型所实现的方法 } // itab 里面包含了 interface 的一些关键信息，比如 method 的具体实现。 interface type包含了一些关于 interface 本身的信息，比如package path，包含的method。这里的interfacetype 是定义 interface 的一种抽象表示。 _type表示具体化的类型，与 eface 的_type 类型相同。 ash字段其实是对_type.hash的拷贝，它会在 interface 的实例化时，用于快速判断目标类型和接口中的类型是否一致。另，Go 的 interface 的 Duck-typing 机制也是依赖这个字段来实现。 fun字段其实是一个动态大小的数组，虽然声明时是固定大小为 1，但在使用时会直接通过 fun 指针获取其中的数据，并且不会检查数组的边界，所以该数组中保存的元素数量是不确定的。 回到本题 i 属于空接口，类型信息和指向数据的指针都为零值(nil) 此时 i == nil 为true\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_140/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. nil\u003c/li\u003e\n\u003cli\u003eB. not nil\u003c/li\u003e\n\u003cli\u003eC. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA \u003ca href=\"https://go.dev/play/p/rtD7YmJZxp1\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e简单来说,接口变量有2个值,一个是类型,另一个是值。\nif 接口 时,值和类型都为零值时,接口live() == nil 判断才为T\u003c/p\u003e\n\u003ch2 id=\"接口interface内部结构\"\u003e接口interface内部结构\u003c/h2\u003e\n\u003cp\u003einterface共有2种表现形式\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1 空接口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInterface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2 非空接口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInterface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efunction\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对应的2种底层结构\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e空接口\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eeface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {      \u003cspan style=\"color:#75715e\"\u003e// 空接口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e_type\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e_type\u003c/span\u003e         \u003cspan style=\"color:#75715e\"\u003e// 类型信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 指向数据的指针(go 语言中特殊的指针类型 unsafe.Pointer 类似于 c 语言中的void*)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_type\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 类型大小\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eptrdata\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 前缀持有所有指针的内存大小\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehash\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003euint32\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// 数据 hash 值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etflag\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003etflag\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ealign\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 对齐\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efieldalign\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 嵌入结构体时的对齐\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ekind\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// kind 有些枚举值 kind 等于 0 是无效的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// function for comparing objects of this type\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// (ptr to object A, ptr to object B) -\u0026gt; ==?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eequal\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egcdata\u003c/span\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e       \u003cspan style=\"color:#a6e22e\"\u003enameOff\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eptrToThis\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etypeOff\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e_type 属性：是 Go 语言中所有类型的公共描述，Go 语言几乎所有的数据结构都可以抽象成 \u003ccode\u003e_type\u003c/code\u003e，是所有类型的公共描述，_type 负责决定 data 应该如何解释和操作\ndata 属性： 表示指向具体的实例数据的指针，它是一个unsafe.Pointer类型，相当于一个 C 的万能指针void*。\u003c/p\u003e","title":"Go每日一题_140"},{"content":"以下哪种类型可以使用 cap() 函数？\nA. array B. slice C. map D. channel 🔑 答案解析： ABD 官方文档\nfunc cap(v Type) int // cap 内建函数根据 v 的类型返回 v 的容量： 数组 array：v 中元素的数量（与 len(v) 相同）。 数组指针 *array：*v 中元素的数量（与 len(v) 相同）。 切片 slice：切片重新切割时可以达到的最大长度； 通道 channel：通道的缓冲区容量，以元素为单位； 如果 v 为 nil，则 cap(v) 为零。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_139/","summary":"\u003cp\u003e以下哪种类型可以使用 cap() 函数？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. array\u003c/li\u003e\n\u003cli\u003eB. slice\u003c/li\u003e\n\u003cli\u003eC. map\u003c/li\u003e\n\u003cli\u003eD. channel\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eABD\n\u003ca href=\"https://pkg.go.dev/builtin#cap\"\u003e官方文档\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e cap(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eType\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// cap 内建函数根据 v 的类型返回 v 的容量：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e数组 array：v 中元素的数量（与 len(v) 相同）。\u003c/li\u003e\n\u003cli\u003e数组指针 *array：*v 中元素的数量（与 len(v) 相同）。\u003c/li\u003e\n\u003cli\u003e切片 slice：切片重新切割时可以达到的最大长度；\u003c/li\u003e\n\u003cli\u003e通道 channel：通道的缓冲区容量，以元素为单位；\u003c/li\u003e\n\u003cli\u003e如果 v 为 nil，则 cap(v) 为零。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_139"},{"content":"力扣链接:1387. 将整数按权重排序\n力扣难度 中等\n算法评级: 6 深入理解并灵活应用数据结构和算法，理解高级数据结构\n难度分 1507\n题目：\n我们将整数 x 的 权重 定义为按照下述规则将 x 变成 1 所需要的步数：\n如果 x 是偶数，那么 x = x / 2 如果 x 是奇数，那么 x = 3 * x + 1 比方说，x=3 的权重为 7 。因为 3 需要 7 步变成 1 （3 \u0026ndash;\u0026gt; 10 \u0026ndash;\u0026gt; 5 \u0026ndash;\u0026gt; 16 \u0026ndash;\u0026gt; 8 \u0026ndash;\u0026gt; 4 \u0026ndash;\u0026gt; 2 \u0026ndash;\u0026gt; 1）。\n给你三个整数 lo， hi 和 k 。你的任务是将区间 [lo, hi] 之间的整数按照它们的权重 升序排序 ，如果大于等于 2 个整数有 相同 的权重，那么按照数字自身的数值 升序排序 。\n请你返回区间 [lo, hi] 之间的整数按权重排序后的第 k 个数。\n注意，题目保证对于任意整数 x （lo \u0026lt;= x \u0026lt;= hi） ，它变成 1 所需要的步数是一个 32 位有符号整数。\nfunc getKth(lo int, hi int, k int) int { } 🔑 答案解析： 👈点击 type num struct { data int weight int } type nlist []num // 设置权重 func (n *num) SetWeight() { for i := n.data; i != 1; n.weight++ { if i%2 == 0 { i = i / 2 } else { i = 3*i + 1 } } } func (n nlist) Len() int { return len(n) } func (n nlist) Less(i, j int) bool { if n[i].weight \u0026gt; n[j].weight || (n[i].weight == n[j].weight \u0026amp;\u0026amp; n[i].data \u0026gt; n[j].data) { return false } return true } func (n nlist) Swap(i, j int) { n[i], n[j] = n[j], n[i] } func getKth(lo int, hi int, k int) (ans int) { nums := make(nlist, hi-lo+1) // 记录走了多少步 for i := range nums { nums[i].data = i + lo nums[i].SetWeight() } // 排序 sort.Sort(nums) return nums[k-1].data } ","permalink":"https://loommii.github.io/posts/leetcode/data/1387_%E5%B0%86%E6%95%B4%E6%95%B0%E6%8C%89%E6%9D%83%E9%87%8D%E6%8E%92%E5%BA%8F/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/sort-integers-by-the-power-value/description/?envType=daily-question\u0026amp;envId=2024-12-22\"\u003e1387. 将整数按权重排序\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  6      深入理解并灵活应用数据结构和算法，理解高级数据结构\u003c/p\u003e\n\u003cp\u003e难度分 1507\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\u003c/p\u003e\n\u003cp\u003e我们将整数 x 的 权重 定义为按照下述规则将 x 变成 1 所需要的步数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果 x 是偶数，那么 x = x / 2\u003c/li\u003e\n\u003cli\u003e如果 x 是奇数，那么 x = 3 * x + 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e比方说，x=3 的权重为 7 。因为 3 需要 7 步变成 1 （3 \u0026ndash;\u0026gt; 10 \u0026ndash;\u0026gt; 5 \u0026ndash;\u0026gt; 16 \u0026ndash;\u0026gt; 8 \u0026ndash;\u0026gt; 4 \u0026ndash;\u0026gt; 2 \u0026ndash;\u0026gt; 1）。\u003c/p\u003e\n\u003cp\u003e给你三个整数 lo， hi 和 k 。你的任务是将区间 [lo, hi] 之间的整数按照它们的权重 升序排序 ，如果大于等于 2 个整数有 相同 的权重，那么按照数字自身的数值 升序排序 。\u003c/p\u003e","title":"1387_将整数按权重排序"},{"content":"下面这段代码输出什么？\nfunc main() { a := [2]int{5, 6} b := [3]int{5, 6} if a == b { fmt.Println(\u0026#34;equal\u0026#34;) } else { fmt.Println(\u0026#34;not equal\u0026#34;) } } A. compilation error B. equal C. not equal 🔑 答案解析： 在线运行 A [2]int 和 [3]int 在Go中是不同的类型 不能通过 == 运算符对比\n./prog.go:8:10: invalid operation: a == b (mismatched types [2]int and [3]int)\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_138/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;equal\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not equal\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. compilation error\u003c/li\u003e\n\u003cli\u003eB. equal\u003c/li\u003e\n\u003cli\u003eC. not equal\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e\u003ca href=\"https://go.dev/play/p/rNBNzx3dOUY\"\u003e在线运行\u003c/a\u003e\nA  [2]int 和 [3]int 在Go中是不同的类型 不能通过 == 运算符对比\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e./prog.go:8:10: invalid operation: a == b (mismatched types [2]int and [3]int)\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_138"},{"content":"力扣链接:2545. 根据第 K 场考试的分数排序\n力扣难度 中等\n算法评级: 3 理解常用数据结构和算法\n难度分 1294\n题目：\n班里有 m 位学生，共计划组织 n 场考试。给你一个下标从 0 开始、大小为 m x n 的整数矩阵 score ，其中每一行对应一位学生，而 score[i][j] 表示第 i 位学生在第 j 场考试取得的分数。矩阵 score 包含的整数 互不相同 。\n另给你一个整数 k 。请你按第 k 场考试分数从高到低完成对这些学生（矩阵中的行）的排序。\n返回排序后的矩阵。\n示例 1： 输入：score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2 输出：[[7,5,11,2],[10,6,9,1],[4,8,3,15]] 解释：在上图中，S 表示学生，E 表示考试。\n下标为 1 的学生在第 2 场考试取得的分数为 11 ，这是考试的最高分，所以 TA 需要排在第一。 下标为 0 的学生在第 2 场考试取得的分数为 9 ，这是考试的第二高分，所以 TA 需要排在第二。 下标为 2 的学生在第 2 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第三。 示例 2： 输入：score = [[3,4],[5,6]], k = 0 输出：[[5,6],[3,4]] 解释：在上图中，S 表示学生，E 表示考试。\n下标为 1 的学生在第 0 场考试取得的分数为 5 ，这是考试的最高分，所以 TA 需要排在第一。 下标为 0 的学生在第 0 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第二。 提示：\nm == score.length n == score[i].length 1 \u0026lt;= m, n \u0026lt;= 250 1 \u0026lt;= score[i][j] \u0026lt;= 105 score 由 不同 的整数组成 0 \u0026lt;= k \u0026lt; n func sortTheStudents(score [][]int, k int) [][]int { } 🔑 答案解析： 👈点击 func sortTheStudents(score [][]int, k int) [][]int { slices.SortFunc(score, func(a, b []int) int { return b[k] - a[k] }) return score } ","permalink":"https://loommii.github.io/posts/leetcode/data/2545_%E6%A0%B9%E6%8D%AE%E7%AC%ACk%E5%9C%BA%E8%80%83%E8%AF%95%E7%9A%84%E5%88%86%E6%95%B0%E6%8E%92%E5%BA%8F/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/sort-the-students-by-their-kth-score/description/?envType=daily-question\u0026amp;envId=2024-12-21\"\u003e2545. 根据第 K 场考试的分数排序\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  3      理解常用数据结构和算法\u003c/p\u003e\n\u003cp\u003e难度分 1294\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\u003c/p\u003e\n\u003cp\u003e班里有 m 位学生，共计划组织 n 场考试。给你一个下标从 0 开始、大小为 m x n 的整数矩阵 score ，其中每一行对应一位学生，而 score[i][j] 表示第 i 位学生在第 j 场考试取得的分数。矩阵 score 包含的整数 互不相同 。\u003c/p\u003e\n\u003cp\u003e另给你一个整数 k 。请你按第 k 场考试分数从高到低完成对这些学生（矩阵中的行）的排序。\u003c/p\u003e\n\u003cp\u003e返回排序后的矩阵。\u003c/p\u003e\n\u003cp\u003e示例 1：\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/2545_%E6%A0%B9%E6%8D%AE%E7%AC%ACk%E5%9C%BA%E8%80%83%E8%AF%95%E7%9A%84%E5%88%86%E6%95%B0%E6%8E%92%E5%BA%8F/image.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2\n输出：[[7,5,11,2],[10,6,9,1],[4,8,3,15]]\n解释：在上图中，S 表示学生，E 表示考试。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e下标为 1 的学生在第 2 场考试取得的分数为 11 ，这是考试的最高分，所以 TA 需要排在第一。\u003c/li\u003e\n\u003cli\u003e下标为 0 的学生在第 2 场考试取得的分数为 9 ，这是考试的第二高分，所以 TA 需要排在第二。\u003c/li\u003e\n\u003cli\u003e下标为 2 的学生在第 2 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第三。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/2545_%E6%A0%B9%E6%8D%AE%E7%AC%ACk%E5%9C%BA%E8%80%83%E8%AF%95%E7%9A%84%E5%88%86%E6%95%B0%E6%8E%92%E5%BA%8F/image-1.png\"\u003e\u003c/p\u003e","title":"2545_根据第K场考试的分数排序"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := [5]int{1, 2, 3, 4, 5} t := a[3:4:4] fmt.Println(t[0]) } A.3 B.4 C.compilation error 🔑 答案解析： B 在线运行\na 为 长度为 5的数组 元素为 1, 2, 3, 4, 5\nt := baseStr[low:high:max] low指定开始元素下标，high指定结束元素下标，max指定切片能增长到的元素下标\na[3:4:4] 的意思是 下标为3开始 到下标4结束 左闭右开 最大为到4下标 因此 t的内容为 4\na[3:4:4] // 4 a[3:4:5] // 4 a[3:4:6] // 错误 a 下标最大为4 开区间 所以能为最大为5 a[3:5:5] // [4 5]\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_137/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA.3\u003c/li\u003e\n\u003cli\u003eB.4\u003c/li\u003e\n\u003cli\u003eC.compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB \u003ca href=\"https://go.dev/play/p/z3KqBXFXMm3\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ea 为 长度为 5的数组 元素为 1, 2, 3, 4, 5\u003c/p\u003e\n\u003cp\u003et := baseStr[low:high:max]\nlow指定开始元素下标，high指定结束元素下标，max指定切片能增长到的元素下标\u003c/p\u003e\n\u003cp\u003ea[3:4:4] 的意思是 下标为3开始 到下标4结束 左闭右开 最大为到4下标\n因此 t的内容为 4\u003c/p\u003e\n\u003cp\u003ea[3:4:4]  // 4\na[3:4:5]  // 4\na[3:4:6]  // 错误 a 下标最大为4 开区间 所以能为最大为5\na[3:5:5]  // [4 5]\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_137"},{"content":"力扣链接:3138. 同位字符串连接的最小长度\n力扣难度 中等 算法评级: 5 熟练掌握常用数据结构和算法，初步了解高级数据结构 难度分 1979\n题目: 给你一个字符串 s ，它由某个字符串 t 和若干 t 的 同位字符串 连接而成。\n请你返回字符串 t 的 最小 可能长度。\n同位字符串 指的是重新排列一个单词得到的另外一个字符串，原来字符串中的每个字符在新字符串中都恰好只使用一次。\n示例 1：\n输入：s = \u0026ldquo;abba\u0026rdquo;\n输出：2\n解释：\n一个可能的字符串 t 为 \u0026ldquo;ba\u0026rdquo; 。\n示例 2：\n输入：s = \u0026ldquo;cdef\u0026rdquo;\n输出：4\n解释：\n一个可能的字符串 t 为 \u0026ldquo;cdef\u0026rdquo; ，注意 t 可能等于 s 。\n提示：\n1 \u0026lt;= s.length \u0026lt;= 105 s 只包含小写英文字母。 func minAnagramLength(s string) int { } 🧠思路: 👈点击 枚举 设 s字符串的长度为n,阅读题目可得提供的s一定是由 字符串 t构成的。(有确定的结)\n因此我们输出的结果可能是 n ~ 1,中的其中一个\n假设字符串的t的长度为k,k的长度为 1,2,3,4,5,n/2,n\n因此我们只要枚举字符串的t的长度为k，然后判断是否符合条件。\n题目要求请你返回字符串 t 的 最小 可能长度。因此从小到大遍历,符合条件就退出\n🔑 答案解析： 👈点击 func minAnagramLength(s string) int { n := len(s) k := 1 record := make(map[byte]int) for ; k \u0026lt;= n/2; k++ { record[s[k-1]]++ // // 到这里就要检测剩下的字符串 是否都是按照 长度 k 来划分了 // K = 1 时 剩下的字符串 为 n - 1 从下标k出发 { // 不能整除 一点机会都没有 if n%k != 0 { continue } } sig := 1 for i := k; i \u0026lt; n; i += k { // 这里面就是按照k去划分 back := copymap(record) // i 为k下标 加一 // 按照长度为k去划分 for j := 0; j \u0026lt; k; j++ { back[s[i+j]]-- } if checkmap(back) { // 存在不符合的 sig++ } } if k*sig == n { return k } } if k \u0026gt; n/2 { return n } return k } func copymap(in map[byte]int) map[byte]int { out := make(map[byte]int) for k, v := range in { out[k] = v } return out } func checkmap(in map[byte]int) bool { ans := true for _, v := range in { if v != 0 { return false } } return ans } 优化 都是小写字母储存 因此不用map 直接用长度为26的字母去存储\nfunc minAnagramLength(s string) int { n := len(s) record := [26]int{} for k := 1; k \u0026lt;= n/2; k++ { record[s[k-1]-\u0026#39;a\u0026#39;]++ // 到这里就要检测剩下的字符串 是否都是按照 长度 k 来划分了 // K = 1 时 剩下的字符串 为 n - 1 从下标k出发 { // 不能整除 一点机会都没有 if n%k != 0 { continue } } sig := 1 for i := k; i \u0026lt; n; i += k { // 这里面就是按照k去划分 back := record // i 为k下标 加一 // 按照长度为k去划分 for j := 0; j \u0026lt; k; j++ { back[s[i+j]-\u0026#39;a\u0026#39;]-- } if check(back) { // 存在不符合的 sig++ } } if k*sig == n { return k } } return n } func check(in [26]int) bool { ans := true for _, v := range in { if v != 0 { return false } } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/3138_%E5%90%8C%E4%BD%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%80%E5%B0%8F%E9%95%BF%E5%BA%A6/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/minimum-length-of-anagram-concatenation/description/?envType=daily-question\u0026amp;envId=2024-12-20\"\u003e3138. 同位字符串连接的最小长度\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\n算法评级: 5      熟练掌握常用数据结构和算法，初步了解高级数据结构\n难度分 1979\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个字符串 s ，它由某个字符串 t 和若干 t  的 同位字符串 连接而成。\u003c/p\u003e\n\u003cp\u003e请你返回字符串 t 的 最小 可能长度。\u003c/p\u003e\n\u003cp\u003e同位字符串 指的是重新排列一个单词得到的另外一个字符串，原来字符串中的每个字符在新字符串中都恰好只使用一次。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：s = \u0026ldquo;abba\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：2\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003cp\u003e一个可能的字符串 t 为 \u0026ldquo;ba\u0026rdquo; 。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：s = \u0026ldquo;cdef\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：4\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003cp\u003e一个可能的字符串 t 为 \u0026ldquo;cdef\u0026rdquo; ，注意 t 可能等于 s 。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 105\u003c/li\u003e\n\u003cli\u003es 只包含小写英文字母。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminAnagramLength\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🧠思路:  👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch1 id=\"枚举\"\u003e枚举\u003c/h1\u003e\n\u003cp\u003e设 s字符串的长度为n,阅读题目可得提供的s一定是由 字符串 t构成的。(有确定的结)\u003c/p\u003e","title":"3138_同位字符串连接的最小长度"},{"content":"以下代码能否通过编译？\npackage main import ( \u0026#34;fmt\u0026#34; ) type worker interface { work() } type person struct { name string worker } func main() { var w worker = person{} fmt.Println(w) } A: 能； B: 不能； C: 不知道 🔑 答案解析： 答: A 在线运行\n01 我们都知晓 Go 没有继承，但可以通过内嵌类型模拟部分继承的功能。大家要记住，接口也是类型，自然也将它作为嵌入类型。如果题目的 person 接口体改为：\ntype person struct { name string worker worker } 相信会有更多人答对，这和嵌入类型唯一的区别在于是否显示指定了字段名，其他并无区别。\n将接口作为嵌入类型可能让人感觉有些奇怪：那这个类型不是默认就实现了这个接口？！确实是这样的，所以才有了题目中这一句能编译通过：\nvar w worker = person{} 只不过，因为实例化 person 时，没有给 worker 指定值，因此 person 中的 worker 是 nil，调用它的话会报错，但编译是没问题的。\n02 有人可能要问，嵌入接口有实际用途吗？我找一个标准库中的例子。\n在 sort 包中，有一个接口：Interface\ntype Interface interface { // Len is the number of elements in the collection. Len() int // Less reports whether the element with // index i should sort before the element with index j. Less(i, j int) bool // Swap swaps the elements with indexes i and j. Swap(i, j int) } 这是用于排序的。还有另外一个结构体：reverse\ntype reverse struct { // This embedded Interface permits Reverse to use the methods of // another Interface implementation. Interface } 它就内嵌了一个 Interface，用于排序的反转。\n而内嵌接口的关键在于如何给这个内嵌的接口赋值。sort 包有一个函数：Reverse\nfunc Reverse(data Interface) Interface { return \u0026amp;reverse{data} } 其中实例化 reverse 时，直接通过传递的 Interface 实例赋值给 reverse 的内嵌接口，然后 reverse 类型可以有选择的重新实现内嵌的 Interface 的方法。比如 Less 方法：\nfunc (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) } 03 回到上面的题目，如果我们通过实例化的 w 调用 work 方法会报错：\nvar w worker = person{} w.work() 和上面 reverse 类似，你需要给 person 中的 worker 实例化，也就是需要一个实现了 worker 接口的类型实例。比如：\ntype student struct{ name string } func (s student) work() { fmt.Println(\u0026#34;I am \u0026#34;, s.name, \u0026#34;, I am learning\u0026#34;) } 然后这样实例化 person：\nvar w worker = person{worker: student{\u0026#34;polarisxu\u0026#34;}} 答案解析来自：https://polarisxu.studygolang.com/posts/go/action/weekly-question-analysis-embed-interface/\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_136/","summary":"\u003cp\u003e以下代码能否通过编译？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ework\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA: 能；\u003c/li\u003e\n\u003cli\u003eB: 不能；\u003c/li\u003e\n\u003cli\u003eC: 不知道\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答: A  \u003ca href=\"https://go.dev/play/p/RSSWTD3otlJ\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"01\"\u003e01\u003c/h2\u003e\n\u003cp\u003e我们都知晓 Go 没有继承，但可以通过内嵌类型模拟部分继承的功能。大家要记住，接口也是类型，自然也将它作为嵌入类型。如果题目的 person 接口体改为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e相信会有更多人答对，这和嵌入类型唯一的区别在于是否显示指定了字段名，其他并无区别。\u003c/p\u003e\n\u003cp\u003e将接口作为嵌入类型可能让人感觉有些奇怪：那这个类型不是默认就实现了这个接口？！确实是这样的，所以才有了题目中这一句能编译通过：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只不过，因为实例化 person 时，没有给 worker 指定值，因此 person 中的 worker 是 nil，调用它的话会报错，但编译是没问题的。\u003c/p\u003e\n\u003ch2 id=\"02\"\u003e02\u003c/h2\u003e\n\u003cp\u003e有人可能要问，嵌入接口有实际用途吗？我找一个标准库中的例子。\u003c/p\u003e\n\u003cp\u003e在 sort 包中，有一个接口：Interface\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInterface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Len is the number of elements in the collection.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Less reports whether the element with\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// index i should sort before the element with index j.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLess\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Swap swaps the elements with indexes i and j.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSwap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是用于排序的。还有另外一个结构体：reverse\u003c/p\u003e","title":"Go每日一题_136"},{"content":"G 协程的抽象\nGoroutine (go /ruːˈtiːn/ 谐音 Go 如 听) 经 Golang 优化后的特殊“协程”\nG限制 语言上无任何的限制,但是理论上会受到机器的内存限制,每个G创建时会占用4KB左右的内存空间\n注：Goroutine 创建所需申请的 2-4KB 是需要连续的内存块。\nM 系统线程的抽象\n在 Go 的并发模型中，G（Goroutine）是一个轻量级的执行单元，它需要通过系统线程（M）来执行。 每个 G 都会被映射到一个可用的 M 上，M 是操作系统层面的线程，负责实际的 CPU 执行。\nM限制 M 是可以通过runtime下的 debug包SetMaxThreads函数去设置的。默认值为10,000 个线程 官方文档\nSetMaxThreads 设置 Go 程序可以使用的操作系统线程的最大数量。如果程序尝试使用超过这个数量的线程，程序将崩溃。SetMaxThreads 返回之前的设置值。初始设置为 10,000 个线程。 ? 这个限制控制的是操作系统线程的数量，而不是 goroutine 的数量。只有当 goroutine 准备运行，但所有现有的线程都因系统调用、cgo 调用被阻塞，或者由于使用了 runtime.LockOSThread 被锁定给其他 goroutine 时，Go 程序才会创建一个新的线程。\nSetMaxThreads 主要用于限制那些创建无限数量线程的程序的影响。其目的是在程序把操作系统拖垮之前先把程序本身终止掉。\nP p即 processor，是 golang 中的调度器；\np 是 gmp 的中枢，借由 p 承上启下，实现 g 和 m 之间的动态有机结合；\nP限制 环境变量 GOMAXPROCS限制 可以通过 runtime.GOMAXPROCS() 来设定 P 的值， 默认值为CPU 的（逻辑核）核数 ","permalink":"https://loommii.github.io/posts/skill/data/go_gpm%E7%9A%84%E6%95%B0%E9%87%8F%E9%99%90%E5%88%B6/","summary":"\u003ch2 id=\"g\"\u003eG\u003c/h2\u003e\n\u003cp\u003e协程的抽象\u003c/p\u003e\n\u003cp\u003eGoroutine  (go /ruːˈtiːn/  谐音 Go 如 听) 经 Golang 优化后的特殊“协程”\u003c/p\u003e\n\u003ch3 id=\"g限制\"\u003eG限制\u003c/h3\u003e\n\u003cp\u003e语言上无任何的限制,但是理论上会受到机器的内存限制,每个G创建时会占用4KB左右的内存空间\u003c/p\u003e\n\u003cp\u003e注：Goroutine 创建所需申请的 2-4KB 是需要连续的内存块。\u003c/p\u003e\n\u003ch2 id=\"m\"\u003eM\u003c/h2\u003e\n\u003cp\u003e系统线程的抽象\u003c/p\u003e\n\u003cp\u003e在 Go 的并发模型中，G（Goroutine）是一个轻量级的执行单元，它需要通过系统线程（M）来执行。\n每个 G 都会被映射到一个可用的 M 上，M 是操作系统层面的线程，负责实际的 CPU 执行。\u003c/p\u003e\n\u003ch3 id=\"m限制\"\u003eM限制\u003c/h3\u003e\n\u003cp\u003eM 是可以通过runtime下的 debug包SetMaxThreads函数去设置的。默认值为10,000 个线程\n\u003ca href=\"https://pkg.go.dev/runtime/debug#SetMaxThreads\"\u003e官方文档\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSetMaxThreads 设置 Go 程序可以使用的操作系统线程的最大数量。如果程序尝试使用超过这个数量的线程，程序将崩溃。SetMaxThreads 返回之前的设置值。初始设置为 10,000 个线程。\n?\n这个限制控制的是操作系统线程的数量，而不是 goroutine 的数量。只有当 goroutine 准备运行，但所有现有的线程都因系统调用、cgo 调用被阻塞，或者由于使用了 runtime.LockOSThread 被锁定给其他 goroutine 时，Go 程序才会创建一个新的线程。\u003c/p\u003e\n\u003cp\u003eSetMaxThreads 主要用于限制那些创建无限数量线程的程序的影响。其目的是在程序把操作系统拖垮之前先把程序本身终止掉。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"p\"\u003eP\u003c/h2\u003e\n\u003cp\u003ep即 processor，是 golang 中的调度器；\u003c/p\u003e\n\u003cp\u003ep 是 gmp 的中枢，借由 p 承上启下，实现 g 和 m 之间的动态有机结合；\u003c/p\u003e","title":"Go: GPM的数量限制"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) type AutoGenerated struct { Age int `json:\u0026#34;age\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Child []int `json:\u0026#34;child\u0026#34;` } func main() { jsonStr1 := `{\u0026#34;age\u0026#34;: 14,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), \u0026amp;a) aa := a.Child fmt.Println(aa) jsonStr2 := `{\u0026#34;age\u0026#34;: 12,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[3,4,5,7,8,9]}` json.Unmarshal([]byte(jsonStr2), \u0026amp;a) fmt.Println(aa) } A：[1 2 3] [1 2 3] ； B：[1 2 3] [3 4 5]； C：[1 2 3] [3 4 5 6 7 8 9]； D：[1 2 3] [3 4 5 0 0 0] 🔑 答案解析： 答: B 在线运行\n解析: 如题中 2次打印的变量都是 aa 变量。\naa 切片的内容和 a.Child切片内容是一样的(指向同一个底层数组)\n问题一 为什么jsonStr2 Unmarshal 会修改到 aa 切片的内容? 问题二 为什么Unmarshal运行后aa 切片的内容不是3,4,5,7,8,9 上2个问题其实都可以在Go文档中得到答案\n官方(英文)https://pkg.go.dev/encoding/json#Unmarshal 为了将一个 JSON 数组反序列化为切片，Unmarshal 会将切片的长度重置为零，然后将每个元素依次 追加到切片中。作为一个特殊情况，当反序列化一个空的 JSON 数组时，Unmarshal 会用一个新的空切片替换原有的切片。\n也即是说,Go Json 库Unmarshal时 遇到切片的时候 本质上是\na.Child = a.Child[:0] a.Child = append(a.Child, 3) a.Child = append(a.Child, 4) a.Child = append(a.Child, 5) a.Child = append(a.Child, 6) a.Child = append(a.Child, 7) a.Child = append(a.Child, 8) a.Child = append(a.Child, 9) 在线运行\n问题一 由于aa和a.Child共用的是同一个底层数组,因此会互相影响\n问题二 但是append(a.Child, 6)时,a.Child触发了扩容机制。a.Child指向了一个新的底层地址,后续的append就不影响了\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_135/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAutoGenerated\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eAge\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e    \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;age\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;name\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eChild\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e  \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;child\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejsonStr1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;age\u0026#34;: 14,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[1,2,3]}`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAutoGenerated\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003ejsonStr1\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eaa\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChild\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaa\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejsonStr2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;age\u0026#34;: 12,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[3,4,5,7,8,9]}`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003ejsonStr2\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaa\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：[1 2 3] [1 2 3] ；\u003c/li\u003e\n\u003cli\u003eB：[1 2 3] [3 4 5]；\u003c/li\u003e\n\u003cli\u003eC：[1 2 3] [3 4 5 6 7 8 9]；\u003c/li\u003e\n\u003cli\u003eD：[1 2 3] [3 4 5 0 0 0]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答: B  \u003ca href=\"https://go.dev/play/p/BRdAwDKfZt4\"\u003e在线运行\u003c/a\u003e\u003c/p\u003e","title":"Go每日一题_135"},{"content":"力扣链接:3291. 形成目标字符串需要的最少字符串数 I\n力扣难度 中等\n算法评级: 6 深入理解并灵活应用数据结构和算法，理解高级数据结构\n难度分 2082\n题目: 给你一个字符串数组 words 和一个字符串 target。\n如果字符串 x 是 words 中 任意 字符串的 前缀 ，则认为 x 是一个 有效 字符串。\n现计划通过 连接 有效字符串形成 target ，请你计算并返回需要连接的 最少 字符串数量。如果无法通过这种方式形成 target，则返回 -1。\n示例 1：\n输入： words = [\u0026ldquo;abc\u0026rdquo;,\u0026ldquo;aaaaa\u0026rdquo;,\u0026ldquo;bcdef\u0026rdquo;], target = \u0026ldquo;aabcdabc\u0026rdquo;\n输出： 3\n解释：\ntarget 字符串可以通过连接以下有效字符串形成：\nwords[1] 的长度为 2 的前缀，即 \u0026ldquo;aa\u0026rdquo;。 words[2] 的长度为 3 的前缀，即 \u0026ldquo;bcd\u0026rdquo;。 words[0] 的长度为 3 的前缀，即 \u0026ldquo;abc\u0026rdquo;。 示例 2：\n输入： words = [\u0026ldquo;abababab\u0026rdquo;,\u0026ldquo;ab\u0026rdquo;], target = \u0026ldquo;ababaababa\u0026rdquo;\n输出： 2\n解释：\ntarget 字符串可以通过连接以下有效字符串形成：\nwords[0] 的长度为 5 的前缀，即 \u0026ldquo;ababa\u0026rdquo;。 words[0] 的长度为 5 的前缀，即 \u0026ldquo;ababa\u0026rdquo;。 示例 3：\n输入： words = [\u0026ldquo;abcdef\u0026rdquo;], target = \u0026ldquo;xyz\u0026rdquo;\n输出： -1\n提示：\n1 \u0026lt;= words.length \u0026lt;= 100 1 \u0026lt;= words[i].length \u0026lt;= 5 * 103 输入确保 sum(words[i].length) \u0026lt;= 105。 words[i] 只包含小写英文字母。 1 \u0026lt;= target.length \u0026lt;= 5 * 103 target 只包含小写英文字母。 func minValidStrings(words []string, target string) int { } 🧠思路: 👈点击 最少？ DP问题？\n尝试拆子问题\nXXXXABC XXXXAED\nEDFXXXX 假设我们已经匹配到这样了\n当前字符串下一个字符是否匹配 T -\u0026gt; 进入下一个循环\n当前字符串下一个字符是否匹配 F -\u0026gt; 选择字符串中第一个字符是否匹配 -T -\u0026gt; 进入下一个循环\n当前字符串下一个字符是否匹配 F -\u0026gt; 选择字符串中第一个字符是否匹配 -F -\u0026gt; 此路不通\n可以要同时匹配 当前字符串下一个字符是否匹配 和 选择字符串中第一个字符是否匹配 分2路走\n先尝试写递归 深度遍历？\n🔑 答案解析： 👈点击 递归(超时) func minValidStrings(words []string, target string) int { nT := len(target) var dfs func(int, int, int, int) int // 不通返回-1 通返回使用的字符串数 dfs = func(ni, nii, nTi, ansi int) int { if nTi == nT { // 已经到最后了 return ansi } ans1 := -1 if len(words[ni]) \u0026gt; nii \u0026amp;\u0026amp; words[ni][nii] == target[nTi] { // 当前字符串下一个字符是否匹配 ans := dfs(ni, nii+1, nTi+1, ansi) if ans != -1 \u0026amp;\u0026amp; ans1 == -1 { ans1 = ans } else if ans != -1 { ans1 = min(ans1, ans) } } for i, v := range words { if v[0] == target[nTi] { ans := dfs(i, 1, nTi+1, ansi+1) if ans != -1 \u0026amp;\u0026amp; ans1 == -1 { ans1 = ans } else if ans != -1 { ans1 = min(ans1, ans) } } } return ans1 } ans1 := -1 for i, v := range words { if v[0] == target[0] { ans := dfs(i, 1, 1, 1) if ans != -1 \u0026amp;\u0026amp; ans1 == -1 { ans1 = ans } else if ans != -1 { ans1 = min(ans1, ans) } } } return ans1 } 字符串哈希 + 二分 ","permalink":"https://loommii.github.io/posts/leetcode/data/3291_%E5%BD%A2%E6%88%90%E7%9B%AE%E6%A0%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E5%B0%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0_i/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-i/description/?envType=daily-question\u0026amp;envId=2024-12-17\"\u003e3291. 形成目标字符串需要的最少字符串数 I\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  6      深入理解并灵活应用数据结构和算法，理解高级数据结构\u003c/p\u003e\n\u003cp\u003e难度分 2082\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个字符串数组 words 和一个字符串 target。\u003c/p\u003e\n\u003cp\u003e如果字符串 x 是 words 中 任意 字符串的\n前缀\n，则认为 x 是一个 有效 字符串。\u003c/p\u003e\n\u003cp\u003e现计划通过 连接 有效字符串形成 target ，请你计算并返回需要连接的 最少 字符串数量。如果无法通过这种方式形成 target，则返回 -1。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入： words = [\u0026ldquo;abc\u0026rdquo;,\u0026ldquo;aaaaa\u0026rdquo;,\u0026ldquo;bcdef\u0026rdquo;], target = \u0026ldquo;aabcdabc\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出： 3\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003cp\u003etarget 字符串可以通过连接以下有效字符串形成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ewords[1] 的长度为 2 的前缀，即 \u0026ldquo;aa\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003ewords[2] 的长度为 3 的前缀，即 \u0026ldquo;bcd\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003ewords[0] 的长度为 3 的前缀，即 \u0026ldquo;abc\u0026rdquo;。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入： words = [\u0026ldquo;abababab\u0026rdquo;,\u0026ldquo;ab\u0026rdquo;], target = \u0026ldquo;ababaababa\u0026rdquo;\u003c/p\u003e","title":"3291_形成目标字符串需要的最少字符串数_I"},{"content":"下面这段代码输出什么？\nfunc main() { a := 5 b := 8.1 fmt.Println(a + b) } A.13.1 B.13 C.compilation error 🔑 答案解析： 答 C 在线运行:https://go.dev/play/p/VDTgpXoukTb\n在Go中，变量之间没有隐式类型转换。但是，编译器可以进行变量和常量之间的隐式类型转换\n题目中 a为 int变量 b为 float64变量\\\n不同类型不能使用 + 运算符\n常量之间的隐式类型转换\nfunc main() { const a = 5 const b = 8.1 fmt.Println(a + b) // 13.1 } 在线运行 ：https://go.dev/play/p/4KXch9jes-y\n类型的优先级为： 整数(int)\u0026lt;符文数(rune)\u0026lt;浮点数(float)\u0026lt;复数(Imag)\nfunc main() { a := 5 const b = 8.1 fmt.Println(a + b) // 报错 } 在线运行：https://go.dev/play/p/sIINDSsakdz 变量A int 变量b不能被推断为int\nfunc main() { const a = 5 b := 8.1 fmt.Println(a + b) // 13.1 } 在线运行：https://go.dev/play/p/JNhNXc1OErN\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_134/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA.13.1\u003c/li\u003e\n\u003cli\u003eB.13\u003c/li\u003e\n\u003cli\u003eC.compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 C 在线运行:\u003ca href=\"https://go.dev/play/p/VDTgpXoukTb\"\u003ehttps://go.dev/play/p/VDTgpXoukTb\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在Go中，变量之间没有隐式类型转换。但是，编译器可以进行变量和常量之间的隐式类型转换\u003c/p\u003e\n\u003cp\u003e题目中 a为 int变量 b为 float64变量\\\u003c/p\u003e\n\u003cp\u003e不同类型不能使用 + 运算符\u003c/p\u003e\n\u003cp\u003e常量之间的隐式类型转换\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e8.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 13.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在线运行 ：\u003ca href=\"https://go.dev/play/p/4KXch9jes-y\"\u003ehttps://go.dev/play/p/4KXch9jes-y\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e类型的优先级为： 整数(int)\u0026lt;符文数(rune)\u0026lt;浮点数(float)\u0026lt;复数(Imag)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e8.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 报错\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在线运行：\u003ca href=\"https://go.dev/play/p/sIINDSsakdz\"\u003ehttps://go.dev/play/p/sIINDSsakdz\u003c/a\u003e\n变量A int 变量b不能被推断为int\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 13.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在线运行：\u003ca href=\"https://go.dev/play/p/JNhNXc1OErN\"\u003ehttps://go.dev/play/p/JNhNXc1OErN\u003c/a\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_134"},{"content":"结论 并发读安全，并发写不安全\n原因 // map(集合)底层结构 type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. // Make sure this stays in sync with the compiler\u0026#39;s definition. count int // # live cells == size of map. Must be first (used by len() builtin) flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details hash0 uint32 // hash seed buckets unsafe.Pointer // array of 2^B Buckets. may be nil if count==0. oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing nevacuate uintptr // progress counter for evacuation (buckets less than this have been evacuated) clearSeq uint64 extra *mapextra // optional fields } // buckets的结构 type bmap struct { topbits [8]uint8 keys [8]keytype values [8]valuetype pad uintptr overflow uintptr } 从上方结构可以知道底层结构中存buckets和oldbuckets。发生扩容的时候。会New一个新的buckets地址,并将老的buckets地址写入到oldbuckets中。\n可能发生的场景\n如果当2个写请求同时触发了扩容,这时候就new了2个新的buckets地址，buckets地址只有一个赋值成功,导致写入内容丢失。 这里有一片篇官方的QA https://go.dev/doc/faq#atomic_maps\n经过长时间的讨论，决定认为大多数情况下使用 map 不需要在多个 goroutine 中进行安全访问，只有在确实需要时，map 可能是某个更大的数据结构或计算的一部分，且该数据结构已经进行了同步。因此，如果每次 map 操作都需要获取互斥锁，会降低大多数程序的性能，并且只会在极少数情况下增加安全性。然而，这个决定并不容易做出，因为它意味着不受控制的 map 访问可能会导致程序崩溃。 语言本身并不排除原子性的 map 更新。在需要的情况下，例如在托管不受信任的程序时，实施可能会对 map 访问进行互锁。 只有在进行更新时，map 访问才是不安全的。只要所有 goroutine 仅仅是读取——例如查找 map 中的元素，包括通过 for range 循环迭代 map——并且没有通过赋值修改元素或进行删除操作，那么它们可以在不进行同步的情况下安全地并发访问 map。 作为对正确使用 map 的帮助，某些语言实现包含一个特殊检查，会在运行时自动报告当 map 被并发执行不安全地修改时的情况。此外，sync 库中有一个类型叫 sync.Map，它适用于某些使用模式，例如静态缓存，虽然它不适合作为内建 map 类型的一般替代品。 概况: 只有在进行更新时，map 访问才是不安全的,程序运行时会自动检测发执行不安全地修改时的情况。需要并发修改请用sync.Map\n","permalink":"https://loommii.github.io/posts/skill/data/go_map%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/","summary":"\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e并发读安全，并发写不安全\u003c/p\u003e\n\u003ch2 id=\"原因\"\u003e原因\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// map(集合)底层结构\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehmap\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Make sure this stays in sync with the compiler\u0026#39;s definition.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// # live cells == size of map.  Must be first (used by len() builtin)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eflags\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// log_2 of # of buckets (can hold up to loadFactor * 2^B items)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enoverflow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint16\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// approximate number of overflow buckets; see incrnoverflow for details\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehash0\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003euint32\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// hash seed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebuckets\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// array of 2^B Buckets. may be nil if count==0.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eoldbuckets\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// previous bucket array of half the size, non-nil only when growing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enevacuate\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// progress counter for evacuation (buckets less than this have been evacuated)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclearSeq\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextra\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emapextra\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// optional fields\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// buckets的结构\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebmap\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etopbits\u003c/span\u003e  [\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ekeys\u003c/span\u003e     [\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003ekeytype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e   [\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003evaluetype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003epad\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eoverflow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从上方结构可以知道底层结构中存buckets和oldbuckets。发生扩容的时候。会New一个新的buckets地址,并将老的buckets地址写入到oldbuckets中。\u003c/p\u003e","title":"Go: Map 是并发安全的吗？"},{"content":"底层结构 // map(集合) type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. // Make sure this stays in sync with the compiler\u0026#39;s definition. count int // # live cells == size of map. Must be first (used by len() builtin) flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details hash0 uint32 // hash seed buckets unsafe.Pointer // array of 2^B Buckets. may be nil if count==0. oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing nevacuate uintptr // progress counter for evacuation (buckets less than this have been evacuated) clearSeq uint64 extra *mapextra // optional fields } // buckets的结构 type bmap struct { topbits [8]uint8 keys [8]keytype values [8]valuetype pad uintptr overflow uintptr } 解释 Map中的数据存储在buckets和oldbuckets中,在发生扩容时,会创建新的buckets,并将老的buckets地址写入到oldbuckets中。\n因此发生扩容后,存储数据会发生改变\n疑问：那不发生扩容的情况下，我们遍历map为什么输出的顺序都不一致呢？ 这是特意去设计的，Go在range遍历Map中元素的时候，从随机的一个位置开始迭代。\n在Go1.0后的版本，Go遍历加入了随机数,输出的顺序将无序 源码链接：https://github.com/golang/go/blob/18b5435fc84225ca303da7a110c7e8065dc4bbda/src/runtime/map_noswiss.go#L912\nfunc mapiterinit(t *maptype, h *hmap, it *hiter) { // ... // decide where to start r := uintptr(rand()) // ... } ","permalink":"https://loommii.github.io/posts/skill/data/go_%E4%B8%BA%E4%BB%80%E4%B9%88map%E6%98%AF%E6%97%A0%E5%BA%8F%E7%9A%84/","summary":"\u003ch3 id=\"底层结构\"\u003e底层结构\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// map(集合)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehmap\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Make sure this stays in sync with the compiler\u0026#39;s definition.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// # live cells == size of map.  Must be first (used by len() builtin)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eflags\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// log_2 of # of buckets (can hold up to loadFactor * 2^B items)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enoverflow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint16\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// approximate number of overflow buckets; see incrnoverflow for details\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehash0\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003euint32\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// hash seed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebuckets\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// array of 2^B Buckets. may be nil if count==0.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eoldbuckets\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// previous bucket array of half the size, non-nil only when growing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enevacuate\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// progress counter for evacuation (buckets less than this have been evacuated)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclearSeq\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextra\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emapextra\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// optional fields\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// buckets的结构\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebmap\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etopbits\u003c/span\u003e  [\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ekeys\u003c/span\u003e     [\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003ekeytype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e   [\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003evaluetype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003epad\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eoverflow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解释\"\u003e解释\u003c/h3\u003e\n\u003cp\u003eMap中的数据存储在buckets和oldbuckets中,在发生扩容时,会创建新的buckets,并将老的buckets地址写入到oldbuckets中。\u003c/p\u003e","title":"Go: 为什么Map是无序的"},{"content":"底层结构 // slice(切片) type SliceHeader struct { Data uintptr // 底层数组的地址 Len int // 长度 Cap int // 容量 } // map(集合) type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. // Make sure this stays in sync with the compiler\u0026#39;s definition. count int // # live cells == size of map. Must be first (used by len() builtin) flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details hash0 uint32 // hash seed buckets unsafe.Pointer // array of 2^B Buckets. may be nil if count==0. oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing nevacuate uintptr // progress counter for evacuation (buckets less than this have been evacuated) clearSeq uint64 extra *mapextra // optional fields } 这2个类型都属于引用类型,特点是存储的是一个地址,且零值为nil\n通过上面代码你会发现底层结构都存在指向其他空间的地址\nslice(切片) Data指向底层数组 map(集合) buckets存储桶 oldbuckets旧的存储桶 mapextra 保存溢出桶的链表和未使用的溢出桶数组的首地址 因此如果为初始化的情况下。指向的地址为nil。\nslice(切片) 未初始化读取 指定下标\n这时候slice长度和空间都为0,如果通过下标的形式读取会panic。越界了\nfor range\n无内容,不会发生panic https://go.dev/play/p/PlQgXmM7MKe\n未初始化写入 指定下标\n这时候slice长度和空间都为0,如果通过下标的形式写会panic。越界了\nappend\n不会发生panic,可以正常写入 https://go.dev/play/p/wo6M-xCZ6XW\nmap(集合) 未初始化读取\n指定Key值\n不会发生panic,读取到的为0值 https://go.dev/play/p/Fjd67YLcHj4\nfor range\n不会发生panic,无内容 https://go.dev/play/p/h6U7522hWBv\n未初始化写入\n发生panic,panic: assignment to entry in nil map https://go.dev/play/p/S8xUziyKnLa\n未初始化删除\n不会发生panic,https://go.dev/play/p/Be3SgjevDlA\n为什么未初始化Map写入会panic 而slice(切片不会) slice在添加的时候使用的是append,写入的时候会判断是否超过容量,超过就发生扩容。扩容后的数组地址就不为之前的nil map也有扩容机制为什么还是会panic func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer { if h == nil { panic(plainError(\u0026#34;assignment to entry in nil map\u0026#34;)) } // 省略细节 } make map的时候 会设置hash0哈希因子,若未初始化hash0就为0。操作的时候会除以hash0 。/0 是不被允许的\n如何避免 引入单元测试,这种未初始化操作导致的panic异常是可预见的,因在项目开发中加入单元测试。 recover恢复panic ","permalink":"https://loommii.github.io/posts/skill/data/go_map_slice%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E4%BC%9A%E6%80%8E%E6%A0%B7/","summary":"\u003ch2 id=\"底层结构\"\u003e底层结构\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// slice(切片)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSliceHeader\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eData\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 底层数组的地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// 长度\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eCap\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// 容量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// map(集合)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehmap\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Make sure this stays in sync with the compiler\u0026#39;s definition.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// # live cells == size of map.  Must be first (used by len() builtin)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eflags\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// log_2 of # of buckets (can hold up to loadFactor * 2^B items)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enoverflow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint16\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// approximate number of overflow buckets; see incrnoverflow for details\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehash0\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003euint32\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// hash seed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebuckets\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// array of 2^B Buckets. may be nil if count==0.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eoldbuckets\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// previous bucket array of half the size, non-nil only when growing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enevacuate\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// progress counter for evacuation (buckets less than this have been evacuated)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclearSeq\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextra\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emapextra\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// optional fields\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这2个类型都属于引用类型,特点是存储的是一个地址,且零值为nil\u003c/p\u003e","title":"Go: slice(切片) 和 map(集合) 未初始化操作会怎样"},{"content":"底层结构 array(数组) Go数组与C数组十分类似，数组是具有相同唯一类型的一组已编号且长度固定的数据项序列\n关键字: 相同类型,长度固定，序列\nslice(切片) type SliceHeader struct { Data uintptr // 底层数组的地址 Len int // 长度 Cap int // 容量 } Go 语言切片是对数组的抽象。结构中包含底层数组、长度、容量\n初始化 array(数组) var numbers [5]int // 声明长度为5的数组,数组内容全为默认零值,int的零值为0 var numbers = [5]int{1, 2, 3, 4, 5} // 声明长度为5的数组,数组内容全为{}内的值。 [1 2 3 4 5] numbers := [5]int{1, 2, 3}// 声明长度为5的数组,数组内容全为{}内的值,少的部分为默认零值。 [1 2 3 0 0] numbers := [5]int{1, 2, 3, 4, 5, 6}// 由于{}内的值超过了数组超度编译不通过 numbers := [...]int{1, 2, 3, 4, 5, 6}// 如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度 numbers := [...]int{1:1}// 如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度 numbers := [...]int{5: 1, 2, 3, 1: 11} // 5: 1, 2, 3 表示 在下标5开始 值为1,2,3 // 1: 11 表示 在下标1开始 值为11 // [0 11 0 0 0 1 2 3] slice(切片) s :=[] int {1,2,3} // 声明长度为3,容量为3的切片,内容是[1 2 3] numbers := []int{5: 1, 2, 3, 1: 11} // 5: 1, 2, 3 表示 在下标5开始 值为1,2,3 // 1: 11 表示 在下标1开始 值为11 // [0 11 0 0 0 1 2 3] 使用 make() 函数来创建切片\ns := make([]T, length, capacity) // T 是类型 length是长度 capacity是容量 s := make([]T, capacity) // T 是类型 capacity是容量和长度 s := make([]int, 3, 4) // 声明长度为3,容量为4的切片,内容是[0 0 0] s := make([]int, 4) // 声明长度为4,容量为4的切片,内容是[0 0 0 0] s := make([]int, 4, 3) // 容量小于长度编译不通过 判断是否相等 array(数组) 关系运算符 == : 相同长度和类型的数组可以使用 == 对比 [2]int{1, 2} == [2]int{1, 2} // true [3]int{1, 2} == [2]int{1, 2} // 编译不通过,[3]int与[2]int是不同类型 使用reflect(反射)判断是否相等 reflect.DeepEqual([2]int{1, 2}, [2]int{1, 2}) slice(切片) 关系运算符 == : 切片只允许和nil对比 []int{1, 2} == []int{1, 2} // 编译不通过,切片只允许和nil对比 []int{} == nil // false,这里判断的是底层数组地址是否为nil var a []int a == nil // true,这里a只声明了但是未初始化 使用reflect(反射)判断是否相等 reflect.DeepEqual([]int{1, 2}, []int{1, 2, 0}) 扩容 array(数组) 数组是长度固定,是不允许扩容的\nslice(切片) slice(切片)可以使用append向后追加元素,如果追加后超过了容量上限会发生扩容\n若切片发生扩容时，会开启一个新的数组空间，并将原数组的值拷贝到新数组上\n若目标空间大于原空间的2倍，新空间等于目标空间 若目标空间小于1024，新空间等于原空间2倍 若目标空间大于1024，则进入循环，每次循环原空间的大小变为1.25倍。直到装的下 在1.17以后的扩容有变化，目的是更加平滑 总结 初始化的区别 Slice切片使用make初始化 判断的区别 关系运算符 == : 切片只允许和nil对比 扩容的区别 切片允许扩容 ","permalink":"https://loommii.github.io/posts/skill/data/go_slice%E5%92%8Carray%E7%9A%84%E5%8C%BA%E5%88%AB/","summary":"\u003ch2 id=\"底层结构\"\u003e底层结构\u003c/h2\u003e\n\u003ch3 id=\"array数组\"\u003earray(数组)\u003c/h3\u003e\n\u003cp\u003eGo数组与C数组十分类似，数组是具有相同唯一类型的一组已编号且长度固定的数据项序列\u003c/p\u003e\n\u003cp\u003e关键字: 相同类型,长度固定，序列\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/skill/data/go_slice%E5%92%8Carray%E7%9A%84%E5%8C%BA%E5%88%AB/image.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"slice切片\"\u003eslice(切片)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSliceHeader\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eData\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 底层数组的地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// 长度\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eCap\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// 容量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGo 语言切片是对数组的抽象。结构中包含底层数组、长度、容量\u003c/p\u003e\n\u003ch2 id=\"初始化\"\u003e初始化\u003c/h2\u003e\n\u003ch3 id=\"array数组-1\"\u003earray(数组)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 声明长度为5的数组,数组内容全为默认零值,int的零值为0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e = [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e} \u003cspan style=\"color:#75715e\"\u003e// 声明长度为5的数组,数组内容全为{}内的值。 [1 2 3 4 5]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\u003cspan style=\"color:#75715e\"\u003e// 声明长度为5的数组,数组内容全为{}内的值,少的部分为默认零值。 [1 2 3 0 0]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e}\u003cspan style=\"color:#75715e\"\u003e// 由于{}内的值超过了数组超度编译不通过\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e}\u003cspan style=\"color:#75715e\"\u003e// 如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}\u003cspan style=\"color:#75715e\"\u003e// 如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  5: 1, 2, 3 表示 在下标5开始 值为1,2,3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  1: 11 表示 在下标1开始 值为11\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  [0 11 0 0 0 1 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"slice切片-1\"\u003eslice(切片)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e[] \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e} \u003cspan style=\"color:#75715e\"\u003e// 声明长度为3,容量为3的切片,内容是[1 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  5: 1, 2, 3 表示 在下标5开始 值为1,2,3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  1: 11 表示 在下标1开始 值为11\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//  [0 11 0 0 0 1 2 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 make() 函数来创建切片\u003c/p\u003e","title":"Go: slice(切片) 和array(数组) 的区别"},{"content":"力扣链接:1847. 最近的房间\n力扣难度 困难\n算法评级: 8 掌握不同的数据结构与算法之间的关联性，处理复杂问题，掌握高级数据结构\n难度分 2082\n题目：\n一个酒店里有 n 个房间，这些房间用二维整数数组 rooms 表示，其中 rooms[i] = [roomIdi, sizei] 表示有一个房间号为 roomIdi 的房间且它的面积为 sizei 。每一个房间号 roomIdi 保证是 独一无二 的。\n同时给你 k 个查询，用二维数组 queries 表示，其中 queries[j] = [preferredj, minSizej] 。第 j 个查询的答案是满足如下条件的房间 id ：\n房间的面积 至少 为 minSizej ，且abs(id - preferredj) 的值 最小 ，其中 abs(x) 是 x 的绝对值。 如果差的绝对值有 相等 的，选择 最小 的 id 。如果 没有满足条件的房间 ，答案为 -1 。\n请你返回长度为 k 的数组 answer ，其中 answer[j] 为第 j 个查询的结果。\n示例 1：\n输入：rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]\n输出：[3,-1,3]\n解释：查询的答案如下：\n查询 [3,1] ：房间 3 的面积为 2 ，大于等于 1 ，且号码是最接近 3 的，为 abs(3 - 3) = 0 ，所以答案为 3 。\n查询 [3,3] ：没有房间的面积至少为 3 ，所以答案为 -1 。\n查询 [5,2] ：房间 3 的面积为 2 ，大于等于 2 ，且号码是最接近 5 的，为 abs(3 - 5) = 2 ，所以答案为 3 。\n示例 2：\n输入：rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]\n输出：[2,1,3]\n解释：查询的答案如下：\n查询 [2,3] ：房间 2 的面积为 3 ，大于等于 3 ，且号码是最接近的，为 abs(2 - 2) = 0 ，所以答案为 2 。\n查询 [2,4] ：房间 1 和 3 的面积都至少为 4 ，答案为 1 因为它房间编号更小。\n查询 [2,5] ：房间 3 是唯一面积大于等于 5 的，所以答案为 3 。\n提示：\nn == rooms.length 1 \u0026lt;= n \u0026lt;= 105 k == queries.length 1 \u0026lt;= k \u0026lt;= 104 1 \u0026lt;= roomIdi, preferredj \u0026lt;= 107 1 \u0026lt;= sizei, minSizej \u0026lt;= 107 func closestRoom(rooms [][]int, queries [][]int) []int { } 🧠思路: 👈点击 先将rooms排序,从大到小。例如我们找面积大于等于4的数组就不用全部遍历，而是有退出条件 遍历需求queries，如果符合条件就对比ID绝对值。 🔑 答案解析： 👈点击 const maxPreferred = 1_000_0000 + 1 func closestRoom(rooms [][]int, queries [][]int) []int { // 从大到小 排序 slices.SortFunc(rooms, func(i, k []int) int { return k[1] - i[1] }) n := len(queries) ans := make([]int, n) for ansI, q := range queries { // _ = q[0] // id // _ = q[1] // 最小面积 minID := maxPreferred // 这里记录最小的ID差值 for i := 0; i \u0026lt; len(rooms) \u0026amp;\u0026amp; rooms[i][1] \u0026gt;= q[1]; i++ { // rooms[i][0] = 房间ID // rooms[i][1] = 房间面积 idGap := abs(rooms[i][0] - q[0]) if minID \u0026gt; idGap { minID = idGap ans[ansI] = rooms[i][0] } else if minID == idGap { // 如果差相同 选小的ID ans[ansI] = min(ans[ansI], rooms[i][0]) } } if minID == maxPreferred { ans[ansI] = -1 // 默认为-1 } } return ans } func abs(a int) int { if a \u0026lt; 0 { return -a } return a } ","permalink":"https://loommii.github.io/posts/leetcode/data/1847_%E6%9C%80%E8%BF%91%E7%9A%84%E6%88%BF%E9%97%B4/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/closest-room/description/?envType=daily-question\u0026amp;envId=2024-12-16\"\u003e1847. 最近的房间\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e困难\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级: 8      掌握不同的数据结构与算法之间的关联性，处理复杂问题，掌握高级数据结构\u003c/p\u003e\n\u003cp\u003e难度分 2082\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e题目：\u003c/p\u003e\n\u003cp\u003e一个酒店里有 n 个房间，这些房间用二维整数数组 rooms 表示，其中 rooms[i] = [roomIdi, sizei] 表示有一个房间号为 roomIdi 的房间且它的面积为 sizei 。每一个房间号 roomIdi 保证是 独一无二 的。\u003c/p\u003e\n\u003cp\u003e同时给你 k 个查询，用二维数组 queries 表示，其中 queries[j] = [preferredj, minSizej] 。第 j 个查询的答案是满足如下条件的房间 id ：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e房间的面积 至少 为 minSizej ，且abs(id - preferredj) 的值 最小 ，其中 abs(x) 是 x 的绝对值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果差的绝对值有 相等 的，选择 最小 的 id 。如果 没有满足条件的房间 ，答案为 -1 。\u003c/p\u003e\n\u003cp\u003e请你返回长度为 k 的数组 answer ，其中 answer[j] 为第 j 个查询的结果。\u003c/p\u003e","title":"1847_最近的房间"},{"content":"下面这段代码输出什么？\nfunc hello(num ...int) { num[0] = 18 } func main() { i := []int{5, 6, 7} hello(i...) fmt.Println(i[0]) } A.18 B.5 C.Compilation error\n🔑 答案解析： 答 18\nGo参数go只有值传递,函数调用每次都会创建一个新的副本，副本的值=原来的值。 \u0026hellip;int 本质上是个切片。切片的结构是 cap lan 底层数组指针\n因此 num ...int 和 i... 的值内容是相同的。但是变量地址是不通的。\n题目中没有触发扩容，因此2个切片指向同一个底层数组，因此num[0] = 18 会影响到外面的 i[0]\n在线运行：\n本题: https://go.dev/play/p/ne8bmUzhqsN\nnum触发扩容后修改: https://go.dev/play/p/Y3BhAEj3CjL\ncopy深拷贝切片: https://go.dev/play/p/QZwRA6jL48z\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_133/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA.18\nB.5\nC.Compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 18\u003c/p\u003e\n\u003cp\u003eGo参数go只有值传递,函数调用每次都会创建一个新的副本，副本的值=原来的值。\n\u0026hellip;int 本质上是个切片。切片的结构是 \u003ccode\u003ecap lan 底层数组指针\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e因此 \u003ccode\u003enum ...int\u003c/code\u003e 和 \u003ccode\u003ei...\u003c/code\u003e 的值内容是相同的。但是变量地址是不通的。\u003c/p\u003e\n\u003cp\u003e题目中没有触发扩容，因此2个切片指向同一个底层数组，因此num[0] = 18 会影响到外面的 i[0]\u003c/p\u003e\n\u003cp\u003e在线运行：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本题: \u003ca href=\"https://go.dev/play/p/ne8bmUzhqsN\"\u003ehttps://go.dev/play/p/ne8bmUzhqsN\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003enum触发扩容后修改: \u003ca href=\"https://go.dev/play/p/Y3BhAEj3CjL\"\u003ehttps://go.dev/play/p/Y3BhAEj3CjL\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ecopy深拷贝切片: \u003ca href=\"https://go.dev/play/p/QZwRA6jL48z\"\u003ehttps://go.dev/play/p/QZwRA6jL48z\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_133"},{"content":"力扣链接:1338. 数组大小减半\n力扣难度 中等\n算法评级: 3 理解常用数据结构和算法\n难度分 1303\n题目: 给你一个整数数组 arr。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。\n返回 至少 能删除数组中的一半整数的整数集合的最小大小\n示例 1：\n输入：arr = [3,3,3,3,5,5,5,2,2,7] 输出：2 解释：选择 {3,7} 使得结果数组为 [5,5,5,2,2]、长度为 5（原数组长度的一半）。 大小为 2 的可行集合有 {3,5},{3,2},{5,2}。 选择 {2,7} 是不可行的，它的结果数组为 [3,3,3,3,5,5,5]，新数组长度大于原数组的二分之一。\n示例 2：\n输入：arr = [7,7,7,7,7,7] 输出：1 解释：我们只能选择集合 {7}，结果数组为空。\n提示：\n1 \u0026lt;= arr.length \u0026lt;= 105 arr.length 为偶数 1 \u0026lt;= arr[i] \u0026lt;= 105 func minSetSize(arr []int) int { } 🧠思路: 👈点击 猜想 贪心的想法，先遍历一遍记录出现次数。从频率最高的开始删除 问题就变为了怎么记录次数后从大到小排序方便\n🔑 答案解析： 👈点击 type pair struct{ x, c int } // 值 和 次数 type hp []pair func (h hp) Len() int { return len(h) } func (h hp) Less(i, j int) bool { // 如果h[i]\u0026lt;h[j]生成的就是小根堆，如果h[i]\u0026gt;h[j]生成的就是大根堆 return h[i].c \u0026gt; h[j].c // 大顶堆 } func (h hp) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *hp) Push(x any) { *h = append(*h, x.(pair)) } func (h *hp) Pop() any { old := *h n := len(old) x := old[n-1] *h = old[0 : n-1] return x } func minSetSize(arr []int) int { n := len(arr) CountMap := make(map[int]int) for _, v := range arr { CountMap[v]++ } var h hp = make(hp, 0, len(CountMap)) for x, c := range CountMap { h = append(h, pair{x, c}) } heap.Init(\u0026amp;h) // 堆初始化 ans := 0 for i := 0; i \u0026lt; n/2; { p := heap.Pop(\u0026amp;h).(pair) ans++ i += p.c } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/1338_%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%8D%8A/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/reduce-array-size-to-the-half/description/?envType=daily-question\u0026amp;envId=2024-12-15\"\u003e1338. 数组大小减半\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级: 3      理解常用数据结构和算法\u003c/p\u003e\n\u003cp\u003e难度分 1303\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个整数数组 arr。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。\u003c/p\u003e\n\u003cp\u003e返回 至少 能删除数组中的一半整数的整数集合的最小大小\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：arr = [3,3,3,3,5,5,5,2,2,7]\n输出：2\n解释：选择 {3,7} 使得结果数组为 [5,5,5,2,2]、长度为 5（原数组长度的一半）。\n大小为 2 的可行集合有 {3,5},{3,2},{5,2}。\n选择 {2,7} 是不可行的，它的结果数组为 [3,3,3,3,5,5,5]，新数组长度大于原数组的二分之一。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：arr = [7,7,7,7,7,7]\n输出：1\n解释：我们只能选择集合 {7}，结果数组为空。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= arr.length \u0026lt;= 105\u003c/li\u003e\n\u003cli\u003earr.length 为偶数\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= arr[i] \u0026lt;= 105\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminSetSize\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🧠思路:  👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch3 id=\"猜想\"\u003e猜想\u003c/h3\u003e\n\u003cp\u003e贪心的想法，先遍历一遍记录出现次数。从频率最高的开始删除\n问题就变为了怎么记录次数后从大到小排序方便\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\n\u003chr\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析： 👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epair\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e } \u003cspan style=\"color:#75715e\"\u003e// 值 和 次数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003epair\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eLess\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 如果h[i]\u0026lt;h[j]生成的就是小根堆，如果h[i]\u0026gt;h[j]生成的就是大根堆\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 大顶堆\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eSwap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) { \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ePush\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e = append(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003epair\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ePop\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eold\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003eold\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eold\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eold\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e : \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminSetSize\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eCountMap\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003earr\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eCountMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e = make(\u003cspan style=\"color:#a6e22e\"\u003ehp\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003eCountMap\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCountMap\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epair\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eheap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInit\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 堆初始化\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePop\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e).(\u003cspan style=\"color:#a6e22e\"\u003epair\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"1338_数组大小减半"},{"content":"下面这段代码输出什么？\ntype person struct { name string } func main() { var m map[person]int p := person{\u0026#34;mike\u0026#34;} fmt.Println(m[p]) } 🔑 答案解析： 答 0\n未初始化的map 读0值 写panic\n在线运行：\n读未初始化的map: https://go.dev/play/p/yVjXasOREaH\n写未初始化的map: https://go.dev/play/p/2zmJGtrH-8v\n写已初始化的map: https://go.dev/play/p/eUh6csag8rh\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_132/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mike\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 0\u003c/p\u003e\n\u003cp\u003e未初始化的map 读0值 写panic\u003c/p\u003e\n\u003cp\u003e在线运行：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e读未初始化的map: \u003ca href=\"https://go.dev/play/p/yVjXasOREaH\"\u003ehttps://go.dev/play/p/yVjXasOREaH\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e写未初始化的map: \u003ca href=\"https://go.dev/play/p/2zmJGtrH-8v\"\u003ehttps://go.dev/play/p/2zmJGtrH-8v\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e写已初始化的map: \u003ca href=\"https://go.dev/play/p/eUh6csag8rh\"\u003ehttps://go.dev/play/p/eUh6csag8rh\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_132"},{"content":"力扣链接:3264. K 次乘运算后的最终数组 I\n力扣难度 困难\n算法评级: 8 掌握不同的数据结构与算法之间的关联性，处理复杂问题，掌握高级数据结构\n难度分 2509\n题目: 给你一个整数数组 nums ，一个整数 k 和一个整数 multiplier 。\n你需要对 nums 执行 k 次操作，每次操作中：\n找到 nums 中的 最小 值 x ，如果存在多个最小值，选择最 前面 的一个 将 x 替换为 x * multiplier 。 k 次操作以后，你需要将 nums 中每一个数值对 109 + 7 取余。 请你返回执行完 k 次乘运算以及取余运算之后，最终的 nums 数组。\n示例 1：\n输入：nums = [2,1,3,5,6], k = 5, multiplier = 2\n输出：[8,4,6,5,6]\n解释：\n操作 结果 1 次操作后 [2, 2, 3, 5, 6] 2 次操作后 [4, 2, 3, 5, 6] 3 次操作后 [4, 4, 3, 5, 6] 4 次操作后 [4, 4, 6, 5, 6] 5 次操作后 [8, 4, 6, 5, 6] 示例 2：\n输入：nums = [1,2], k = 3, multiplier = 4\n输出：[16,8]\n解释：\n操作 结果 1 次操作后 [4, 2] 2 次操作后 [4, 8] 3 次操作后 [16, 8] 提示：\n1 \u0026lt;= nums.length \u0026lt;= 100 1 \u0026lt;= nums[i] \u0026lt;= 100 1 \u0026lt;= k \u0026lt;= 10 1 \u0026lt;= multiplier \u0026lt;= 5 func getFinalState(nums []int, k int, multiplier int) []int { } 🧠思路: 👈点击 与3264_K_次乘运算后的最终数组_I题目类似，只是增加了数据量导致通过遍历查找最小数会超时，因此需要使用堆的方式 我们寻找的是最小值,因此可以使用最小堆 🔑 答案解析： 👈点击 遍历-超时 func getFinalState(nums []int, k int, multiplier int) []int { n := len(nums) for i := 0; i \u0026lt; k; i++ { minI := 0 for j := 1; j \u0026lt; n; j++ { if nums[j] \u0026lt; nums[minI] { minI = j } } nums[minI] *= multiplier } mod := 1000000000 + 7 for i := 0; i \u0026lt; n; i++ { nums[i] = nums[i] % mod } return nums } 小顶堆-超时 const mod = 10_0000_0000 + 7 // 定义一下heap type pair struct{ x, i int } // 值 和 下标 type hp []pair func (h hp) Len() int { return len(h) } func (h hp) Less(i, j int) bool { // 如果h[i]\u0026lt;h[j]生成的就是小根堆，如果h[i]\u0026gt;h[j]生成的就是大根堆 if h[i].x \u0026lt; h[j].x || h[i].x == h[j].x \u0026amp;\u0026amp; h[i].i \u0026lt; h[j].i { return true } return false } func (h hp) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *hp) Push(x any) { *h = append(*h, x.(pair)) } func (h *hp) Pop() any { old := *h n := len(old) x := old[n-1] *h = old[0 : n-1] return x } func getFinalState(nums []int, k int, multiplier int) []int { if multiplier == 1 { // 数组不变 return nums } n := len(nums) h := make(hp, n) for i, v := range nums { h[i] = pair{v, i} } heap.Init(\u0026amp;h) for i := 0; i \u0026lt; k; i++ { p := heap.Pop(\u0026amp;h) // 最小值 pp := p.(pair) pp.x = pp.x % mod * multiplier % mod nums[pp.i] = pp.x heap.Push(\u0026amp;h, pp) } for i := 0; i \u0026lt; n; i++ { nums[i] = nums[i] % mod } return nums } 小顶堆优化1-超时,将出堆和入队改为FIX操作 const mod = 10_0000_0000 + 7 // 定义一下heap type pair struct{ x, i int } // 值 和 下标 type hp []pair func (h hp) Len() int { return len(h) } func (h hp) Less(i, j int) bool { // 如果h[i]\u0026lt;h[j]生成的就是小根堆，如果h[i]\u0026gt;h[j]生成的就是大根堆 if h[i].x \u0026lt; h[j].x || h[i].x == h[j].x \u0026amp;\u0026amp; h[i].i \u0026lt; h[j].i { return true } return false } func (h hp) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *hp) Push(x any) { *h = append(*h, x.(pair)) } func (h *hp) Pop() any { old := *h n := len(old) x := old[n-1] *h = old[0 : n-1] return x } func getFinalState(nums []int, k int, multiplier int) []int { if multiplier == 1 { // 数组不变 return nums } n := len(nums) h := make(hp, n) for i, v := range nums { h[i] = pair{v, i} } heap.Init(\u0026amp;h) for i := 0; i \u0026lt; k; i++ { pp := \u0026amp;h[0] pp.x = pp.x % mod * multiplier % mod nums[pp.i] = pp.x heap.Fix(\u0026amp;h, 0) } for i := 0; i \u0026lt; n; i++ { nums[i] = nums[i] % mod } return nums } ","permalink":"https://loommii.github.io/posts/leetcode/data/3266_k_%E6%AC%A1%E4%B9%98%E8%BF%90%E7%AE%97%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E6%95%B0%E7%BB%84_ii/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/final-array-state-after-k-multiplication-operations-i/description/?envType=daily-question\u0026amp;envId=2024-12-13\"\u003e3264. K 次乘运算后的最终数组 I\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e困难\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级:  8      掌握不同的数据结构与算法之间的关联性，处理复杂问题，掌握高级数据结构\u003c/p\u003e\n\u003cp\u003e难度分 2509\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个整数数组 nums ，一个整数 k  和一个整数 multiplier 。\u003c/p\u003e\n\u003cp\u003e你需要对 nums 执行 k 次操作，每次操作中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e找到 nums 中的 最小 值 x ，如果存在多个最小值，选择最 前面 的一个\u003c/li\u003e\n\u003cli\u003e将 x 替换为 x * multiplier 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ek 次操作以后，你需要将 nums 中每一个数值对 109 + 7 取余。\n请你返回执行完 k 次乘运算以及取余运算之后，最终的 nums 数组。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [2,1,3,5,6], k = 5, multiplier = 2\u003c/p\u003e\n\u003cp\u003e输出：[8,4,6,5,6]\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e操作\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e结果\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e1 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[2, 2, 3, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[4, 2, 3, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e3 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[4, 4, 3, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e4 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[4, 4, 6, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e5 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[8, 4, 6, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e","title":"3266_K_次乘运算后的最终数组_II"},{"content":"关于 channel，下面语法正确的是：\nA. var ch chan int B. ch := make(chan int) C. \u0026lt;- ch D. ch \u0026lt;- 🔑 答案解析： A B C\nA 声明变量ch 类型为 chan int，并未初始化 B 声明变量ch 类型为 chan int，并初始化 C 读channel，值抛弃 D 错误，写channel必须要值\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_131/","summary":"\u003cp\u003e关于 channel，下面语法正确的是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. var ch chan int\u003c/li\u003e\n\u003cli\u003eB. ch := make(chan int)\u003c/li\u003e\n\u003cli\u003eC. \u0026lt;- ch\u003c/li\u003e\n\u003cli\u003eD. ch \u0026lt;-\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA B C\u003c/p\u003e\n\u003cp\u003eA 声明变量ch 类型为 chan int，并未初始化\nB 声明变量ch 类型为 chan int，并初始化\nC 读channel，值抛弃\nD 错误，写channel必须要值\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_131"},{"content":"力扣链接:3264. K 次乘运算后的最终数组 I\n力扣难度 简单\n算法评级: 3 理解常用数据结构和算法\n难度分 1178\n题目: 给你一个整数数组 nums ，一个整数 k 和一个整数 multiplier 。\n你需要对 nums 执行 k 次操作，每次操作中：\n找到 nums 中的 最小 值 x ，如果存在多个最小值，选择最 前面 的一个。 将 x 替换为 x * multiplier 。 请你返回执行完 k 次乘运算之后，最终的 nums 数组。\n示例 1：\n输入：nums = [2,1,3,5,6], k = 5, multiplier = 2\n输出：[8,4,6,5,6]\n解释：\n操作 结果 1 次操作后 [2, 2, 3, 5, 6] 2 次操作后 [4, 2, 3, 5, 6] 3 次操作后 [4, 4, 3, 5, 6] 4 次操作后 [4, 4, 6, 5, 6] 5 次操作后 [8, 4, 6, 5, 6] 示例 2：\n输入：nums = [1,2], k = 3, multiplier = 4\n输出：[16,8]\n解释：\n操作 结果 1 次操作后 [4, 2] 2 次操作后 [4, 8] 3 次操作后 [16, 8] 提示：\n1 \u0026lt;= nums.length \u0026lt;= 100 1 \u0026lt;= nums[i] \u0026lt;= 100 1 \u0026lt;= k \u0026lt;= 10 1 \u0026lt;= multiplier \u0026lt;= 5 func getFinalState(nums []int, k int, multiplier int) []int { } 🧠思路: 👈点击 遍历nums找最小 🔑 答案解析： 👈点击 遍历 func getFinalState(nums []int, k int, multiplier int) []int { n := len(nums) for i := 0; i \u0026lt; k; i++ { minI := 0 for j := 1; j \u0026lt; n; j++ { if nums[j] \u0026lt; nums[minI] { minI = j } } nums[minI] *= multiplier } return nums } ","permalink":"https://loommii.github.io/posts/leetcode/data/3264_k_%E6%AC%A1%E4%B9%98%E8%BF%90%E7%AE%97%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E6%95%B0%E7%BB%84_i/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/final-array-state-after-k-multiplication-operations-i/description/?envType=daily-question\u0026amp;envId=2024-12-13\"\u003e3264. K 次乘运算后的最终数组 I\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e算法评级: 3      理解常用数据结构和算法\u003c/p\u003e\n\u003cp\u003e难度分 1178\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个整数数组 nums ，一个整数 k  和一个整数 multiplier 。\u003c/p\u003e\n\u003cp\u003e你需要对 nums 执行 k 次操作，每次操作中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e找到 nums 中的 最小 值 x ，如果存在多个最小值，选择最 前面 的一个。\u003c/li\u003e\n\u003cli\u003e将 x 替换为 x * multiplier 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请你返回执行完 k 次乘运算之后，最终的 nums 数组。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [2,1,3,5,6], k = 5, multiplier = 2\u003c/p\u003e\n\u003cp\u003e输出：[8,4,6,5,6]\u003c/p\u003e\n\u003cp\u003e解释：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e操作\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e结果\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e1 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[2, 2, 3, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[4, 2, 3, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e3 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[4, 4, 3, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e4 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[4, 4, 6, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e5 次操作后\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e[8, 4, 6, 5, 6]\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e","title":"3264_K_次乘运算后的最终数组_I"},{"content":"以下代码有什么问题？\npackage main import ( \u0026#34;sync\u0026#34; ) const N = 10 var wg = \u0026amp;sync.WaitGroup{} func main() { for i := 0; i \u0026lt; N; i++ { go func(i int) { wg.Add(1) println(i) defer wg.Done() }(i) } wg.Wait() } 🔑 答案解析： 运行后的现象为什么都没有输出 WaitGroup(等待组)的目的是用于等待一组协程的结束。 内部会维护一个计数器 Add方法向内部计数加上delta Done方法减少WaitGroup计数器的值 Wait方法阻塞直到WaitGroup计数器减为0。\n本题中,for 循环中go func 创建协程。 在协程运行是执行wg.Add(1)和wg.Done()\n而在子goroutine运行前，主goroutine已经运行到wg.Wait()。这时候计数器为0因此不阻塞，main goroutine 结束后，进程结束。 因此子goroutine没有输出内容\n修改：\nfunc main() { for i := 0; i \u0026lt; N; i++ { wg.Add(1) // 1. ADD放到主goroutine中 go func(i int) { defer wg.Done() // 2. 建议一进来就执行defer wg.Done(),预防panic导致Done方法未执行 println(i) }(i) } wg.Wait() } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_130/","summary":"\u003cp\u003e以下代码有什么问题？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e运行后的现象为什么都没有输出\nWaitGroup(等待组)的目的是用于等待一组协程的结束。\n内部会维护一个计数器\nAdd方法向内部计数加上delta\nDone方法减少WaitGroup计数器的值\nWait方法阻塞直到WaitGroup计数器减为0。\u003c/p\u003e\n\u003cp\u003e本题中,for 循环中go func 创建协程。\n在协程运行是执行wg.Add(1)和wg.Done()\u003c/p\u003e\n\u003cp\u003e而在子goroutine运行前，主goroutine已经运行到wg.Wait()。这时候计数器为0因此不阻塞，main goroutine 结束后，进程结束。\n因此子goroutine没有输出内容\u003c/p\u003e\n\u003cp\u003e修改：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// 1. ADD放到主goroutine中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// 2. 建议一进来就执行defer wg.Done(),预防panic导致Done方法未执行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_130"},{"content":"力扣链接:2931. 购买物品的最大开销\n力扣难度 困难 算法评级: 6 难度分 1822\n题目:\n给你一个下标从 0 开始大小为 m n 的整数矩阵 values ，表示 m 个不同商店里 m n 件不同的物品。每个商店有 n 件物品，第 i 个商店的第 j 件物品的价值为 values[i][j] 。除此以外，第 i 个商店的物品已经按照价值非递增排好序了，也就是说对于所有 0 \u0026lt;= j \u0026lt; n - 1 都有 values[i][j] \u0026gt;= values[i][j + 1] 。\n每一天，你可以在一个商店里购买一件物品。具体来说，在第 d 天，你可以：\n选择商店 i 。 购买数组中最右边的物品 j ，开销为 values[i][j] d 。换句话说，选择该商店中还没购买过的物品中最大的下标 j ，并且花费 values[i][j] d 去购买。 注意，所有物品都视为不同的物品。比方说如果你已经从商店 1 购买了物品 0 ，你还可以在别的商店里购买其他商店的物品 0 。\n请你返回购买所有 m * n 件物品需要的 最大开销 。\n示例 1：\n输入：values = [[8,5,2],[6,4,1],[9,7,3]] 输出：285 解释：第一天，从商店 1 购买物品 2 ，开销为 values[1][2] 1 = 1 。 第二天，从商店 0 购买物品 2 ，开销为 values[0][2] 2 = 4 。 第三天，从商店 2 购买物品 2 ，开销为 values[2][2] 3 = 9 。 第四天，从商店 1 购买物品 1 ，开销为 values[1][1] 4 = 16 。 第五天，从商店 0 购买物品 1 ，开销为 values[0][1] 5 = 25 。 第六天，从商店 1 购买物品 0 ，开销为 values[1][0] 6 = 36 。 第七天，从商店 2 购买物品 1 ，开销为 values[2][1] 7 = 49 。 第八天，从商店 0 购买物品 0 ，开销为 values[0][0] 8 = 64 。 第九天，从商店 2 购买物品 0 ，开销为 values[2][0] 9 = 81 。 所以总开销为 285 。 285 是购买所有 m n 件物品的最大总开销。。\n示例 2：\n输入：values = [[10,8,6,4,2],[9,7,5,3,2]] 输出：386 解释：第一天，从商店 0 购买物品 4 ，开销为 values[0][4] 1 = 2 。 第二天，从商店 1 购买物品 4 ，开销为 values[1][4] 2 = 4 。 第三天，从商店 1 购买物品 3 ，开销为 values[1][3] 3 = 9 。 第四天，从商店 0 购买物品 3 ，开销为 values[0][3] 4 = 16 。 第五天，从商店 1 购买物品 2 ，开销为 values[1][2] 5 = 25 。 第六天，从商店 0 购买物品 2 ，开销为 values[0][2] 6 = 36 。 第七天，从商店 1 购买物品 1 ，开销为 values[1][1] 7 = 49 。 第八天，从商店 0 购买物品 1 ，开销为 values[0][1] 8 = 64 。 第九天，从商店 1 购买物品 0 ，开销为 values[1][0] 9 = 81 。 第十天，从商店 0 购买物品 0 ，开销为 values[0][0] 10 = 100 。 所以总开销为 386 。 386 是购买所有 m * n 件物品的最大总开销。\n提示：\n1 \u0026lt;= m == values.length \u0026lt;= 10 1 \u0026lt;= n == values[i].length \u0026lt;= 104 1 \u0026lt;= values[i][j] \u0026lt;= 106 values[i] 按照非递增顺序排序。 func maxSpending(values [][]int) int64 { } 🧠思路: 👈点击 最大开销，目测是DP问题。但是由于values[i] 按照非递增顺序排序，先考虑能不能用贪心。\n方法一贪心：只买最小的，贵的后面买。 创建一个数组记录每个商店的尾下标(最便宜的商品) 不断找最小，然后购买\n方法二排序： 不需要关心在那个商店购买，我们只关注商品。 例如商店A 商品7元，商店B 商品7元。在那个商店购买都是一个价。 因此可以将全部商品都合并并排序。从便宜的开始买起\n方法三排序优化： 由于Go内置的插入排序,插入排序的时间复杂度为on^2,因此我们可以更换为堆 时间复杂度将可以优化为onlogn\n🔑 答案解析： 👈点击 下标+贪心 func maxSpending(values [][]int) (ans int64) { m := len(values) n := len(values[0]) indexV := make([]int, m) for i, _ := range indexV { indexV[i] = n - 1 // 尾下标 } ruin := 0 day := 0 for { minV := 1000001 minI := -1 day++ // 多一天 for i, v := range indexV { // i 是商铺 v是下标 if v == -1 { ruin++ continue } // 找最小 if values[i][v] \u0026lt; minV { minV = values[i][v] minI = i } } if ruin == m { // 全部买完了 break } else { ruin = 0 } ans += int64(day) * int64(minV) indexV[minI]-- } return } 排序 func maxSpending(values [][]int) (ans int64) { m, n := len(values), len(values[0]) valuesList := make([]int, 0, m*n) for _, v := range values { valuesList = append(valuesList, v...) } valuesSort := sort.IntSlice(valuesList) valuesSort.Sort() for i := 0; i \u0026lt; valuesSort.Len(); i++ { day := i + 1 ans += int64(day) * int64(valuesSort[i]) } return } 堆排序 func maxSpending(values [][]int) (ans int64) { m, n := len(values), len(values[0]) idx := make([]int, m) for i := range idx { idx[i] = i } h := \u0026amp;hp{idx, values} heap.Init(h) for d := 1; d \u0026lt;= m*n; d++ { a := values[idx[0]] ans += int64(a[len(a)-1]) * int64(d) if len(a) \u0026gt; 1 { values[idx[0]] = a[:len(a)-1] heap.Fix(h, 0) } else { heap.Pop(h) } } return } type hp struct { sort.IntSlice values [][]int } func (h hp) Less(i, j int) bool { a, b := h.values[h.IntSlice[i]], h.values[h.IntSlice[j]] return a[len(a)-1] \u0026lt; b[len(b)-1] } func (hp) Push(any) {} func (h *hp) Pop() (_ any) { a := h.IntSlice; h.IntSlice = a[:len(a)-1]; return } ","permalink":"https://loommii.github.io/posts/leetcode/data/2931_%E8%B4%AD%E4%B9%B0%E7%89%A9%E5%93%81%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%80%E9%94%80/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/maximum-spending-after-buying-items/description/?envType=daily-question\u0026amp;envId=2024-12-12\"\u003e2931. 购买物品的最大开销\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e困难\u003c/code\u003e\n算法评级: 6\n难度分 1822\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\u003c/p\u003e\n\u003cp\u003e给你一个下标从 0 开始大小为 m \u003cem\u003en 的整数矩阵 values ，表示 m 个不同商店里 m\u003c/em\u003e n 件不同的物品。每个商店有 n 件物品，第 i 个商店的第 j 件物品的价值为 values[i][j] 。除此以外，第 i 个商店的物品已经按照价值非递增排好序了，也就是说对于所有 0 \u0026lt;= j \u0026lt; n - 1 都有 values[i][j] \u0026gt;= values[i][j + 1] 。\u003c/p\u003e\n\u003cp\u003e每一天，你可以在一个商店里购买一件物品。具体来说，在第 d 天，你可以：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e选择商店 i 。\u003c/li\u003e\n\u003cli\u003e购买数组中最右边的物品 j ，开销为 values[i][j] \u003cem\u003ed 。换句话说，选择该商店中还没购买过的物品中最大的下标 j ，并且花费 values[i][j]\u003c/em\u003e d 去购买。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注意，所有物品都视为不同的物品。比方说如果你已经从商店 1 购买了物品 0 ，你还可以在别的商店里购买其他商店的物品 0 。\u003c/p\u003e\n\u003cp\u003e请你返回购买所有 m * n 件物品需要的 最大开销 。\u003c/p\u003e","title":"2931_购买物品的最大开销"},{"content":"执行下面的代码会发生什么？\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { ch := make(chan int, 1000) go func() { for i := 0; i \u0026lt; 10; i++ { ch \u0026lt;- i } }() go func() { for { a, ok := \u0026lt;-ch if !ok { fmt.Println(\u0026#34;close\u0026#34;) return } fmt.Println(\u0026#34;a: \u0026#34;, a) } }() close(ch) fmt.Println(\u0026#34;ok\u0026#34;) time.Sleep(time.Second * 100) } 🔑 答案解析： ok\rclose\rpanic: send on closed channel\rgoroutine 6 [running]: 对已经关闭的管道写数据会发生panic 对已经关闭的管道读数据,无已写缓存的情况下读的是零值\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_129/","summary":"\u003cp\u003e执行下面的代码会发生什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;close\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    close(\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ok\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003eok\r\nclose\r\npanic: send on closed channel\r\n\r\ngoroutine 6 [running]:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对已经关闭的管道写数据会发生panic\n对已经关闭的管道读数据,无已写缓存的情况下读的是零值\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_129"},{"content":"下面这段代码能否编译通过？如果可以，输出什么？\nfunc GetValue() int { return 1 } func main() { i := GetValue() switch i.(type) { case int: println(\u0026#34;int\u0026#34;) case string: println(\u0026#34;string\u0026#34;) case interface{}: println(\u0026#34;interface\u0026#34;) default: println(\u0026#34;unknown\u0026#34;) } } 🔑 答案解析： 编译失败 i.(type) 类型断言的语法形如：i.(type)，其中 i 是接口，type 是固定关键字，需要注意的是，只有接口类型才可以使用类型断言。 官方：https://go.dev/tour/methods/16 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_128/","summary":"\u003cp\u003e下面这段代码能否编译通过？如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetValue\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetValue\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;int\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;interface\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  编译失败\ni.(type)\n类型断言的语法形如：i.(type)，其中 i 是接口，type 是固定关键字，需要注意的是，只有接口类型才可以使用类型断言。\n官方：\u003ca href=\"https://go.dev/tour/methods/16\"\u003ehttps://go.dev/tour/methods/16\u003c/a\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_128"},{"content":"力扣链接:2717. 半有序排列\n力扣难度 简单 算法评级: 3 理解常用数据结构和算法 难度分 1296\n题目:\n给你一个下标从 0 开始、长度为 n 的整数排列 nums 。\n如果排列的第一个数字等于 1 且最后一个数字等于 n，则称其为 半有序排列 。你可以执行多次下述操作，直到将 nums 变成一个 半有序排列 ：\n示例 1：\n输入：nums = [2,1,4,3] 输出：2 解释：可以依次执行下述操作得到半有序排列： 1 - 交换下标 0 和下标 1 对应元素。排列变为 [1,2,4,3] 。 2 - 交换下标 2 和下标 3 对应元素。排列变为 [1,2,3,4] 。 可以证明，要让 nums 成为半有序排列，不存在执行操作少于 2 次的方案。\n示例 2：\n输入：nums = [2,4,1,3] 输出：3 解释： 可以依次执行下述操作得到半有序排列： 1 - 交换下标 1 和下标 2 对应元素。排列变为 [2,1,4,3] 。 2 - 交换下标 0 和下标 1 对应元素。排列变为 [1,2,4,3] 。 3 - 交换下标 2 和下标 3 对应元素。排列变为 [1,2,3,4] 。 可以证明，要让 nums 成为半有序排列，不存在执行操作少于 3 次的方案。\n示例 3：\n输入：nums = [1,3,4,2,5] 输出：0 解释：这个排列已经是一个半有序排列，无需执行任何操作。\n提示：\n2 \u0026lt;= nums.length == n \u0026lt;= 50 1 \u0026lt;= nums[i] \u0026lt;= 50 nums 是一个 排列 func semiOrderedPermutation(nums []int) int { } 🧠思路: 👈点击 遍历一遍记录最小和最大值对应的下标 假则最小为j,则需要移动j次 最大为k，则需要移动n-1-k次 存在一种特殊启动, 小下标 比 大下标大的情况。移动小下标时会移动到大下标。因此次数会少1 🔑 答案解析： 👈点击 func semiOrderedPermutation(nums []int) int { j, k := 0, 0 n := len(nums) for i, v := range nums { if v == 1 { j = i } if v == n { k = i } } ans := j ans += (n - 1 - k) if j \u0026gt; k { ans-- } return ans } ","permalink":"https://loommii.github.io/posts/leetcode/data/2717_%E5%8D%8A%E6%9C%89%E5%BA%8F%E6%8E%92%E5%88%97/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/semi-ordered-permutation/description/?envType=daily-question\u0026amp;envId=2024-12-11\"\u003e2717. 半有序排列\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\n算法评级: 3      理解常用数据结构和算法\n难度分 1296\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\u003c/p\u003e\n\u003cp\u003e给你一个下标从 \u003ccode\u003e0\u003c/code\u003e 开始、长度为 \u003ccode\u003en\u003c/code\u003e 的整数排列 \u003ccode\u003enums\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e如果排列的第一个数字等于 \u003ccode\u003e1\u003c/code\u003e 且最后一个数字等于 \u003ccode\u003en\u003c/code\u003e，则称其为 半有序排列 。你可以执行多次下述操作，直到将 \u003ccode\u003enums\u003c/code\u003e 变成一个 半有序排列 ：\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [2,1,4,3]\n输出：2\n解释：可以依次执行下述操作得到半有序排列：\n1 - 交换下标 0 和下标 1 对应元素。排列变为 [1,2,4,3] 。\n2 - 交换下标 2 和下标 3 对应元素。排列变为 [1,2,3,4] 。\n可以证明，要让 nums 成为半有序排列，不存在执行操作少于 2 次的方案。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：nums = [2,4,1,3]\n输出：3\n解释：\n可以依次执行下述操作得到半有序排列：\n1 - 交换下标 1 和下标 2 对应元素。排列变为 [2,1,4,3] 。\n2 - 交换下标 0 和下标 1 对应元素。排列变为 [1,2,4,3] 。\n3 - 交换下标 2 和下标 3 对应元素。排列变为 [1,2,3,4] 。\n可以证明，要让 nums 成为半有序排列，不存在执行操作少于 3 次的方案。\u003c/p\u003e","title":"2717_半有序排列"},{"content":"力扣链接:70.爬楼梯\n力扣难度 简单 算法评级: 2 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n示例 1：\n输入：n = 2 输出：2 解释：有两种方法可以爬到楼顶。\n1 阶 + 1 阶 2 阶 示例 2：\n输入：n = 3 输出：3 解释：有三种方法可以爬到楼顶。\n1 阶 + 1 阶 + 1 阶 1 阶 + 2 阶 2 阶 + 1 阶 func climbStairs(n int) int { } 🔑 答案解析： 👈点击 ","permalink":"https://loommii.github.io/posts/leetcode/data/70_%E7%88%AC%E6%A5%BC%E6%A2%AF/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/climbing-stairs/description/?envType=study-plan-v2\u0026amp;envId=dynamic-programming\"\u003e70.爬楼梯\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\n算法评级: 2\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\u003c/p\u003e\n\u003cp\u003e每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\u003c/p\u003e\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e1 阶 + 1 阶\u003c/li\u003e\n\u003cli\u003e2 阶\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\u003c/p\u003e\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e1 阶 + 1 阶 + 1 阶\u003c/li\u003e\n\u003cli\u003e1 阶 + 2 阶\u003c/li\u003e\n\u003cli\u003e2 阶 + 1 阶\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclimbStairs\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析： 👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"70.爬楼梯"},{"content":"力扣链接:935. 骑士拨号器\n力扣难度 中等 算法评级: 5 熟练掌握常用数据结构和算法，初步了解高级数据结构 难度分 1690 题目:\n象棋骑士有一个独特的移动方式，它可以垂直移动两个方格，水平移动一个方格，或者水平移动两个方格，垂直移动一个方格(两者都形成一个 L 的形状)。\n象棋骑士可能的移动方式如下图所示: 我们有一个象棋骑士和一个电话垫，如下所示，骑士只能站在一个数字单元格上(即蓝色单元格)。 给定一个整数 n，返回我们可以拨多少个长度为 n 的不同电话号码。\n你可以将骑士放置在任何数字单元格上，然后你应该执行 n - 1 次移动来获得长度为 n 的号码。所有的跳跃应该是有效的骑士跳跃。\n因为答案可能很大，所以输出答案模 109 + 7.\n示例 1：\n输入：n = 1 输出：10 解释：我们需要拨一个长度为1的数字，所以把骑士放在10个单元格中的任何一个数字单元格上都能满足条件。\n示例 2：\n输入：n = 2 输出：20 解释：我们可以拨打的所有有效号码为[04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n示例 3：\n输入：n = 3131 输出：136006598 解释：注意取模\nfunc knightDialer(n int) int { } 🧠思路: 👈点击 化成子问题\n站在x数字上往y，剩余n 深度遍历就可以解出问题\n🔑 答案解析： 👈点击 暴力递归 var dirs = map[int][]int{ 0: {4, 6}, // 04, 06 1: {6, 8}, // 16, 18 2: {7, 9}, // 27, 29 3: {4, 8}, // 34, 38 4: {0, 3, 9}, // 40, 43, 49 6: {0, 1, 7}, // 60, 61, 67 7: {2, 6}, // 72, 76 8: {1, 3}, // 81, 83 9: {2, 4}, // 92, 94 } func knightDialer(n int) (ans int) { mod := 1000000000 + 7 var dfs func(int, int) int dfs = func(y, n int) int { if n == 0 { return 1 } ans := 0 for _, v := range dirs[y] { ans += dfs(v, n-1) } return ans % mod } for i := 0; i \u0026lt; 10; i++ { ans += dfs(i, n-1) } return ans % mod } 记忆化递归 var dirs = map[int][]int{ 0: {4, 6}, // 04, 06 1: {6, 8}, // 16, 18 2: {7, 9}, // 27, 29 3: {4, 8}, // 34, 38 4: {0, 3, 9}, // 40, 43, 49 6: {0, 1, 7}, // 60, 61, 67 7: {2, 6}, // 72, 76 8: {1, 3}, // 81, 83 9: {2, 4}, // 92, 94 } func knightDialer(n int) (ans int) { mod := 1000000000 + 7 memo := make([][]int, 10) // memo[y][n] for i := 0; i \u0026lt; 10; i++ { memo[i] = make([]int, n) } var dfs func(int, int) int dfs = func(y, n int) int { if n == 0 { return 1 } ans := 0 for _, v := range dirs[y] { if memo[v][n-1] != 0 { ans += memo[v][n-1] } else { ans += dfs(v, n-1) } } ans %= mod memo[y][n] = ans return ans } for i := 0; i \u0026lt; 10; i++ { ans += dfs(i, n-1) } return ans % mod } 状态定义与状态转移方程（优化后） 将9个数分为4类 A: 1,3,7,9 B: 2,8 C: 4,6 D: 0\n分别的状态转移方程 dfs(i,0)=dfs(i−1,1)+dfs(i−1,2) dfs(i,1)=2⋅dfs(i−1,0) dfs(i,2)=2⋅dfs(i−1,0)+dfs(i−1,3) dfs(i,3)=2⋅dfs(i−1,2)\n4⋅dfs(n−1,0)+2⋅dfs(n−1,1)+2⋅dfs(n−1,2)+dfs(n−1,3)\n","permalink":"https://loommii.github.io/posts/leetcode/data/935_%E9%AA%91%E5%A3%AB%E6%8B%A8%E5%8F%B7%E5%99%A8/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/knight-dialer/description/?envType=daily-question\u0026amp;envId=2024-12-10\"\u003e935. 骑士拨号器\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"难度分-1690\"\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\n算法评级: 5      熟练掌握常用数据结构和算法，初步了解高级数据结构\n难度分 1690\u003c/h2\u003e\n\u003cp\u003e题目:\u003c/p\u003e\n\u003cp\u003e象棋骑士有一个独特的移动方式，它可以垂直移动两个方格，水平移动一个方格，或者水平移动两个方格，垂直移动一个方格(两者都形成一个 L 的形状)。\u003c/p\u003e\n\u003cp\u003e象棋骑士可能的移动方式如下图所示:\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/935_%E9%AA%91%E5%A3%AB%E6%8B%A8%E5%8F%B7%E5%99%A8/image.png\"\u003e\n我们有一个象棋骑士和一个电话垫，如下所示，骑士只能站在一个数字单元格上(即蓝色单元格)。\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/leetcode/data/935_%E9%AA%91%E5%A3%AB%E6%8B%A8%E5%8F%B7%E5%99%A8/image-1.png\"\u003e\n给定一个整数 n，返回我们可以拨多少个长度为 n 的不同电话号码。\u003c/p\u003e\n\u003cp\u003e你可以将骑士放置在任何数字单元格上，然后你应该执行 n - 1 次移动来获得长度为 n 的号码。所有的跳跃应该是有效的骑士跳跃。\u003c/p\u003e\n\u003cp\u003e因为答案可能很大，所以输出答案模 109 + 7.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：n = 1\n输出：10\n解释：我们需要拨一个长度为1的数字，所以把骑士放在10个单元格中的任何一个数字单元格上都能满足条件。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：n = 2\n输出：20\n解释：我们可以拨打的所有有效号码为[04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 3：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：n = 3131\n输出：136006598\n解释：注意取模\u003c/p\u003e","title":"935_骑士拨号器"},{"content":"下面这段代码输出什么以及原因？\nfunc hello() []string { return nil } func main() { h := hello if h == nil { fmt.Println(\u0026#34;nil\u0026#34;) } else { fmt.Println(\u0026#34;not nil\u0026#34;) } } A. nil B. not nil C. compilation error 🔑 答案解析： B\nhello 是个Function values.函数在GO中时一等公民。因此可以 if h == nil 有应为Function values.有值(地址)因此也不为nil 函数也是值。它们可以像其他值一样传递。 函数值可以用作函数参数和返回值。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_127/","summary":"\u003cp\u003e下面这段代码输出什么以及原因？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e() []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. nil\u003c/li\u003e\n\u003cli\u003eB. not nil\u003c/li\u003e\n\u003cli\u003eC. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ehello 是个Function values.函数在GO中时一等公民。因此可以 if h == nil\n有应为Function values.有值(地址)因此也不为nil\n函数也是值。它们可以像其他值一样传递。\n函数值可以用作函数参数和返回值。\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_127"},{"content":"什么是URL短链服务 URL短链服务的本质是通过HTTP 302重定向机制，将一个简短的URL重定向到原始的长URL。\n短链服务解决了什么问题 解决消息发送的字数限制问题 例如，腾讯云SMS限制每条短信的字数为500个字符，而在营销短信中，通常会携带包含大量参数的URL（如邀请平台、邀请人、活动ID等）。这些参数使得URL变得非常冗长。通过URL短链服务，营销短信中的长URL可以被替换为一个简短的短链，节省了字数空间。 隐藏请求参数 以营销活动为例，URL中的常见参数可能包括活动ID等信息。如果我们不希望这些ID被随便修改，可以在参数中添加对应的活动ID KEY，这样只有当ID和KEY匹配时，用户才能进入相应的活动页面。然而，添加了KEY后，原本的URL会变得更加冗长。短链服务可以帮助隐藏这些请求参数，保持URL简洁且安全。 最基础的需求 长链登记 短链重定向 短链KEY为什么选择 Base62 编码 根据 RFC3986 标准，URL 由 ASCII 字符组成，以下字符可以安全地在 URL 中使用：\n字母（a-z 和 A-Z） 数字（0-9） 部分特殊字符：$-_.+!*\u0026rsquo;(), 虽然RFC3986标准允许一些特殊字符，但有些特殊字符可能会对URL解析、传输或存储造成问题。例如，字符如 \u0026amp;, ?, =, # 等在查询参数或路径中有特定意义，因此它们可能引起冲突或产生解析错误。 为了避免这些潜在的麻烦，特别是在需要将复杂的查询参数或密钥编码为 URL 友好的格式时，我们通常会选择 Base62 编码，即只使用字母（大小写）和数字的组合。\n短链KEY的长度选择 我们字符集已经确定为Base62,因此长度为1 可以存储 62种。每增加一位，存储的极限数量会按 62 的指数增长。\n长度 存储极限 解释 1 62 1 位可以表示 62 种不同的组合 2 62 × 62 = 3,844 2 位可以表示 62 的平方，即 3,844 种不同的组合 3 62 × 62 × 62 = 238,328 3 位可以表示 62 的三次方，即 238,328 种不同的组合 4 62 × 62 × 62 × 62 = 14,776,336 4 位可以表示 62 的四次方，即 14,776,336 种不同的组合 5 62 × 62 × 62 × 62 × 62 = 916,132,832 5 位可以表示 62 的五次方，即 916,132,832种不同的组合 6 62 × 62 × 62 × 62 × 62 × 62 = 56,800,235,584 6 位可以表示 62 的六次方，即 56,800,235,584 种不同的组合 5位的存储极限已经达到916,132,832,这个数量已经非常大，足以支持大多数应用场景。然而，如果你希望进一步减少生成字符时的冲突、长远规划，选择 6 位 作为短链 KEY 长度会是一个不错的选择。\n短链KEY的生成 没有最好的方案只有最适合的方案\n方案一:随机生成短链 KEY 实现:系统通过随机函数生成对应短链 KEY 优点：\n实现容易：随机生成短链 KEY 的实现相对简单，可以通过生成随机数并映射到 Base62 字符集，快速获得短链标识符。大多数编程语言都提供了简单的随机数生成函数，操作简便。 缺点：\n冲突的概率随着存量数据增多而增加 相同的长URL会生成不同的短链 KEY，可能导致浪费 解决：采用哈希计算，\n方案二:哈希计算 实现:将长 URL 通过哈希算法生成固定长度的短链 KEY。\n优点：\n解决了相同的长 URL 会生成不同的短链的问题：哈希计算能够确保相同的长 URL 每次生成相同的短链 KEY，从而避免存储冗余。 缺点：\n哈希冲突的可能性：虽然哈希函数可以生成固定长度的短链，但不同的长 URL 可能会产生相同的哈希值，从而发生哈希冲突。 解决:遇到哈希冲突时，可以在哈希值后插入无意义的字符串或采用其他去重策略，如进行二次哈希计算。 方案三:计数器自增法 + 字典 实现: 通过维护一个计数器，每当新增一个长 URL 时，计数器自增，然后将计数值转为固定的短链 KEY。\n例: 值为66 短链 KEY为 字典[0]+字典[0]+字典[0]+字典[0]+字典[1]+字典[4]\n优点：\n单机环境下不存在冲突的可能：由于计数器是自增的，每个短链 KEY 都是唯一的，因此不会发生冲突。 缺点:\n生成的短链 KEY 存在明显的规律：由于短链 KEY 基于计数器生成，因此 KEY 存在明显的递增规律，易被推测或猜测。 分布式环境下，存在冲突的可能：在分布式环境中，如果多个节点使用相同的计数器，可能会导致短链 KEY 冲突。 相同的长 URL 会生成不同的短链 KEY，可能导致浪费：每次生成短链时，相同的长 URL 会得到不同的短链 KEY。 解决: 可以通过计数倒置、乱序字典、哈希计算等方式来优化生成逻辑，减少规律性和冲突。\n方案四:计数器自增法 + 乱序字典 + 计数倒置 +哈希计算 实现：\n乱序字典：在服务启动时，打乱字典的顺序，确保相同的计数值生成不同的短链 KEY，从而避免分布式环境下的冲突。 计数倒置：为了打破短链生成中的规律性，可以在计数器自增的基础上对生成的数字进行倒置处理，使每次数字变化幅度增大，生成的短链 KEY 更加多样化。 例如 123 -\u0026gt; 00 0000 0123 -\u0026gt; 32 1000 0000\n优点：\n几乎解决了所有问题：这种方案通过多种方式的优化，几乎解决了所有潜在问题，如冲突、规律性、浪费等。 缺点:\n服务实现相对复杂：该方案需要额外的逻辑来处理字典乱序、计数倒置等，服务实现较为复杂。 性能要求较高 ","permalink":"https://loommii.github.io/posts/skill/data/%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1_%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAurl%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/","summary":"\u003ch3 id=\"什么是url短链服务\"\u003e什么是URL短链服务\u003c/h3\u003e\n\u003cp\u003eURL短链服务的本质是通过HTTP 302重定向机制，将一个简短的URL重定向到原始的长URL。\u003c/p\u003e\n\u003ch3 id=\"短链服务解决了什么问题\"\u003e短链服务解决了什么问题\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e解决消息发送的字数限制问题\n例如，腾讯云SMS限制每条短信的字数为500个字符，而在营销短信中，通常会携带包含大量参数的URL（如邀请平台、邀请人、活动ID等）。这些参数使得URL变得非常冗长。通过URL短链服务，营销短信中的长URL可以被替换为一个简短的短链，节省了字数空间。\n\u003cimg alt=\"腾讯云SMS\" loading=\"lazy\" src=\"/posts/skill/data/%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1_%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAurl%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/image.png\"\u003e\u003c/li\u003e\n\u003cli\u003e隐藏请求参数\n以营销活动为例，URL中的常见参数可能包括活动ID等信息。如果我们不希望这些ID被随便修改，可以在参数中添加对应的活动ID KEY，这样只有当ID和KEY匹配时，用户才能进入相应的活动页面。然而，添加了KEY后，原本的URL会变得更加冗长。短链服务可以帮助隐藏这些请求参数，保持URL简洁且安全。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"最基础的需求\"\u003e最基础的需求\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e长链登记\u003c/li\u003e\n\u003cli\u003e短链重定向\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"短链key为什么选择-base62-编码\"\u003e短链KEY为什么选择 Base62 编码\u003c/h3\u003e\n\u003cp\u003e根据 RFC3986 标准，URL 由 ASCII 字符组成，以下字符可以安全地在 URL 中使用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e字母（a-z 和 A-Z）\u003c/li\u003e\n\u003cli\u003e数字（0-9）\u003c/li\u003e\n\u003cli\u003e部分特殊字符：$-_.+!*\u0026rsquo;(),\n虽然RFC3986标准允许一些特殊字符，但有些特殊字符可能会对URL解析、传输或存储造成问题。例如，字符如 \u0026amp;, ?, =, # 等在查询参数或路径中有特定意义，因此它们可能引起冲突或产生解析错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e为了避免这些潜在的麻烦，特别是在需要将复杂的查询参数或密钥编码为 URL 友好的格式时，我们通常会选择 Base62 编码，即只使用字母（大小写）和数字的组合。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"短链key的长度选择\"\u003e短链KEY的长度选择\u003c/h3\u003e\n\u003cp\u003e我们字符集已经确定为Base62,因此长度为1 可以存储 62种。每增加一位，存储的极限数量会按 62 的指数增长。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e长度\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e存储极限\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e解释\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e62\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1 位可以表示 62 种不同的组合\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e62 × 62 = 3,844\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 位可以表示 62 的平方，即 3,844 种不同的组合\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e62 × 62 × 62 = 238,328\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e3 位可以表示 62 的三次方，即 238,328 种不同的组合\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e62 × 62 × 62 × 62 = 14,776,336\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4 位可以表示 62 的四次方，即 14,776,336 种不同的组合\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e5\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e62 × 62 × 62 × 62 × 62 = 916,132,832\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e5 位可以表示 62 的五次方，即 916,132,832种不同的组合\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e6\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e62 × 62 × 62 × 62 × 62 × 62 = 56,800,235,584\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e6 位可以表示 62 的六次方，即 56,800,235,584 种不同的组合\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e5位的存储极限已经达到916,132,832,这个数量已经非常大，足以支持大多数应用场景。然而，如果你希望进一步减少生成字符时的冲突、长远规划，选择 6 位 作为短链 KEY 长度会是一个不错的选择。\u003c/p\u003e","title":"服务设计_如何设计一个URL短链服务"},{"content":"垃圾回收 垃圾回收这里的垃圾指的是什么？为什么要回收？ 在程序运行的时候，进程会在堆内存申请内存空间。但是在函数退出的时候会栈空间会被销毁。因此这一段堆内存空间没有任何的指针指向它（没有被引用）。因此会造成内存的浪费（内存泄露）。这一段的没有被引用的内存就是“垃圾”。，程序员不再需要手动管理内存的分配和释放，从而减少了由于内存管理不当引起的内存泄漏或悬空指针等问题。\n常见的GC有哪几种\n手动垃圾回收，代表语言（C，C++） 标记-清扫算法 三色标记法 标记-整理算法 移动整理法 复制整理法 分代回收 引用计数 简述常见的GC如何实现，和他们各自的优缺点。\n手动垃圾回收： 实现：程序员自行调用函数销毁 优点：程序员对程序内存的掌控自由。 缺点：容易出现提前释放（悬挂指针）、忘记释放（内存泄漏)等问题。 标记-清扫算法： 实现：标记从根节点（栈内存、数据段）能追踪到的数据为游泳数据，其他未标记的数据就是垃圾数据，将对垃圾数据进行回收 优点：实现相对简单， 缺点：容易造成内存碎片化 标记-整理算法： 实现： 标记阶段与标记-清扫算法一致。 整理阶段： 移动整理法：整理移动有用的数据，使有用的数据尽可能紧凑的放在内存里。 优点：解决了内存碎片化的问题 缺点：多次扫描移动，会带来不小的性能开销 复制整理法：将内存划分为Form和To，将From空间中的有用数据都复制到To空间。并将Form和To空间的角色对换。 优点：解决了多次扫描移动的性能问题 缺点：内存使用率低。只有一半的堆内存空间被使用 分代回收： 实现：基于弱分代假说。将数据分为新生代、老年代。新生代、老年代采用不同的回收算法 引用计数 实现：每次对象应用都会更新对象的引用计数，当引用计数为0就回收该空间 优点：可以及时回收垃圾内存 缺点：高频更新引用计数会有不小性能开销，循环引用会导致引用计数永远不为0 什么是STW，为什么会有STW。 STW（stop the world）简单的就是让用户程序停下来。 STW期间，程序会进行垃圾回收\nSTW STW 是 Stop-The-World 的缩写，指的是在垃圾回收或某些系统操作过程中，暂停所有应用程序线程的行为，直到特定任务（通常是垃圾回收）完成。 ![e6d686db23ff699d03219905d8ceb2c1.png].(/e6d686db23ff699d03219905d8ceb2c1.png) 这里会带来一个问题，用户程序接受长时间STW吗？ 为了解决这个问题就出现了增量式垃圾回收\n增量式垃圾回收 实现：将一次GC分为多次，并和用户程序交互进行 优点：解决了STW时间长的问题 缺点：如果在标记后-清理前。创建的内容将会被误删除\n为了避免误删可以采用三色抽象避免 三色抽象:标记数据分为 黑 - 灰 - 白\n黑：已经遍历标记完的数据 灰：还未遍历完的数据 白：未遍历（应用不到）的垃圾数据 因此在清扫阶段发现有黑-\u0026gt;白的数据。着这个白数据是在标记后-清理前创建的 因此Golang官方提出2种条件\n强三色不变式：不允许出现黑色到白色的情况 弱三色不变式：允许黑色到白色的情况，但是这个白色需要被灰色引用 写屏障\n插入写屏障 满足强三色不变式条件（关注白色对象的写入操作） 在增量式垃圾回收中,若出现白色对象指向黑色则将白色改为灰色，或者把黑色改为灰色。 例子：Gc和用户代码交替的期间，如果new了一段新的空间，（黑-\u0026gt;白）。则这个new的新空间直接标记为灰。（黑-\u0026gt;灰）或将黑改为灰（灰-\u0026gt;白） 删除写屏障 满足弱三色不变式条件 （关注对白色对象路径破坏行为） 在增量式垃圾回收中,若出现删除灰色-\u0026gt;白色的引用时，则将白色改为灰色 例子：Gc和用户代码交替的期间，若有个灰色对象 -\u0026gt; 白色对象，程序将灰色对象 = nil。着需要将白色对象改为灰色 读屏障 解决标记-复制GC里面，在复制过程中。回收器将From改为To的过程中。如果要读取From要检查一下To区里面是不是已经复制了。如果复制过来就去都去To 多核情况 并行垃圾回收 注意同步问题 并发垃圾回收 解决同步问题,但是需要注意通知开启读写屏障的问题 主体并发式垃圾回收 解决通知开启读写屏障的问题时间不一致的问题 主体并发增量式垃圾回收 GO语言的GC 采用标记-清扫算法 标记阶段使用三色标记法 主体并发增量式垃圾回收 使用插入与删除写屏障结合的混合写屏障 ","permalink":"https://loommii.github.io/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/","summary":"\u003ch2 id=\"垃圾回收\"\u003e垃圾回收\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e垃圾回收这里的垃圾指的是什么？为什么要回收？\n在程序运行的时候，进程会在堆内存申请内存空间。但是在函数退出的时候会栈空间会被销毁。因此这一段堆内存空间没有任何的指针指向它（没有被引用）。因此会造成内存的浪费（内存泄露）。这一段的没有被引用的内存就是“垃圾”。，程序员不再需要手动管理内存的分配和释放，从而减少了由于内存管理不当引起的内存泄漏或悬空指针等问题。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e常见的GC有哪几种\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e手动垃圾回收，代表语言（C，C++）\u003c/li\u003e\n\u003cli\u003e标记-清扫算法\n\u003cul\u003e\n\u003cli\u003e三色标记法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e标记-整理算法\n\u003cul\u003e\n\u003cli\u003e移动整理法\u003c/li\u003e\n\u003cli\u003e复制整理法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分代回收\u003c/li\u003e\n\u003cli\u003e引用计数\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e简述常见的GC如何实现，和他们各自的优缺点。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e手动垃圾回收：\n\u003cul\u003e\n\u003cli\u003e实现：程序员自行调用函数销毁\u003c/li\u003e\n\u003cli\u003e优点：程序员对程序内存的掌控自由。\u003c/li\u003e\n\u003cli\u003e缺点：容易出现提前释放（悬挂指针）、忘记释放（内存泄漏)等问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e标记-清扫算法：\n\u003cul\u003e\n\u003cli\u003e实现：标记从根节点（栈内存、数据段）能追踪到的数据为游泳数据，其他未标记的数据就是垃圾数据，将对垃圾数据进行回收\u003c/li\u003e\n\u003cli\u003e优点：实现相对简单，\u003c/li\u003e\n\u003cli\u003e缺点：容易造成内存碎片化\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e标记-整理算法：\n\u003cul\u003e\n\u003cli\u003e实现：\n\u003cul\u003e\n\u003cli\u003e标记阶段与\u003ccode\u003e标记-清扫算法\u003c/code\u003e一致。\u003c/li\u003e\n\u003cli\u003e整理阶段：\n\u003cul\u003e\n\u003cli\u003e移动整理法：整理移动有用的数据，使有用的数据尽可能紧凑的放在内存里。\n\u003cul\u003e\n\u003cli\u003e优点：解决了内存碎片化的问题\u003c/li\u003e\n\u003cli\u003e缺点：多次扫描移动，会带来不小的性能开销\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e复制整理法：将内存划分为Form和To，将From空间中的有用数据都复制到To空间。并将Form和To空间的角色对换。\n\u003cul\u003e\n\u003cli\u003e优点：解决了多次扫描移动的性能问题\u003c/li\u003e\n\u003cli\u003e缺点：内存使用率低。只有一半的堆内存空间被使用\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分代回收：\n\u003cul\u003e\n\u003cli\u003e实现：基于\u003ccode\u003e弱分代假说\u003c/code\u003e。将数据分为新生代、老年代。新生代、老年代采用不同的回收算法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e引用计数\n\u003cul\u003e\n\u003cli\u003e实现：每次对象应用都会更新对象的引用计数，当引用计数为0就回收该空间\u003c/li\u003e\n\u003cli\u003e优点：可以及时回收垃圾内存\u003c/li\u003e\n\u003cli\u003e缺点：高频更新引用计数会有不小性能开销，循环引用会导致引用计数永远不为0\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e什么是STW，为什么会有STW。\nSTW（stop the world）简单的就是让用户程序停下来。\n\u003cimg alt=\"b1bb8a580c1de4ba490fe1787b9b4484.png\" loading=\"lazy\" src=\"/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/b1bb8a580c1de4ba490fe1787b9b4484.png\"\u003e\nSTW期间，程序会进行垃圾回收\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"stw\"\u003eSTW\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eSTW 是 Stop-The-World 的缩写，指的是在垃圾回收或某些系统操作过程中，暂停所有应用程序线程的行为，直到特定任务（通常是垃圾回收）完成。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e![e6d686db23ff699d03219905d8ceb2c1.png].(/e6d686db23ff699d03219905d8ceb2c1.png)\n这里会带来一个问题，用户程序接受长时间STW吗？\n为了解决这个问题就出现了\u003ccode\u003e增量式垃圾回收\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"增量式垃圾回收\"\u003e增量式垃圾回收\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"61ac2ddfdd0b562c9d1dc2db48226baf.png\" loading=\"lazy\" src=\"/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/61ac2ddfdd0b562c9d1dc2db48226baf.png\"\u003e\n实现：将一次GC分为多次，并和用户程序交互进行\n优点：解决了STW时间长的问题\n缺点：如果在标记后-清理前。创建的内容将会被误删除\u003c/p\u003e\n\u003cp\u003e为了避免误删可以采用\u003ccode\u003e三色抽象\u003c/code\u003e避免\n三色抽象:标记数据分为 黑 - 灰 - 白\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e黑：已经遍历标记完的数据\u003c/li\u003e\n\u003cli\u003e灰：还未遍历完的数据\u003c/li\u003e\n\u003cli\u003e白：未遍历（应用不到）的垃圾数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因此在清扫阶段发现有黑-\u0026gt;白的数据。着这个白数据是在标记后-清理前创建的\n\u003cimg alt=\"ec4f1ac56d59908315538e9aaab07d06.png\" loading=\"lazy\" src=\"/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/ec4f1ac56d59908315538e9aaab07d06.png\"\u003e\n因此Golang官方提出2种条件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e强三色不变式：不允许出现黑色到白色的情况\n\u003cimg alt=\"e4c3408593ec24f14daa8c47feb3fdd4.png\" loading=\"lazy\" src=\"/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/e4c3408593ec24f14daa8c47feb3fdd4.png\"\u003e\u003c/li\u003e\n\u003cli\u003e弱三色不变式：允许黑色到白色的情况，但是这个白色需要被灰色引用\n\u003cimg alt=\"84ad5e2babcccd8c8b5a1c5c7d3b1260.png\" loading=\"lazy\" src=\"/posts/skill/data/%E6%B5%85%E8%B0%88go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/84ad5e2babcccd8c8b5a1c5c7d3b1260.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e写屏障\u003c/p\u003e","title":"浅谈GO GC (垃圾回收)"},{"content":"力扣链接:1812. 判断国际象棋棋盘中一个格子的颜色\n力扣难度 简单\n题目: 给你一个坐标 coordinates ，它是一个字符串，表示国际象棋棋盘中一个格子的坐标。下图是国际象棋棋盘示意图。\n如果所给格子的颜色是白色，请你返回 true，如果是黑色，请返回 false 。\n给定坐标一定代表国际象棋棋盘上一个存在的格子。坐标第一个字符是字母，第二个字符是数字。\n示例 1：\n输入：coordinates = \u0026ldquo;a1\u0026rdquo; 输出：false 解释：如上图棋盘所示，\u0026ldquo;a1\u0026rdquo; 坐标的格子是黑色的，所以返回 false 。\n示例 2：\n输入：coordinates = \u0026ldquo;h3\u0026rdquo; 输出：true 解释：如上图棋盘所示，\u0026ldquo;h3\u0026rdquo; 坐标的格子是白色的，所以返回 true 。\n示例 3：\n输入：coordinates = \u0026ldquo;c7\u0026rdquo; 输出：false\nfunc squareIsWhite(coordinates string) bool { } 🔑 答案解析： 👈点击 func squareIsWhite(coordinates string) bool { return coordinates[0]%2 != coordinates[1]%2 } ","permalink":"https://loommii.github.io/posts/leetcode/data/1812_%E5%88%A4%E6%96%AD%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E6%A3%8B%E7%9B%98%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%A0%BC%E5%AD%90%E7%9A%84%E9%A2%9C%E8%89%B2/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/determine-color-of-a-chessboard-square/description/?envType=daily-question\u0026amp;envId=2024-12-09\"\u003e1812. 判断国际象棋棋盘中一个格子的颜色\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e简单\u003c/code\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\n给你一个坐标 coordinates ，它是一个字符串，表示国际象棋棋盘中一个格子的坐标。下图是国际象棋棋盘示意图。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"棋盘\" loading=\"lazy\" src=\"/posts/leetcode/data/1812_%E5%88%A4%E6%96%AD%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E6%A3%8B%E7%9B%98%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%A0%BC%E5%AD%90%E7%9A%84%E9%A2%9C%E8%89%B2/chessboard.png\"\u003e\u003c/p\u003e\n\u003cp\u003e如果所给格子的颜色是白色，请你返回 true，如果是黑色，请返回 false 。\u003c/p\u003e\n\u003cp\u003e给定坐标一定代表国际象棋棋盘上一个存在的格子。坐标第一个字符是字母，第二个字符是数字。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：coordinates = \u0026ldquo;a1\u0026rdquo;\n输出：false\n解释：如上图棋盘所示，\u0026ldquo;a1\u0026rdquo; 坐标的格子是黑色的，所以返回 false 。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：coordinates = \u0026ldquo;h3\u0026rdquo;\n输出：true\n解释：如上图棋盘所示，\u0026ldquo;h3\u0026rdquo; 坐标的格子是白色的，所以返回 true 。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 3：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入：coordinates = \u0026ldquo;c7\u0026rdquo;\n输出：false\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esquareIsWhite\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecoordinates\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析： 👈点击\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esquareIsWhite\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecoordinates\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecoordinates\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecoordinates\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"1812_判断国际象棋棋盘中一个格子的颜色"},{"content":"关于 init 函数，下面说法正确的是：\nA. 一个包中，可以包含多个 init 函数； B. 程序运行时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数； C. main 包中，不能有 init 函数； D. init 函数可以被其他函数调用； 🔑 答案解析： A B\n关于 init() 函数有几个需要注意的地方：\ninit() 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等; 一个包可以出线多个 init() 函数,一个源文件也可以包含多个 init() 函数； 同一个包中多个 init() 函数的执行顺序没有明确定义，但是不同包的init函数是根据包导入的依赖关系决定的; init() 函数在代码中不能被显示调用、不能被引用（赋值给函数变量），否则出现编译错误; 一个包被引用多次，如 A import B,C import B,A import C，B 被引用多次，但 B 包只会初始化一次； 引入包，不可出现死循坏。即A import B,B import A，这种情况编译失败； ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_126/","summary":"\u003cp\u003e关于 init 函数，下面说法正确的是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA. 一个包中，可以包含多个 init 函数；\u003c/li\u003e\n\u003cli\u003eB. 程序运行时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数；\u003c/li\u003e\n\u003cli\u003eC. main 包中，不能有 init 函数；\u003c/li\u003e\n\u003cli\u003eD. init 函数可以被其他函数调用；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA B\u003c/p\u003e\n\u003cp\u003e关于 init() 函数有几个需要注意的地方：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003einit() 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等;\u003c/li\u003e\n\u003cli\u003e一个包可以出线多个 init() 函数,一个源文件也可以包含多个 init() 函数；\u003c/li\u003e\n\u003cli\u003e同一个包中多个 init() 函数的执行顺序没有明确定义，但是不同包的init函数是根据包导入的依赖关系决定的;\u003c/li\u003e\n\u003cli\u003einit() 函数在代码中不能被显示调用、不能被引用（赋值给函数变量），否则出现编译错误;\u003c/li\u003e\n\u003cli\u003e一个包被引用多次，如 A import B,C import B,A import C，B 被引用多次，但 B 包只会初始化一次；\u003c/li\u003e\n\u003cli\u003e引入包，不可出现死循坏。即A import B,B import A，这种情况编译失败；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_126"},{"content":"今天给两道类似的题目，注意，有半数以上的人可能会做错！\n题一:\npackage main func main() { var a int8 = -1 var b int8 = -128 / a println(b) } 题二：\npackage main func main() { const a int8 = -1 var b int8 = -128 / a println(b) } 上面2个问题能否通过编译,能编译通过的话会输出什么内容\n🔑 答案解析： 答: 题目一能通过编译 输出的是 -128 题目二不能通过编译 GO语言规范里面有这一句话\n对于带符号整数值来说， + , - , * , / 和 \u0026laquo; 运算可以合法地溢出，其产生的值是存在的并且可以被带符号整数表示法、其运算和操作数明确地定义 因此 -128/-1 = 128，int8的范围是 -128~127 这里的 128就越界了 128 的二进制表示是 10000000 正好是 -128 的补码。所以，第一题的结果是 -128。\n为什么第二题会编译失败呢？\n对于 var b int8 = -128 / a，因为 a 是 int8 类型常量，所以 -128 / a 是常量表达式。编译器计算，结果必然也是常量。 因为 a 的类型是 int8，因此 -128 也会隐式转为 int8 类型，128 这个结果超过了 int8 的范围，但常量不允许溢出，因此编译报错。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_125/","summary":"\u003cp\u003e今天给两道类似的题目，注意，有半数以上的人可能会做错！\u003c/p\u003e\n\u003cp\u003e题一:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e题二：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面2个问题能否通过编译,能编译通过的话会输出什么内容\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:\n题目一能通过编译 输出的是 -128\n题目二不能通过编译\nGO语言规范里面有这一句话\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于带符号整数值来说， + , - , * , / 和 \u0026laquo; 运算可以合法地溢出，其产生的值是存在的并且可以被带符号整数表示法、其运算和操作数明确地定义\n因此 -128/-1 = 128，int8的范围是 -128~127 这里的 128就越界了 128 的二进制表示是 10000000 正好是 -128 的补码。所以，第一题的结果是 -128。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e为什么第二题会编译失败呢？\u003c/p\u003e\n\u003cp\u003e对于 var b int8 = -128 / a，因为 a 是 int8 类型常量，所以 -128 / a 是常量表达式。编译器计算，结果必然也是常量。\n因为 a 的类型是 int8，因此 -128 也会隐式转为 int8 类型，128 这个结果超过了 int8 的范围，但常量不允许溢出，因此编译报错。\u003c/p\u003e","title":"Go每日一题_125"},{"content":"计算机在并发的情况下很大可能会出现数据错乱的问题，因此运入了“锁”用于解决该类问题。 常见的锁：互斥锁、自旋锁、读写锁、悲观锁、乐观锁\n互斥锁 特点：容易实现，最基础的锁概念\n解释：在使用一个资源时，先上锁使用。上锁后其他线程都无法再上锁。直到解锁后，其他线程才能上锁使用。\n生活例子：公共厕所，谁要上厕所就要先上锁后使用，避免其他人也闯入使用厕所。\n自旋锁 自旋锁与互斥锁十分类似。 区别：\n自旋锁：加锁失败，线程还是会不断的去申请加锁，直到他拿到锁 互斥锁：加锁失败，线程会释放CPU资源，等待解锁后在申请上锁。 生活例子 -\u0026gt; 公共厕所 自旋锁：不断的在门口敲门，直到里面的人出来 互斥锁：不动了，直到里面的人出来叫你。\n读写锁 顾名思义就是由读锁和写锁组成的。读数据往往是可以并发的读，并发写数据可能会导致数据不符合预期的情况\n读数据需要满足目前无写锁。 写数据需要满足目前无写锁、读锁。 生活例子：假设一个班级的考试成绩都写到同一个本子上。而学生会读成绩，老师会写成绩。学生看成绩可以同时看，而语文老师和数学老师不能并发的把成绩写到一页里。 读写锁可以分为 读优先锁 写优先锁 公平读写锁\n读优先锁 学生看到有老师在等待改写数据时，不理会老师继续读数据 写优先锁 读数据还需要满足无在等待的写锁\n学生看到有老师在等待改写数据时，会主动让老师写数据。\n公平读写锁 将读学请求放入一个队列，排队的去读写\n学生和老师排个队伍\n乐观锁与悲观锁 互斥锁、自旋锁、读写锁都是悲观锁\n悲观锁：多线程同时修改共享资源的概率比较高，容易发生冲突。因此访问共享资源前需要上锁。 乐观锁：认为发生冲突的概率比较低。并不会上任何的锁，而是校验该数据是否别修改过，修改过着放弃本次操作\n","permalink":"https://loommii.github.io/posts/skill/data/%E9%94%81/","summary":"\u003cp\u003e计算机在并发的情况下很大可能会出现数据错乱的问题，因此运入了“锁”用于解决该类问题。\n常见的锁：互斥锁、自旋锁、读写锁、悲观锁、乐观锁\u003c/p\u003e\n\u003ch2 id=\"互斥锁\"\u003e互斥锁\u003c/h2\u003e\n\u003cp\u003e特点：容易实现，最基础的锁概念\u003c/p\u003e\n\u003cp\u003e解释：在使用一个资源时，先上锁使用。上锁后其他线程都无法再上锁。直到解锁后，其他线程才能上锁使用。\u003c/p\u003e\n\u003cp\u003e生活例子：公共厕所，谁要上厕所就要先上锁后使用，避免其他人也闯入使用厕所。\u003c/p\u003e\n\u003ch2 id=\"自旋锁\"\u003e自旋锁\u003c/h2\u003e\n\u003cp\u003e自旋锁与互斥锁十分类似。\n区别：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自旋锁：加锁失败，线程还是会不断的去申请加锁，直到他拿到锁\u003c/li\u003e\n\u003cli\u003e互斥锁：加锁失败，线程会释放CPU资源，等待解锁后在申请上锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e生活例子 -\u0026gt; 公共厕所\n自旋锁：不断的在门口敲门，直到里面的人出来\n互斥锁：不动了，直到里面的人出来叫你。\u003c/p\u003e\n\u003ch2 id=\"读写锁\"\u003e读写锁\u003c/h2\u003e\n\u003cp\u003e顾名思义就是由\u003ccode\u003e读锁\u003c/code\u003e和\u003ccode\u003e写锁\u003c/code\u003e组成的。读数据往往是可以并发的读，并发写数据可能会导致数据不符合预期的情况\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e读数据需要满足目前无写锁。\u003c/li\u003e\n\u003cli\u003e写数据需要满足目前无写锁、读锁。\n生活例子：假设一个班级的考试成绩都写到同一个本子上。而学生会读成绩，老师会写成绩。学生看成绩可以同时看，而语文老师和数学老师不能并发的把成绩写到一页里。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e读写锁可以分为 \u003ccode\u003e读优先锁\u003c/code\u003e      \u003ccode\u003e写优先锁\u003c/code\u003e  \u003ccode\u003e公平读写锁\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e读优先锁\n学生看到有老师在等待改写数据时，不理会老师继续读数据\u003c/li\u003e\n\u003cli\u003e写优先锁\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e读数据还需要满足无在等待的写锁\u003c/p\u003e\n\u003cp\u003e学生看到有老师在等待改写数据时，会主动让老师写数据。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e公平读写锁\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e将读学请求放入一个队列，排队的去读写\u003c/p\u003e\n\u003cp\u003e学生和老师排个队伍\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"乐观锁与悲观锁\"\u003e乐观锁与悲观锁\u003c/h2\u003e\n\u003cp\u003e互斥锁、自旋锁、读写锁都是悲观锁\u003c/p\u003e\n\u003cp\u003e悲观锁：多线程同时修改共享资源的概率比较高，容易发生冲突。因此访问共享资源前需要上锁。\n乐观锁：认为发生冲突的概率比较低。并不会上任何的锁，而是校验该数据是否别修改过，修改过着放弃本次操作\u003c/p\u003e","title":"锁"},{"content":"程序与内存之间的关系 数据类型本质：固定内存大小的别名 数据类型的作用：编译器预算对象(变量)分配的内存空间大小 内存四区:栈区(Stack),堆区(heap),全局区-静态全局变量区,全局区-常量区 运行流程说明 操作系统把物理硬盘代码load到内存 操作系统把代码分成四个区 操作系统找到main函数入口执行 内存四区 栈区(Stack) :空间较小，要求数据读写性能高，数据存放时间较短暂。由编译器自动分配和释放，存放函数的参数值、函数的调用流程方法地址、局部变量等(局部变量如果产生逃逸现象，可能会挂在在堆区) 堆区(heap):空间充裕，数据存放时间较久。一般由开发者分配及释放(但是Golang中会根据变量的逃逸现象来选择是否分配到栈上或堆上)，启动Golang的GC由GC清除机制自动回收。 全局区-静态全局变量区:全局变量的开辟是在程序在main之前就已经放在内存中。而且对外完全可见。即作用域在全部代码中，任何同包代码均可随时使用，在变量会搞混淆，而且在局部函数中如果同名称变量使用:=赋值会出现编译错误。 全局变量最终在进程退出时，由操作系统回收。 全局区-常量区：常量区也归属于全局区，常量为存放数值字面值单位，即不可修改。或者说的有的常量是直接挂钩字面值的。 比如:\nconst cl = 10 cl是字面量10的对等符号。\n所以在golang中，常量是无法取出地址的，因为字面量符号并没有地址而言。\n","permalink":"https://loommii.github.io/posts/skill/data/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/","summary":"\u003ch2 id=\"程序与内存之间的关系\"\u003e程序与内存之间的关系\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e数据类型本质：固定内存大小的别名\u003c/li\u003e\n\u003cli\u003e数据类型的作用：编译器预算对象(变量)分配的内存空间大小\u003c/li\u003e\n\u003cli\u003e内存四区:栈区(Stack),堆区(heap),全局区-静态全局变量区,全局区-常量区\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"运行流程说明\"\u003e运行流程说明\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e操作系统把物理硬盘代码load到内存\u003c/li\u003e\n\u003cli\u003e操作系统把代码分成四个区\u003c/li\u003e\n\u003cli\u003e操作系统找到main函数入口执行\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"内存四区\"\u003e内存四区\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e栈区(Stack) :空间较小，要求数据读写性能高，数据存放时间较短暂。由编译器自动分配和释放，存放函数的参数值、函数的调用流程方法地址、局部变量等(局部变量如果产生逃逸现象，可能会挂在在堆区)\u003c/li\u003e\n\u003cli\u003e堆区(heap):空间充裕，数据存放时间较久。一般由开发者分配及释放(但是Golang中会根据变量的逃逸现象来选择是否分配到栈上或堆上)，启动Golang的GC由GC清除机制自动回收。\u003c/li\u003e\n\u003cli\u003e全局区-静态全局变量区:全局变量的开辟是在程序在main之前就已经放在内存中。而且对外完全可见。即作用域在全部代码中，任何同包代码均可随时使用，在变量会搞混淆，而且在局部函数中如果同名称变量使用:=赋值会出现编译错误。\n全局变量最终在进程退出时，由操作系统回收。\u003c/li\u003e\n\u003cli\u003e全局区-常量区：常量区也归属于全局区，常量为存放数值字面值单位，即不可修改。或者说的有的常量是直接挂钩字面值的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e比如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecl\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ecl是字面量10的对等符号。\u003c/p\u003e\n\u003cp\u003e所以在golang中，常量是无法取出地址的，因为字面量符号并没有地址而言。\u003c/p\u003e","title":"程序与内存之间的关系"},{"content":" 从计算机的发展上,这概念从大到小的顺序是程序-\u0026gt;进程-\u0026gt;线程-\u0026gt;协程\n基础概念 进程：系统进行资源调度和分配的的基本单位 线程：线程是操作系统调度与执行的基础单位 协程：又称为用户级线程、微线程 核心点 进程 是操作系统资源调度的基础单位单元； 进程是能独立运行、独立获取资源的基本单位 线程 是操作系统最小调度单元； 创建、销毁、调度交由内核完成，cpu 需完成用户态与内核态间的切换； 可充分利用多核，实现并行. 协程 与线程存在映射关系，为 M：1； 创建、销毁、调度在用户态完成，对内核透明，所以更轻； 从属同一个内核级线程，无法并行；一个协程阻塞会导致从属同一线程的所有协程无法执行. 生活例子 CPU 电力 进程 工厂 线程 工厂部门\n假设这个城市就一个工厂(进程)、 一个工厂部门(线程)、一条电线(单核)的情况。 这时候工厂(进程) 中的一个工厂部门(线程)，电线(单核)可以完全为他工作。\n但是现在出现问题了，现在任务量太大了，工厂就划分了2个工厂部门(线程)，让这2个部门同时干活，但是现在只有一条电线(单核)，因此这2个部门不得不轮流用电（CPU时间片）。\n但是现在又出现问题了，老板发现切换电源需要有资质的电工来操作（内核），每次切换的开销太大了。因此把这些让一个工厂部门(线程)长期通电，自己内部让原先2个部门的人轮流进去通电的工厂部门内工作。应为这是工厂内部的人员（用户态）调度，不涉及电工（内核态）。切换的代价相对较小，这就是协程\n","permalink":"https://loommii.github.io/posts/skill/data/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/","summary":"\u003cblockquote\u003e\n\u003cp\u003e从计算机的发展上,这概念从大到小的顺序是\u003ccode\u003e程序-\u0026gt;进程-\u0026gt;线程-\u0026gt;协程\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"基础概念\"\u003e基础概念\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e进程：系统进行资源调度和分配的的基本单位\u003c/li\u003e\n\u003cli\u003e线程：线程是操作系统调度与执行的基础单位\u003c/li\u003e\n\u003cli\u003e协程：又称为用户级线程、微线程\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"核心点\"\u003e核心点\u003c/h2\u003e\n\u003ch3 id=\"进程\"\u003e进程\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e是操作系统资源调度的基础单位单元；\u003c/li\u003e\n\u003cli\u003e进程是能独立运行、独立获取资源的基本单位\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"线程\"\u003e线程\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e是操作系统最小调度单元；\u003c/li\u003e\n\u003cli\u003e创建、销毁、调度交由内核完成，cpu 需完成用户态与内核态间的切换；\u003c/li\u003e\n\u003cli\u003e可充分利用多核，实现并行.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"协程\"\u003e协程\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e与线程存在映射关系，为 M：1；\u003c/li\u003e\n\u003cli\u003e创建、销毁、调度在用户态完成，对内核透明，所以更轻；\u003c/li\u003e\n\u003cli\u003e从属同一个内核级线程，无法并行；一个协程阻塞会导致从属同一线程的所有协程无法执行.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e生活例子\nCPU 电力\n进程 工厂\n线程 工厂部门\u003c/p\u003e\n\u003cp\u003e假设这个城市就一个工厂(进程)、 一个工厂部门(线程)、一条电线(单核)的情况。\n这时候工厂(进程) 中的一个工厂部门(线程)，电线(单核)可以完全为他工作。\u003c/p\u003e\n\u003cp\u003e但是现在出现问题了，现在任务量太大了，工厂就划分了2个工厂部门(线程)，让这2个部门同时干活，但是现在只有一条电线(单核)，因此这2个部门不得不轮流用电（CPU时间片）。\u003c/p\u003e\n\u003cp\u003e但是现在又出现问题了，老板发现切换电源需要有资质的电工来操作（内核），每次切换的开销太大了。因此把这些让一个工厂部门(线程)长期通电，自己内部让原先2个部门的人轮流进去通电的工厂部门内工作。应为这是工厂内部的人员（用户态）调度，不涉及电工（内核态）。切换的代价相对较小，这就是协程\u003c/p\u003e","title":"进程、线程、协程"},{"content":"名词解释 原码:原码是最简单的整数表示方法，其中最高位用来表示符号（0表示正数，1表示负数），其余位表示数值的绝对值。例如，+5的原码是00000101，-5的原码是10000101。 反码:反码是通过对原码取反得到的，即将正数的原码保持不变，负数的原码的所有位取反（包括符号位）。例如，+5的反码是00000101（与原码相同），-5的反码是11111010。 补码:补码是计算机中最常用的整数表示方法。正数的补码与其原码相同，而负数的补码是其反码加1。补码的特点是在进行加减法运算时，不需要单独处理符号位。例如，+5的补码是00000101，-5的补码是11111011。 移码:移码是一种不常见的整数表示方法，在计算机领域中较少使用。它与补码类似，但是所有的数值都被偏移了一个固定的值，通常是一个中间值，以使得正数的表示始终比负数的表示更大。这种表示方法在某些特殊的硬件设计中可能会使用。 例子 1.原码为正数\n整数 +1 0000 0001 // 原码 0000 0001 // 反码 // 正数的 反码 = 原码 0000 0001 // 补码 // 正数的 补码 = 反码 = 原码 1000 0001 // 移码 // 移码 = 补码的符号位取反 2.原码为0\n整数 +0 0000 0000 // 原码 0000 0000 // 反码 // 正数的 反码 = 原码 0000 0000 // 补码 // 正数的 补码 = 反码 = 原码 1000 0000 // 移码 // 移码 = 补码的符号位取反 整数 -0 1000 0000 // 原码 1111 1111 // 反码 // 负数的 反码 = 原码除符号位不变 其他全取反 0000 0000 // 补码 // 负数的 补码 = 反码+1 //这里由于越界,取后8位则结果为8个0 1000 0000 // 移码 // 移码 = 补码的符号位取反 3.原码为负数\n整数 -1 1000 0001 // 原码 1111 1110 // 反码 // 负数的 反码 = 原码除符号位不变 其他全取反 1111 1111 // 补码 // 负数的 补码 = 反码+1 0110 1111 // 移码 // 移码 = 补码的符号位取反 应用场景 原码：符合人类直觉，是最简单的整数表示方法\n反码：\n1.诞生的前景：CPU擅长加法运算，因此为了提高运算速度，会将减法也转为加法 例如 1 - 1 会转为 1 + (-1) 。此时发现计算结果不符合预期\n0000 0001 // 1 + 1000 0001 // -1 —————————————— 1000 0010 // -2 2.解决什么问题：解决原码运算中，将符号位也参与运算会导致计算结果不符合预期的问题。\n0000 0001 // 1 + 1111 1110 // -1 —————————————— 1111 1111 // -0 0000 0001 // 1 + 1111 1101 // -2 —————————————— 1111 1110 // -1 3.还有什么问题：原码和反码都存在+0和-0的问题，计算-0会计算结果不符合预期的问题\n0000 0001 // 1 + 1111 1111 // -0 —————————————— 0000 0000 // +0 补码：\n诞生的前景：反码解决了大部分的计算问题，但是在连续计算中不可避免会出现-0导致计算结果不符合预期。 解决什么问题：原码和反码中 0的表示不一致，以及导致的运算错误的问题。（-+0） ","permalink":"https://loommii.github.io/posts/skill/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/","summary":"\u003ch2 id=\"名词解释\"\u003e名词解释\u003c/h2\u003e\n\u003cp\u003e原码:原码是最简单的整数表示方法，其中最高位用来表示符号（0表示正数，1表示负数），其余位表示数值的绝对值。例如，+5的原码是00000101，-5的原码是10000101。\n反码:反码是通过对原码取反得到的，即将正数的原码保持不变，负数的原码的所有位取反（包括符号位）。例如，+5的反码是00000101（与原码相同），-5的反码是11111010。\n补码:补码是计算机中最常用的整数表示方法。正数的补码与其原码相同，而负数的补码是其反码加1。补码的特点是在进行加减法运算时，不需要单独处理符号位。例如，+5的补码是00000101，-5的补码是11111011。\n移码:移码是一种不常见的整数表示方法，在计算机领域中较少使用。它与补码类似，但是所有的数值都被偏移了一个固定的值，通常是一个中间值，以使得正数的表示始终比负数的表示更大。这种表示方法在某些特殊的硬件设计中可能会使用。\n\u003cimg alt=\"关系\" loading=\"lazy\" src=\"/posts/skill/data/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%A7%BB%E7%A0%81/%E5%85%B3%E7%B3%BB.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"例子\"\u003e例子\u003c/h2\u003e\n\u003cp\u003e1.原码为正数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e整数 +1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0001  // 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0001  // 反码  // 正数的 反码 = 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0001  // 补码  // 正数的 补码 = 反码 = 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1000 0001  // 移码  // 移码 = 补码的符号位取反\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2.原码为0\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e整数 +0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0000  // 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0000  // 反码  // 正数的 反码 = 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0000  // 补码  // 正数的 补码 = 反码 = 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1000 0000  // 移码  // 移码 = 补码的符号位取反\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e整数 -0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1000 0000  // 原码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1111 1111  // 反码  // 负数的 反码 = 原码除符号位不变 其他全取反\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0000 0000  // 补码  // 负数的 补码 = 反码+1 //这里由于越界,取后8位则结果为8个0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1000 0000  // 移码  // 移码 = 补码的符号位取反\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e3.原码为负数\u003c/p\u003e","title":"原码、反码、补码、移码"},{"content":"力扣链接:688. 骑士在棋盘上的概率\n力扣难度 中等\n题目:\n在一个 n x n 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 k 次移动。行和列是 从 0 开始 的，所以左上单元格是 (0,0) ，右下单元格是 (n - 1, n - 1) 。\n象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格 每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。\n骑士继续移动，直到它走了 k 步或离开了棋盘。\n返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。\n示例 1：\n输入: n = 3, k = 2, row = 0, column = 0 输出: 0.0625 解释: 有两步(到(1,2)，(2,1))可以让骑士留在棋盘上。 在每一个位置上，也有两种移动可以让骑士留在棋盘上。 骑士留在棋盘上的总概率是0.0625。\n示例 2：\n输入: n = 1, k = 0, row = 0, column = 0 输出: 1.00000\nfunc knightProbability(n int, k int, row int, column int) float64 { } 🧠思路: 👈点击 子问题. 在示例 1 中，我们要解决的问题（原问题）是： 马从 (0,0) 出发，走 k=2 步后仍然在棋盘上的概率。 枚举马走的八个方向，假设走到了 (1,2)，问题变成： 马从 (1,2) 出发，走 k−1=1 步后仍然在棋盘上的概率。 这是和原问题相似的、规模更小的子问题，可以用递归解决。 🔑 答案解析： 👈点击 递归 var dirs = []struct{ x, y int }{{2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}, {1, -2}, {2, -1}} func knightProbability(n int, k int, row int, column int) float64 { var dfs func(int, int, int) float64 dfs = func(k, i, j int) float64 { if i \u0026lt; 0 || j \u0026lt; 0 || i \u0026gt;= n || j \u0026gt;= n { // 出界 return 0 } if k == 0 { return 1 } res := 0.0 // 概率 for _, d := range dirs { res += dfs(k-1, i+d.x, j+d.y) } res /= 8 return res } return dfs(k, row, column) } 记忆化递归 var dirs = []struct{ x, y int }{{2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}, {1, -2}, {2, -1}} func knightProbability(n int, k int, row int, column int) float64 { memo := make([][][]float64, k+1) for i := range memo { memo[i] = make([][]float64, n) for j := range memo[i] { memo[i][j] = make([]float64, n) } } var dfs func(int, int, int) float64 dfs = func(k, i, j int) float64 { if i \u0026lt; 0 || j \u0026lt; 0 || i \u0026gt;= n || j \u0026gt;= n { // 出界 return 0 } if k == 0 { return 1 } p := memo[k][i][j] if p \u0026gt; 0 { return p } res := 0.0 // 概率 for _, d := range dirs { res += dfs(k-1, i+d.x, j+d.y) } res /= 8 memo[k][i][j] = res return res } ans := dfs(k, row, column) return ans } DP 递归1:1改递推 var dirs = []struct{ x, y int }{{2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}, {1, -2}, {2, -1}} func knightProbability(n, k, row, column int) float64 { memo := make([][][]float64, k+1) for i := range memo { memo[i] = make([][]float64, n) for j := range memo[i] { memo[i][j] = make([]float64, n) } } var dfs func(int, int, int) float64 dfs = func(k, i, j int) float64 { if i \u0026lt; 0 || j \u0026lt; 0 || i \u0026gt;= n || j \u0026gt;= n { return 0 } if k == 0 { return 1 } p := \u0026amp;memo[k][i][j] if *p \u0026gt; 0 { return *p } res := 0.0 for _, d := range dirs { res += dfs(k-1, i+d.x, j+d.y) } res /= 8 *p = res return res } return dfs(k, row, column) } ","permalink":"https://loommii.github.io/posts/leetcode/data/688_%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/","summary":"\u003cp\u003e力扣链接:\u003ca href=\"https://leetcode.cn/problems/knight-probability-in-chessboard/description/?envType=daily-question\u0026amp;envId=2024-12-07\"\u003e688. 骑士在棋盘上的概率\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e力扣难度 \u003ccode\u003e中等\u003c/code\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e题目:\u003c/p\u003e\n\u003cp\u003e在一个 \u003ccode\u003en x n\u003c/code\u003e 的国际象棋棋盘上，一个骑士从单元格 \u003ccode\u003e(row, column)\u003c/code\u003e 开始，并尝试进行 \u003ccode\u003ek\u003c/code\u003e 次移动。行和列是 从 \u003ccode\u003e0\u003c/code\u003e 开始 的，所以左上单元格是 \u003ccode\u003e(0,0)\u003c/code\u003e ，右下单元格是 \u003ccode\u003e(n - 1, n - 1)\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格\n\u003cimg alt=\"象棋骑士\" loading=\"lazy\" src=\"/posts/leetcode/data/688_%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/knight.png\"\u003e\n每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。\u003c/p\u003e\n\u003cp\u003e骑士继续移动，直到它走了 \u003ccode\u003ek\u003c/code\u003e 步或离开了棋盘。\u003c/p\u003e\n\u003cp\u003e返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入: n = 3, k = 2, row = 0, column = 0\n输出: 0.0625\n解释: 有两步(到(1,2)，(2,1))可以让骑士留在棋盘上。\n在每一个位置上，也有两种移动可以让骑士留在棋盘上。\n骑士留在棋盘上的总概率是0.0625。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入: n = 1, k = 0, row = 0, column = 0\n输出: 1.00000\u003c/p\u003e","title":"688_骑士在棋盘上的概率"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { t := struct { time.Time N int }{ time.Date(2020, 12, 20, 0, 0, 0, 0, time.UTC), 5, } m, _ := json.Marshal(t) fmt.Printf(\u0026#34;%s\u0026#34;, m) } A：{\u0026ldquo;Time\u0026rdquo;: \u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;, \u0026ldquo;N\u0026rdquo;: 5 }；B：\u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;；C：{\u0026ldquo;N\u0026rdquo;: 5}；D：\u0026lt;nil\u0026gt;\n🔑 答案解析： 答 B 题中time.Time 是内嵌到匿名struct 中的，也就是继承了time.Time 。 time.Time 的重写了MarshalJSON 方法因此会按照time.Time 的MarshalJSON 规定的格式输出 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_124/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDate\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2020\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUTC\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMarshal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：{\u0026ldquo;Time\u0026rdquo;: \u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;, \u0026ldquo;N\u0026rdquo;: 5 }；B：\u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;；C：{\u0026ldquo;N\u0026rdquo;: 5}；D：\u003ccode\u003e\u0026lt;nil\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答 B\n题中time.Time 是内嵌到匿名struct 中的，也就是继承了time.Time 。\ntime.Time 的重写了MarshalJSON 方法因此会按照time.Time  的MarshalJSON 规定的格式输出\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_124"},{"content":"以下代码打印出来什么内容，说出为什么。\npackage main import ( \u0026#34;fmt\u0026#34; ) type People interface { Show() } type Student struct{} func (stu *Student) Show() { } func live() People { var stu *Student return stu } func main() { if live() == nil { fmt.Println(\u0026#34;AAAAAAA\u0026#34;) } else { fmt.Println(\u0026#34;BBBBBBB\u0026#34;) } } 🔑 答案解析： 答：BBBBBBB 简单来说,接口变量有2个值,一个是类型,另一个是值。 if 接口 时,值和类型都为零值时,接口live() == nil 判断才为T\n接口interface内部结构 interface共有2种表现形式\n// 1 空接口 var MyInterface interface{} // 2 非空接口 type MyInterface interface { function() } 对应的2种底层结构\n空接口 type eface struct { // 空接口 _type *_type // 类型信息 data unsafe.Pointer // 指向数据的指针(go 语言中特殊的指针类型 unsafe.Pointer 类似于 c 语言中的void*) } type _type struct { size uintptr // 类型大小 ptrdata uintptr // 前缀持有所有指针的内存大小 hash uint32 // 数据 hash 值 tflag tflag align uint8 // 对齐 fieldalign uint8 // 嵌入结构体时的对齐 kind uint8 // kind 有些枚举值 kind 等于 0 是无效的 // function for comparing objects of this type // (ptr to object A, ptr to object B) -\u0026gt; ==? equal func(unsafe.Pointer, unsafe.Pointer) bool gcdata *byte str nameOff ptrToThis typeOff } _type 属性：是 Go 语言中所有类型的公共描述，Go 语言几乎所有的数据结构都可以抽象成_type，是所有类型的公共描述，_type 负责决定 data 应该如何解释和操作 data 属性： 表示指向具体的实例数据的指针，它是一个unsafe.Pointer类型，相当于一个 C 的万能指针void*。\n非空接口 /// 非空接口 type iface struct { tab *itab data unsafe.Pointer } type itab struct { inter *interfacetype // 接口自身的元信息 _type *_type // 具体类型的元信息 hash int32 // _type 里也有一个同样的 hash，此处多放一个是为了方便运行接口断言 _ [4]byte fun [1]uintptr // 函数指针，指向具体类型所实现的方法 } // itab 里面包含了 interface 的一些关键信息，比如 method 的具体实现。\ninterface type包含了一些关于 interface 本身的信息，比如package path，包含的method。这里的interfacetype 是定义 interface 的一种抽象表示。 _type表示具体化的类型，与 eface 的_type 类型相同。 ash字段其实是对_type.hash的拷贝，它会在 interface 的实例化时，用于快速判断目标类型和接口中的类型是否一致。另，Go 的 interface 的 Duck-typing 机制也是依赖这个字段来实现。 fun字段其实是一个动态大小的数组，虽然声明时是固定大小为 1，但在使用时会直接通过 fun 指针获取其中的数据，并且不会检查数组的边界，所以该数组中保存的元素数量是不确定的。 回到本题 People 拥有一个 Show 方法，属于非空接口\ntype iface struct { tab *itab data unsafe.Pointer } func live() People { var stu *Student return stu } live() == nil 这里接口的itab已经指向Student。因此接口不为nil\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_123/","summary":"\u003cp\u003e以下代码打印出来什么内容，说出为什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elive\u003c/span\u003e() \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elive\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AAAAAAA\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;BBBBBBB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：BBBBBBB\n简单来说,接口变量有2个值,一个是类型,另一个是值。\nif 接口 时,值和类型都为零值时,接口live() == nil 判断才为T\u003c/p\u003e\n\u003ch2 id=\"接口interface内部结构\"\u003e接口interface内部结构\u003c/h2\u003e\n\u003cp\u003einterface共有2种表现形式\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1 空接口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInterface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2 非空接口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInterface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efunction\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对应的2种底层结构\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e空接口\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eeface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {      \u003cspan style=\"color:#75715e\"\u003e// 空接口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e_type\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e_type\u003c/span\u003e         \u003cspan style=\"color:#75715e\"\u003e// 类型信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 指向数据的指针(go 语言中特殊的指针类型 unsafe.Pointer 类似于 c 语言中的void*)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_type\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 类型大小\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eptrdata\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 前缀持有所有指针的内存大小\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehash\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003euint32\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// 数据 hash 值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etflag\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003etflag\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ealign\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 对齐\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efieldalign\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 嵌入结构体时的对齐\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ekind\u003c/span\u003e       \u003cspan style=\"color:#66d9ef\"\u003euint8\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// kind 有些枚举值 kind 等于 0 是无效的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// function for comparing objects of this type\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// (ptr to object A, ptr to object B) -\u0026gt; ==?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eequal\u003c/span\u003e     \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egcdata\u003c/span\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e       \u003cspan style=\"color:#a6e22e\"\u003enameOff\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eptrToThis\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etypeOff\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e_type 属性：是 Go 语言中所有类型的公共描述，Go 语言几乎所有的数据结构都可以抽象成_type，是所有类型的公共描述，_type 负责决定 data 应该如何解释和操作\ndata 属性： 表示指向具体的实例数据的指针，它是一个unsafe.Pointer类型，相当于一个 C 的万能指针void*。\u003c/p\u003e","title":"Go每日一题_123"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } 🔑 答案解析： 答：45.2 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_122/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5.2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答：45.2\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_122"},{"content":"下面代码会输出什么\nfunc increaseA() int { var i int defer func() { i++ }() return i } func increaseB() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(increaseA()) fmt.Println(increaseB()) } 🔑 答案解析： 0 1 上方2个函数的区别在于increaseA() 的返回参数是匿名，increaseB() 是具名。 A 执行到return i 是将i的值赋值给返回参数，后面i++不影响 B 执行到return r 是将r赋值给r,后面的r++ 因为是同一个r 后面的r++会影响\nfunc increaseB() (r int) { defer func() { r++ }() return 4 } // 返回5 上面的代码就可以证明return 4 赋值给了r\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_121/","summary":"\u003cp\u003e下面代码会输出什么\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e0\n1\n上方2个函数的区别在于increaseA() 的返回参数是匿名，increaseB() 是具名。\nA 执行到return i 是将i的值赋值给返回参数，后面i++不影响\nB 执行到return r 是将r赋值给r,后面的r++ 因为是同一个r 后面的r++会影响\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 返回5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的代码就可以证明return 4 赋值给了r\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_121"},{"content":"下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\nA: x, _ := f() B: x, _ = f() C: x, y := f() D: x, y = f() 🔑 答案解析： A错、B对、C对、D错 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_120/","summary":"\u003cp\u003e下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eD\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A错、B对、C对、D错\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_120"},{"content":"有下面 3 行代码：\n下面代码输出什么？\n// 32 位机器 1）var x int32 = 32.0 2）var y int = x 3）var z rune = x 它们是否能编译通过？为什么？\n如果面试时问这道题，你需要想想面试官想考察你什么。 🔑 答案解析： 参考答案及解析： 答 不能通过编译\n这里是允许的 因为 32.0 是无类型字面量 可以 赋值给 int32 2）int 在32位机器占32位 在 64位机器占64位，题中int 虽然和 int32 占相同的空间，但是因为是不同的类型 无法赋值 编译错误 3）rune是int32 的别名，可以通过编译 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_119/","summary":"\u003cp\u003e有下面 3 行代码：\u003c/p\u003e\n\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 32 位机器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它们是否能编译通过？为什么？\u003c/p\u003e\n\u003cp\u003e如果面试时问这道题，你需要想想面试官想考察你什么。\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：\n答 不能通过编译\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e这里是允许的 因为 32.0 是无类型字面量 可以 赋值给 int32\n2）int 在32位机器占32位 在 64位机器占64位，题中int 虽然和 int32 占相同的空间，但是因为是不同的类型 无法赋值 编译错误\n3）rune是int32 的别名，可以通过编译\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_119"},{"content":"Go101 发布的一条 twitter。以下代码是否能正常运行，结果是？ 下面代码输出什么？\npackage main func main() { v := new(int) *v = 2 println(5/+-*v) } 🔑 答案解析： 参考答案及解析：B。\nGo 中有如下几个一元运算符\nunary_op = \u0026#34;+\u0026#34; | \u0026#34;-\u0026#34; | \u0026#34;!\u0026#34; | \u0026#34;^\u0026#34; | \u0026#34;*\u0026#34; | \u0026#34;\u0026amp;\u0026#34; | \u0026#34;\u0026lt;-\u0026#34; . 因此会先计算 5/+-*v 又因为规范\n对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释） +x 是 0 + x -x 取其负值 是 0 - x\n因此转化后 5 / [0+(0-*v)] 、 5 / -2\n又因为强制类型转换 -2.5 成了 -2\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_118/","summary":"\u003cp\u003eGo101 发布的一条 twitter。以下代码是否能正常运行，结果是？\n下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/+-*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003eGo 中有如下几个一元运算符\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eunary_op\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;+\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026amp;\u0026#34;\u003c/span\u003e | \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;-\u0026#34;\u003c/span\u003e .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因此会先计算 5/+-*v\n又因为规范\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于整数操作数，一元运算符 + , - 和 ^ 有如下定义：（省略了 ^ 的解释）\n+x 　　　　 是 0 + x\n-x 取其负值 是 0 - x\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e因此转化后 5 / [0+(0-*v)] 、 5 / -2\u003cbr\u003e\n又因为强制类型转换 -2.5 成了 -2\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_118"},{"content":"下面代码输出什么？\ntype A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowB()) fmt.Println(b.ShowA()) } A. 23 13 B. compilation error 🔑 答案解析： 参考答案及解析：B。\na接口没有ShowB方法 b接口没有ShowA方法 因此编译不通过\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_117/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 23 13\nB. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003ea接口没有ShowB方法\nb接口没有ShowA方法\n因此编译不通过\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_117"},{"content":"下面这段代码输出什么？\ntype A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowA()) fmt.Println(b.ShowB()) } 🔑 答案解析： 答 可以成功编译 且输出 13 和 23\nc := Work{3} // 这里声明了变量c 并且赋值了结构体 Work{3}\rvar a A = c // 因为A 是接口，这里要看c结构体 Work是否实现了接口A要求的函数ShowA() int。这题是有func (w Work) ShowA() int { 因此是可以正确的赋值的。\rvar b B = c// 与A同理\rfmt.Println(a.ShowA()) // a接口下有ShowA 因此也可以成功调用\rfmt.Println(b.ShowB()) //与a同理 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_116/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 可以成功编译 且输出 13 和 23\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    c := Work{3} // 这里声明了变量c 并且赋值了结构体 Work{3}\r\n    var a A = c // 因为A 是接口，这里要看c结构体 Work是否实现了接口A要求的函数ShowA() int。这题是有func (w Work) ShowA() int { 因此是可以正确的赋值的。\r\n    var b B = c// 与A同理\r\n    fmt.Println(a.ShowA())  // a接口下有ShowA 因此也可以成功调用\r\n    fmt.Println(b.ShowB()) //与a同理\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_116"},{"content":"对 add() 函数调用正确的是？\nfunc add(args ...int) int { sum := 0 for _, arg := range args { sum += arg } return sum } A. add(1, 2) B. add(1, 3, 7) C. add([]int{1, 2}) D. add([]int{1, 3, 7}\u0026hellip;) 🔑 答案解析： 参考答案及解析：ABD。\n知识点：可变函数。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_115/","summary":"\u003cp\u003e对 add() 函数调用正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003earg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003earg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. add(1, 2)\nB. add(1, 3, 7)\nC. add([]int{1, 2})\nD. add([]int{1, 3, 7}\u0026hellip;)\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：ABD。\u003c/p\u003e\n\u003cp\u003e知识点：可变函数。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_115"},{"content":"下面这段代码能否通过编译，如果可以，输出什么？\nfunc main() { s1 := []int{1, 2, 3} s2 := []int{4, 5} s1 = append(s1, s2) fmt.Println(s1) } 🔑 答案解析： 答：不能通过编译。append() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_114/","summary":"\u003cp\u003e下面这段代码能否通过编译，如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答：不能通过编译。append() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_114"},{"content":"f1()、f2()、f3() 函数分别返回什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func f1() (r int) { defer func() { r++ }() return 0 } func f2() (r int) { t := 5 defer func() { t = t + 5 }() return t } func f3() (r int) { defer func(r int) { r = r + 5 }(r) return 1 } func main() { fmt.Println(f1()) fmt.Println(f2()) fmt.Println(f3()) } 🔑 答案解析： 参考答案及解析：1 5 1。\n知识点：defer、返回值。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_113/","summary":"\u003cp\u003ef1()、f2()、f3() 函数分别返回什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef3\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef3\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：1 5 1。\u003c/p\u003e\n\u003cp\u003e知识点：defer、返回值。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_113"},{"content":"下面代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) type A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { var a A = Work{3} // 类型断言 // http://c.biancheng.net/view/4281.html s := a.(Work) fmt.Println(s.ShowA()) fmt.Println(s.ShowB()) } A. 13 23 B. compilation error 🔑 答案解析： 13\r23 参考答案及解析：A。\n知识点：类型断言 这道题可以和第 15 天的第三题 和第 16 天的第三题结合起来看。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_112/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 类型断言\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// http://c.biancheng.net/view/4281.html\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 13 23\u003c/li\u003e\n\u003cli\u003eB. compilation error\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e13\r\n23\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e参考答案及解析：A。\u003c/p\u003e\n\u003ch3 id=\"知识点类型断言\"\u003e知识点：类型断言\u003c/h3\u003e\n\u003cp\u003e这道题可以和第 15 天的第三题 和第 16 天的第三题结合起来看。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_112"},{"content":"下面代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func increaseA() int { var i int defer func() { i++ }() return i } func increaseB() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(increaseA()) fmt.Println(increaseB()) } A. 1 1 B. 0 1 C. 1 0 D. 0 0 🔑 答案解析： 参考答案及解析：B。\n知识点：defer、返回值。注意一下，increaseA() 的返回参数是匿名，increaseB() 是具名。关于 defer 与返回值的知识点，后面我会写篇文章详细分析，到时候可以看下文章的讲解。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_111/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 1 1\nB. 0 1\nC. 1 0\nD. 0 0\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003e知识点：defer、返回值。注意一下，increaseA() 的返回参数是匿名，increaseB() 是具名。关于 defer 与返回值的知识点，后面我会写篇文章详细分析，到时候可以看下文章的讲解。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_111"},{"content":"如果 Add() 函数的调用代码为：\nfunc main() { var a Integer = 1 var b Integer = 2 var i interface{} = \u0026amp;a sum := i.(*Integer).Add(b) fmt.Println(sum) } 则Add函数定义正确的是：\nA. type Integer int func (a Integer) Add(b Integer) Integer { return a + b } B. type Integer int func (a Integer) Add(b *Integer) Integer { return a + *b } C. type Integer int func (a *Integer) Add(b Integer) Integer { return *a + b } D. type Integer int func (a *Integer) Add(b *Integer) Integer { return *a + *b } 🔑 答案解析： AC 如果是func (a Integer) 编译会自动帮你添加 func (a *Integer) 反过来则不行 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_110/","summary":"\u003cp\u003e如果 Add() 函数的调用代码为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e则Add函数定义正确的是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eD\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eInteger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  AC\n如果是func (a Integer) 编译会自动帮你添加 func (a *Integer)\n反过来则不行\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_110"},{"content":"关于switch语句，下面说法正确的有?\nA. 条件表达式必须为常量或者整数； B. 单个case中，可以出现多个结果选项； C. 需要用break来明确退出一个case； D. 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case；\n🔑 答案解析： BD A 是可以放表达式的 C 不需要使用break ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_109/","summary":"\u003cp\u003e关于switch语句，下面说法正确的有?\u003c/p\u003e\n\u003cp\u003eA. 条件表达式必须为常量或者整数；\nB. 单个case中，可以出现多个结果选项；\nC. 需要用break来明确退出一个case；\nD. 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case；\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  BD\nA 是可以放表达式的\nC 不需要使用break\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_109"},{"content":"关于类型转化，下面选项正确的是？\nA. type MyInt int var i int = 1 var j MyInt = i B. type MyInt int var i int = 1 var j MyInt = (MyInt)i C. type MyInt int var i int = 1 var j MyInt = MyInt(i) D. type MyInt int var i int = 1 var j MyInt = i.(MyInt) 🔑 答案解析： C ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_108/","summary":"\u003cp\u003e关于类型转化，下面选项正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = (\u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eD\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eMyInt\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  C\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_108"},{"content":"下面代码输出正确的是？\nfunc main() { i := 1 s := []string{\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;} i, s[i-1] = 2, \u0026#34;Z\u0026#34; fmt.Printf(\u0026#34;s: %v \\n\u0026#34;, s) } A. s: [Z,B,C] B. s: [A,Z,C]\n🔑 答案解析： A\n平行赋值a[i], a[j] = a[j], a[i]\n多重赋值分为两个步骤，有先后顺序： 计算等号左边的索引表达式和取址表达式，接着计算等号右边的表达式； 赋值； 所以本例，会先计算 s[i-1]，等号右边是两个表达式是常量，所以赋值运算等同于 i, s[0] = 2, \u0026ldquo;Z\u0026rdquo;。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_107/","summary":"\u003cp\u003e下面代码输出正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Z\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s: %v \\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. s: [Z,B,C]\nB. s: [A,Z,C]\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA\u003c/p\u003e\n\u003cp\u003e平行赋值a[i], a[j] = a[j], a[i]\u003c/p\u003e\n\u003cp\u003e多重赋值分为两个步骤，有先后顺序：\n计算等号左边的索引表达式和取址表达式，接着计算等号右边的表达式；\n赋值；\n所以本例，会先计算 s[i-1]，等号右边是两个表达式是常量，所以赋值运算等同于 i, s[0] = 2, \u0026ldquo;Z\u0026rdquo;。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_107"},{"content":"关于循环语句，下面说法正确的有（）\nA. 循环语句既支持 for 关键字，也支持 while 和 do-while； B. 关键字 for 的基本使用方法与 C/C++ 中没有任何差异； C. for 循环支持 continue 和 break 来控制循环，但是它提供了一个更高级的 break，可以选择中断哪一个循环； D. for 循环不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量；\n🔑 答案解析： CD 平行赋值a[i], a[j] = a[j], a[i] ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_106/","summary":"\u003cp\u003e关于循环语句，下面说法正确的有（）\u003c/p\u003e\n\u003cp\u003eA. 循环语句既支持 for 关键字，也支持 while 和 do-while；\nB. 关键字 for 的基本使用方法与 C/C++ 中没有任何差异；\nC. for 循环支持 continue 和 break 来控制循环，但是它提供了一个更高级的 break，可以选择中断哪一个循环；\nD. for 循环不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量；\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  CD\n平行赋值a[i], a[j] = a[j], a[i]\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_106"},{"content":"下面代码里的 counter 的输出值？\nfunc main() { var m = map[string]int{ \u0026#34;A\u0026#34;: 21, \u0026#34;B\u0026#34;: 22, \u0026#34;C\u0026#34;: 23, } counter := 0 for k, v := range m { if counter == 0 { delete(m, \u0026#34;A\u0026#34;) } counter++ fmt.Println(k, v) } fmt.Println(\u0026#34;counter is \u0026#34;, counter) } A. 2 B. 3 C. 2 或 3 🔑 答案解析： C map是引用类型 会影响原map ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_105/","summary":"\u003cp\u003e下面代码里的 counter 的输出值？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delete(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;counter is \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecounter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 2\u003c/li\u003e\n\u003cli\u003eB. 3\u003c/li\u003e\n\u003cli\u003eC. 2 或 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  C\nmap是引用类型 会影响原map\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_105"},{"content":"下面这段代码输出结果正确吗？\ntype Foo struct { bar string } func main() { s1 := []Foo{ {\u0026#34;A\u0026#34;}, {\u0026#34;B\u0026#34;}, {\u0026#34;C\u0026#34;}, } s2 := make([]*Foo, len(s1)) for i, value := range s1 { s2[i] = \u0026amp;value } fmt.Println(s1[0], s1[1], s1[2]) fmt.Println(s2[0], s2[1], s2[2]) } 输出： {A} {B} {C} \u0026amp;{A} \u0026amp;{B} \u0026amp;{C} 🔑 答案解析： go 1.22 后输出是正常的 go \u0026lt; 1.22 for range 循环会重复使用value变量 value的地址都是同一个，因此输出s2 会变成CCC ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_104/","summary":"\u003cp\u003e下面这段代码输出结果正确吗？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFoo\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebar\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003eFoo\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eFoo\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e输出\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e} {\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e} {\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e} \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e} \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  go 1.22 后输出是正常的\ngo \u0026lt; 1.22\nfor range 循环会重复使用value变量\nvalue的地址都是同一个，因此输出s2 会变成CCC\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_104"},{"content":"下面这段代码输出什么？\nfunc main() { var a = []int{1, 2, 3, 4, 5} var r [5]int for i, v := range a { if i == 0 { a[1] = 12 a[2] = 13 } r[i] = v } fmt.Println(\u0026#34;r = \u0026#34;, r) fmt.Println(\u0026#34;a = \u0026#34;, a) } 🔑 答案解析： r = [1 12 13 4 5] a = [1 12 13 4 5] rang a 实际是在变量a的副本。由于切片的结构，这2个切片都会指向同一个底层数组。因此改动 a[1] = 12 ， a[2] = 13 会影响v的结构\n我们可以做验证 ，将a在循环中扩容。这时候a和副本切片指向的就不是同一个底层数组，改动将不会影响副本\nfor i, v := range a { if i == 0 { a = append(a, v) a[1] = 12 a[2] = 13 } r[i] = v } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_103/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;r = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003er =  [1 12 13 4 5]\na =  [1 12 13 4 5]\nrang a 实际是在变量a的副本。由于切片的结构，这2个切片都会指向同一个底层数组。因此改动    a[1] = 12 ， a[2] = 13 会影响v的结构\u003c/p\u003e\n\u003cp\u003e我们可以做验证 ，将a在循环中扩容。这时候a和副本切片指向的就不是同一个底层数组，改动将不会影响副本\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_103"},{"content":"下面这段代码输出什么？\nfunc change(s ...int) { s = append(s,3) } func main() { slice := make([]int,5,5) slice[0] = 1 slice[1] = 2 change(slice...) fmt.Println(slice) change(slice[0:2]...) fmt.Println(slice) } 🔑 答案解析： [1 2 0 0 0]\r[1 2 3 0 0] 知识点：可变函数、append()操作。\nGo 提供的语法糖\u0026hellip;，可以将 slice 传进可变函数，不会创建新的切片。第一次调用 change() 时，append() 操作使切片底层数组发生了扩容，原 slice 的底层数组不会改变； 第二次调用change() 函数时，使用了操作符[i,j]获得一个新的切片，假定为 slice1， 它的底层数组和原切片底层数组是重合的，不过 slice1 的长度、容量分别是 2、5，所以在 change() 函数中对 slice1 底层数组的修改会影响到原切片。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_102/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[1 2 0 0 0]\r\n[1 2 3 0 0]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e知识点：可变函数、append()操作。\u003c/p\u003e\n\u003cp\u003eGo 提供的语法糖\u0026hellip;，可以将 slice 传进可变函数，不会创建新的切片。第一次调用 change() 时，append() 操作使切片底层数组发生了扩容，原 slice 的底层数组不会改变； 第二次调用change() 函数时，使用了操作符[i,j]获得一个新的切片，假定为 slice1，\n它的底层数组和原切片底层数组是重合的，不过 slice1 的长度、容量分别是 2、5，所以在 change() 函数中对 slice1 底层数组的修改会影响到原切片。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_102"},{"content":"下面这段代码输出什么？\nfunc main() { var a = [5]int{1, 2, 3, 4, 5} var r [5]int for i, v := range a { if i == 0 { a[1] = 12 a[2] = 13 } r[i] = v } fmt.Println(\u0026#34;r = \u0026#34;, r) fmt.Println(\u0026#34;a = \u0026#34;, a) } 🔑 答案解析： r = [1 2 3 4 5] a = [1 12 13 4 5] range 表达式是副本参与循环，就是说例子中参与循环的是 a 的副本，而不是真正的 a。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_101/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;r = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a = \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  r =  [1 2 3 4 5]\na =  [1 12 13 4 5]\nrange 表达式是副本参与循环，就是说例子中参与循环的是 a 的副本，而不是真正的 a。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_101"},{"content":"下面这段代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func f(n int) (r int) { defer func() { r += n recover() }() var f func() defer f() f = func() { r += 2 } return n + 1 } func main() { fmt.Println(f(3)) } 🔑 答案解析： 7\n// 先执行这一段代码, 然后 r 被赋值为 4 return n+1 // 然后执行，但是会触发panic defer f() // 最后执行，r 再加3 r=7,然后recover(),最后函数返回 7 defer func() { r += n recover() }() ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_100/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        recover()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e7\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 先执行这一段代码, 然后 r 被赋值为 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 然后执行，但是会触发panic\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 最后执行，r 再加3 r=7,然后recover(),最后函数返回 7\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        recover()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_100"},{"content":"下面这段代码输出什么？为什么？\nfunc main() { var m = [...]int{1, 2, 3} for i, v := range m { go func() { fmt.Println(i, v) }() } time.Sleep(time.Second * 3) } 🔑 答案解析： go 1.22 前会出现 2 3 2 3 2 3 for range 使用短变量声明 (:=) 的形式迭代变量，需要注意的是，变量 i、v 在每次循环体中都会被重用，而不是重新声明。\n各个 goroutine 中输出的 i、v 值都是 for range 循环结束后的 i、v 最终值，而不是各个 goroutine 启动时的 i, v值。可以理解为闭包引用，使用的是上下文环境的值。两种可行的 fix 方法:\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_099/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e = [\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003ego 1.22 前会出现\n2 3\n2 3\n2 3\nfor range 使用短变量声明 (:=) 的形式迭代变量，需要注意的是，变量 i、v 在每次循环体中都会被重用，而不是重新声明。\u003c/p\u003e\n\u003cp\u003e各个 goroutine 中输出的 i、v 值都是 for range 循环结束后的 i、v 最终值，而不是各个 goroutine 启动时的 i, v值。可以理解为闭包引用，使用的是上下文环境的值。两种可行的 fix 方法:\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_099"},{"content":"下面这段代码能否正常结束？\nfunc main() { v := []int{1, 2, 3} for i := range v { v = append(v, i) } } 🔑 答案解析： 不会出现死循环，能正常结束。\n循环次数在循环开始前就已经确定，循环内改变切片的长度，不影响循环次数\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_098/","summary":"\u003cp\u003e下面这段代码能否正常结束？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e不会出现死循环，能正常结束。\u003c/p\u003e\n\u003cp\u003e循环次数在循环开始前就已经确定，循环内改变切片的长度，不影响循环次数\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_098"},{"content":"下面这段代码输出什么？\nvar p *int func foo() (*int, error) { var i int = 5 return \u0026amp;i, nil } func bar() { //use p fmt.Println(*p) } func main() { p, err := foo() if err != nil { fmt.Println(err) return } bar() fmt.Println(*p) } A. 5 5 B. runtime error\n🔑 答案解析： B 全局的 *p 是nil p, err := foo() 这里是一个新的p 局部变量 与全局的p无关 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_097/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e() (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebar\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//use p\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebar\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 5 5\nB. runtime error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  B\n全局的 *p 是nil\np, err := foo() 这里是一个新的p 局部变量 与全局的p无关\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_097"},{"content":"下面的代码有什么问题？\nfunc main() { fmt.Println([...]int{1} == [2]int{1}) fmt.Println([]int{1} == []int{1}) } 🔑 答案解析： 有两处错误\ngo 中不同类型是不能比较的，而数组长度是数组类型的一部分，所以 [\u0026hellip;]int{1} 和 [2]int{1} 是两种不同的类型，不能比较； 切片是不能比较的；\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_096/","summary":"\u003cp\u003e下面的代码有什么问题？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e([\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e} \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e} \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e有两处错误\u003c/p\u003e\n\u003cp\u003ego 中不同类型是不能比较的，而数组长度是数组类型的一部分，所以 [\u0026hellip;]int{1} 和 [2]int{1} 是两种不同的类型，不能比较；\n切片是不能比较的；\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_096"},{"content":"以下代码的输出结果：\npackage main import \u0026#34;sync\u0026#34; func main() { var wg sync.WaitGroup foo := make(chan int) bar := make(chan int) wg.Add(1) go func() { defer wg.Done() select { case foo \u0026lt;- \u0026lt;-bar: default: println(\u0026#34;default\u0026#34;) } }() wg.Wait() } A：default B：panic 🔑 答案解析： 按常规理解，go func 中的 select 应该执行 default 分支，程序正常运行。但结果却不是，而是死锁。可以通过该链接测试：https://play.studygolang.com/p/kF4pOjYXbXf。\n原因文章也解释了，Go 语言规范中有这么一句：\nFor all the cases in the statement, the channel operands of receive operations and the channel and right-hand-side expressions of send statements are evaluated exactly once, in source order, upon entering the “select” statement. The result is a set of channels to receive from or send to, and the corresponding values to send. Any side effects in that evaluation will occur irrespective of which (if any) communication operation is selected to proceed. Expressions on the left-hand side of a RecvStmt with a short variable declaration or assignment are not yet evaluated.\n回到这个题上 case foo \u0026lt;- \u0026lt;-bar: 这里不管 select 选择了 哪一个case 会后先 执行\u0026lt;-bar 导致panic\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_095/","summary":"\u003cp\u003e以下代码的输出结果：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ebar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ebar\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：default\nB：panic\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e按常规理解，go func 中的 select 应该执行 default 分支，程序正常运行。但结果却不是，而是死锁。可以通过该链接测试：\u003ca href=\"https://play.studygolang.com/p/kF4pOjYXbXf%E3%80%82\"\u003ehttps://play.studygolang.com/p/kF4pOjYXbXf。\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e原因文章也解释了，Go 语言规范中有这么一句：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFor all the cases in the statement, the channel operands of receive operations and the channel and right-hand-side expressions of send statements are evaluated exactly once, in source order, upon entering the “select” statement. The result is a set of channels to receive from or send to, and the corresponding values to send. Any side effects in that evaluation will occur irrespective of which (if any) communication operation is selected to proceed. Expressions on the left-hand side of a RecvStmt with a short variable declaration or assignment are not yet evaluated.\u003c/p\u003e","title":"Go每日一题_095"},{"content":"下面代码输出什么？\ntype Math struct { x, y int } var m = map[string]Math{ \u0026#34;foo\u0026#34;: Math{2, 3}, } func main() { m[\u0026#34;foo\u0026#34;].x = 4 fmt.Println(m[\u0026#34;foo\u0026#34;].x) } A. 4 B. compilation error\n🔑 答案解析： 参考答案及解析：B，编译报错 cannot assign to struct field m[\u0026ldquo;foo\u0026rdquo;].x in map。错误原因：对于类似 X = Y的赋值操作，必须知道 X 的地址，才能够将 Y 的值赋给 X，但 go 中的 map 的 value 本身是不可寻址的。\n有两个解决办法：\na.使用临时变量\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_094/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMath\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003eMath\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eMath\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 4\nB. compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B，编译报错 cannot assign to struct field m[\u0026ldquo;foo\u0026rdquo;].x in map。错误原因：对于类似 X = Y的赋值操作，必须知道 X 的地址，才能够将 Y 的值赋给 X，但 go 中的 map 的 value 本身是不可寻址的。\u003c/p\u003e\n\u003cp\u003e有两个解决办法：\u003c/p\u003e\n\u003cp\u003ea.使用临时变量\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_094"},{"content":"下面这段代码输出什么？\ntype Direction int const ( North Direction = iota East South West ) func (d Direction) String() string { return [...]string{\u0026#34;North\u0026#34;, \u0026#34;East\u0026#34;, \u0026#34;South\u0026#34;, \u0026#34;West\u0026#34;}[d] } func main() { fmt.Println(South) } 🔑 答案解析： 参考答案及解析：South。知识点：iota 的用法、类型的 String() 方法。\n根据 iota 的用法推断出 South 的值是 2；另外，如果类型定义了 String() 方法，当使用 fmt.Printf()、fmt.Print() 和 fmt.Println() 会自动使用 String() 方法，实现字符串的打印。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_093/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDirection\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eNorth\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDirection\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eEast\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSouth\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eWest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDirection\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e [\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;North\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;East\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;South\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;West\u0026#34;\u003c/span\u003e}[\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eSouth\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：South。知识点：iota 的用法、类型的 String() 方法。\u003c/p\u003e\n\u003cp\u003e根据 iota 的用法推断出 South 的值是 2；另外，如果类型定义了 String() 方法，当使用 fmt.Printf()、fmt.Print() 和 fmt.Println() 会自动使用 String() 方法，实现字符串的打印。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_093"},{"content":"下面这段代码输出什么？为什么？\ntype People interface { Show() } type Student struct{} func (stu *Student) Show() { } func main() { var s *Student if s == nil { fmt.Println(\u0026#34;s is nil\u0026#34;) } else { fmt.Println(\u0026#34;s is not nil\u0026#34;) } var p People = s if p == nil { fmt.Println(\u0026#34;p is nil\u0026#34;) } else { fmt.Println(\u0026#34;p is not nil\u0026#34;) } } 🔑 答案解析： 参考答案及解析：s is nil 和 p is not nil。\n这道题会不会有点诧异，我们分配给变量 p 的值明明是 nil，然而 p 却不是 nil。记住一点，当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。上面的代码，给变量 p 赋值之后，p 的动态值是 nil，但是动态类型却是 *Student，是一个 nil 指针，所以相等条件不成立。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_092/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s is nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s is not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;p is nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;p is not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：s is nil 和 p is not nil。\u003c/p\u003e\n\u003cp\u003e这道题会不会有点诧异，我们分配给变量 p 的值明明是 nil，然而 p 却不是 nil。记住一点，当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。上面的代码，给变量 p 赋值之后，p 的动态值是 nil，但是动态类型却是 *Student，是一个 nil 指针，所以相等条件不成立。\u003c/p\u003e","title":"Go每日一题_092"},{"content":"下面这段代码输出什么？\nconst ( a = iota b = iota ) const ( name = \u0026#34;name\u0026#34; c = iota d = iota ) func main() { fmt.Println(a) fmt.Println(b) fmt.Println(c) fmt.Println(d) } 🔑 答案解析： 参考答案及解析：0 1 1 2。\n知识点：iota 的用法。\niota 是 golang 语言的常量计数器，只能在常量的表达式中使用。\niota 在 const 关键字出现时将被重置为0，const中每新增一行常量声明将使 iota 计数一次。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_091/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e    = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e    = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：0 1 1 2。\u003c/p\u003e\n\u003cp\u003e知识点：iota 的用法。\u003c/p\u003e\n\u003cp\u003eiota 是 golang 语言的常量计数器，只能在常量的表达式中使用。\u003c/p\u003e\n\u003cp\u003eiota 在 const 关键字出现时将被重置为0，const中每新增一行常量声明将使 iota 计数一次。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_091"},{"content":"下面这段代码输出什么？为什么？\ntype People interface { Speak(string) string } type Student struct{} func (stu *Student) Speak(think string) (talk string) { if think == \u0026#34;speak\u0026#34; { talk = \u0026#34;speak\u0026#34; } else { talk = \u0026#34;hi\u0026#34; } return } func main() { var peo People = Student{} think := \u0026#34;speak\u0026#34; fmt.Println(peo.Speak(think)) } A. speak B. compilation error\n🔑 答案解析： B 编译错误 Student does not implement People (Speak method has pointer receiver)，值类型 Student 没有实现接口的 Speak() 方法，而是指针类型 *Student 实现改方法。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_090/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;speak\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;speak\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;speak\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. speak\nB. compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  B\n编译错误 Student does not implement People (Speak method has pointer receiver)，值类型 Student 没有实现接口的 Speak() 方法，而是指针类型 *Student 实现改方法。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_090"},{"content":"下面这段代码输出什么？为什么？\nfunc (i int) PrintInt () { fmt.Println(i) } func main() { var i int = 1 i.PrintInt() } 🔑 答案解析： 会编译错误，只有自定义类型且与类型定义在同一个包内才能创建对应的方法\n参考答案及解析：B。\n基于类型创建的方法必须定义在同一个包内，上面的代码基于 int 类型创建了 PrintInt() 方法，由于 int 类型和方法 PrintInt() 定义在不同的包内，所以编译出错。解决的办法可以定义一种新的类型：\ntype Myint int func (i Myint) PrintInt () { fmt.Println(i) } func main() { var i Myint = 1 i.PrintInt() } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_089/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ePrintInt\u003c/span\u003e ()  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintInt\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e会编译错误，只有自定义类型且与类型定义在同一个包内才能创建对应的方法\u003c/p\u003e\n\u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003e基于类型创建的方法必须定义在同一个包内，上面的代码基于 int 类型创建了 PrintInt() 方法，由于 int 类型和方法 PrintInt() 定义在不同的包内，所以编译出错。解决的办法可以定义一种新的类型：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyint\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyint\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003ePrintInt\u003c/span\u003e ()  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintInt\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_089"},{"content":"以下代码输出什么：\npackage main func main() { var x *struct { s [][32]byte } println(len(x.s[99])) } A：运行时 panic；B：32；C：编译错误；D：0 🔑 答案解析： 答案B\n返回结果总是 int； 返回结果有可能是常量； 有时对函数参数不求值，即编译期确定返回值； 这里 len(x.s[99]) 因为s的切片类型是[32]byte，因此得len(x.s[99]) = 32\n这里要清楚 len 和 cap 是不会panic的是编译器完成的功能 表达式 x.s[99] 没有包含 channel 接收也不是函数调用，因此在编译阶段就已经确定返回的值\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_088/","summary":"\u003cp\u003e以下代码输出什么：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e [][\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  println(len(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e99\u003c/span\u003e]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：运行时 panic；B：32；C：编译错误；D：0\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答案B\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回结果总是 int；\u003c/li\u003e\n\u003cli\u003e返回结果有可能是常量；\u003c/li\u003e\n\u003cli\u003e有时对函数参数不求值，即编译期确定返回值；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这里 len(x.s[99])\n因为s的切片类型是[32]byte，因此得len(x.s[99]) = 32\u003c/p\u003e\n\u003cp\u003e这里要清楚 len 和 cap 是不会panic的是编译器完成的功能\n表达式 x.s[99] 没有包含 channel 接收也不是函数调用，因此在编译阶段就已经确定返回的值\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_088"},{"content":"下面这段代码输出什么？\nfunc main() { a := 1 b := 2 defer calc(\u0026#34;1\u0026#34;, a, calc(\u0026#34;10\u0026#34;, a, b)) a = 0 defer calc(\u0026#34;2\u0026#34;, a, calc(\u0026#34;20\u0026#34;, a, b)) b = 1 } func calc(index string, a, b int) int { ret := a + b fmt.Println(index, a, b, ret) return ret } 🔑 答案解析： 10 1 2 3\r20 0 2 2\r2 0 2 2\r1 1 3 4 程序执行到 main() 函数三行代码的时候，会先执行 calc() 函数的 b 参数，即：calc(\u0026ldquo;10\u0026rdquo;,a,b)，输出：10 1 2 3，得到值 3，因为 defer 定义的函数是延迟函数，故 calc(\u0026ldquo;1\u0026rdquo;,1,3) 会被延迟执行；\n程序执行到第五行的时候，同样先执行 calc(\u0026ldquo;20\u0026rdquo;,a,b) 输出：20 0 2 2 得到值 2，同样将 calc(\u0026ldquo;2\u0026rdquo;,0,2) 延迟执行；\n程序执行到末尾的时候，按照栈先进后出的方式依次执行：calc(\u0026ldquo;2\u0026rdquo;,0,2)，calc(\u0026ldquo;1\u0026rdquo;,1,3)，则就依次输出：2 0 2 2，1 1 3 4。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_087/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;10\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;20\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecalc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eret\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e10 1 2 3\r\n20 0 2 2\r\n2 0 2 2\r\n1 1 3 4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e程序执行到 main() 函数三行代码的时候，会先执行 calc() 函数的 b 参数，即：calc(\u0026ldquo;10\u0026rdquo;,a,b)，输出：10 1 2 3，得到值 3，因为\ndefer 定义的函数是延迟函数，故 calc(\u0026ldquo;1\u0026rdquo;,1,3) 会被延迟执行；\u003c/p\u003e\n\u003cp\u003e程序执行到第五行的时候，同样先执行 calc(\u0026ldquo;20\u0026rdquo;,a,b) 输出：20 0 2 2 得到值 2，同样将 calc(\u0026ldquo;2\u0026rdquo;,0,2) 延迟执行；\u003c/p\u003e\n\u003cp\u003e程序执行到末尾的时候，按照栈先进后出的方式依次执行：calc(\u0026ldquo;2\u0026rdquo;,0,2)，calc(\u0026ldquo;1\u0026rdquo;,1,3)，则就依次输出：2 0 2 2，1 1 3 4。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_087"},{"content":"下面这段代码输出什么？\nfunc main() { m := map[int]string{0:\u0026#34;zero\u0026#34;,1:\u0026#34;one\u0026#34;} for k,v := range m { fmt.Println(k,v) } } 🔑 答案解析： 0 zero\r1 one\r// 或者\r1 one\r0 zero map 的输出是无序的。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_086/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zero\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0 zero\r\n1 one\r\n// 或者\r\n1 one\r\n0 zero\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emap 的输出是无序的。\u003c/p\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_086"},{"content":"下面选项正确的是？\nfunc main() { if a := 1; false { } else if b := 2; false { } else { println(a, b) } } A. 1 2 B. compilation error 🔑 答案解析： 涉及到 代码块的问题。 具体可以看这篇文章 https://studygolang.com/articles/35587 化解出来后该代码变为\n{ a := 1 if false { } else { b := 2 if false { } else { println(a, b) } } } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_085/","summary":"\u003cp\u003e下面选项正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 1 2\nB. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e涉及到 代码块的问题。\n具体可以看这篇文章\n\u003ca href=\"https://studygolang.com/articles/35587\"\u003ehttps://studygolang.com/articles/35587\u003c/a\u003e\n化解出来后该代码变为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                println(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_085"},{"content":"下面这段代码输出什么？为什么？\nfunc main() { s1 := []int{1, 2, 3} s2 := s1[1:] s2[1] = 4 fmt.Println(s1) s2 = append(s2, 5, 6, 7) fmt.Println(s1) } 🔑 答案解析： s1 [1,2,4] s2 [2,4,5,6,7] ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_084/","summary":"\u003cp\u003e下面这段代码输出什么？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  s1 [1,2,4]\ns2 [2,4,5,6,7]\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_084"},{"content":"","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_083/","summary":"","title":"Go每日一题_083"},{"content":"下面的代码有几处语法问题，各是什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var x string = nil if x == nil { x = \u0026#34;default\u0026#34; } fmt.Println(x) } 🔑 答案解析： 1、var x string = nil string 不能为nil 2、 if x == nil { string 不能与nil 比较 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_082/","summary":"\u003cp\u003e下面的代码有几处语法问题，各是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  1、var x string = nil\nstring 不能为nil\n2、 if x == nil {\nstring 不能与nil 比较\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_082"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } A：不能编译；B：45；C：45.2；D：45.0\n🔑 答案解析： C 数字是无类型常量 或者说是任意类型 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_081/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5.2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eans\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：不能编译；B：45；C：45.2；D：45.0\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  C\n数字是无类型常量\n或者说是任意类型\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_081"},{"content":"下面 A、B 两处应该填入什么代码，才能确保顺利打印出结果？\ntype S struct { m string } func f() *S { return __ //A } func main() { p := __ //B fmt.Println(p.m) //print \u0026#34;foo\u0026#34; } 🔑 答案解析： A. \u0026amp;S{\u0026ldquo;foo\u0026rdquo;} B. *f() 或者 f()\nf() 函数返回参数是指针类型，所以可以用 \u0026amp; 取结构体的指针；B 处，如果填 f()，则 p 是 S 类型；如果填 f()，则 p 是S 类型，不过都可以使用 p.m 取得结构体的成员。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_080/","summary":"\u003cp\u003e下面 A、B 两处应该填入什么代码，才能确保顺利打印出结果？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//print \u0026#34;foo\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA. \u0026amp;S{\u0026ldquo;foo\u0026rdquo;}\nB. *f() 或者 f()\u003c/p\u003e\n\u003cp\u003ef() 函数返回参数是指针类型，所以可以用 \u0026amp; 取结构体的指针；B 处，如果填 \u003cem\u003ef()，则 p 是 S 类型；如果填 f()，则 p 是\u003c/em\u003eS 类型，不过都可以使用 p.m 取得结构体的成员。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_080"},{"content":"A、B、C、D 哪些选项有语法错误？\ntype S struct { } func f(x interface{}) { } func g(x *interface{}) { } func main() { s := S{} p := \u0026amp;s f(s) //A g(s) //B f(p) //C g(p) //D } 🔑 答案解析： 参考答案及解析：BD。\n函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\n永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_079/","summary":"\u003cp\u003eA、B、C、D 哪些选项有语法错误？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eS\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e//D\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：BD。\u003c/p\u003e\n\u003cp\u003e函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_079"},{"content":"下面的两个切片声明中有什么区别？哪个更可取？\nA. var a []int B. a := []int{} 🔑 答案解析： A 声明的 []int 未初始化 指向的nil B 声明的 []int 是已经初始化的 指向的内容为空的数组。\nA 可以写到全局 B 只能写到函数内\nA 与 B 占用的内存空间理论上是相同的。 注意：空切片empty slice 指向了一个固定地址，所以实际上确实没有分配内存。\n但是B比A 多指向的内容为空的数组，这个操作也会消耗而外性能(🤏),在性能的角度上A具有优势\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_078/","summary":"\u003cp\u003e下面的两个切片声明中有什么区别？哪个更可取？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e. \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e. \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA 声明的 []int 未初始化 指向的nil\nB 声明的 []int 是已经初始化的 指向的内容为空的数组。\u003c/p\u003e\n\u003cp\u003eA 可以写到全局\nB 只能写到函数内\u003c/p\u003e\n\u003cp\u003eA 与 B 占用的内存空间理论上是相同的。\n注意：空切片empty slice 指向了一个固定地址，所以实际上确实没有分配内存。\u003c/p\u003e\n\u003cp\u003e但是B比A 多指向的内容为空的数组，这个操作也会消耗而外性能(🤏),在性能的角度上A具有优势\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_078"},{"content":"下面代码输出什么？\ntype Person struct { age int } func main() { person := \u0026amp;Person{28} // 1. defer fmt.Println(person.age) // 2. defer func(p *Person) { fmt.Println(p.age) }(person) // 3. defer func() { fmt.Println(person.age) }() person = \u0026amp;Person{29} } 🔑 答案解析： 29 28 28\n注意// 2 这里传入的person指向的地址 与后面person = \u0026amp;Person{29}后person 指向的地址不同\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_077/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 3.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e29\n28\n28\u003c/p\u003e\n\u003cp\u003e注意// 2 这里传入的person指向的地址 与后面person = \u0026amp;Person{29}后person 指向的地址不同\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_077"},{"content":"下面这段代码正确的输出是什么？\nfunc f() { defer fmt.Println(\u0026#34;D\u0026#34;) fmt.Println(\u0026#34;F\u0026#34;) } func main() { f() fmt.Println(\u0026#34;M\u0026#34;) } 🔑 答案解析： FDM ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_076/","summary":"\u003cp\u003e下面这段代码正确的输出是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;D\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;F\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  FDM\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_076"},{"content":"下面代码段输出什么？\ntype Person struct { age int } func main() { person := \u0026amp;Person{28} // 1. defer fmt.Println(person.age) // 2. defer func(p *Person) { fmt.Println(p.age) }(person) // 3. defer func() { fmt.Println(person.age) }() person.age = 29 } 🔑 答案解析： 29 29 28 defer是先进后出的 因此会运行 // 3 的内容 输出29 后运行 //2 这里传入的是指针类型，因此会数据也是29 最后运行//1 因为入参的值在运行defer就已经定下来了 因此输出28 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_075/","summary":"\u003cp\u003e下面代码段输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 1. \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e)  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 3.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  29\n29\n28\ndefer是先进后出的\n因此会运行 // 3 的内容 输出29\n后运行 //2 这里传入的是指针类型，因此会数据也是29\n最后运行//1 因为入参的值在运行defer就已经定下来了 因此输出28\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_075"},{"content":"以下代码输出什么？\npackage main import \u0026#34;fmt\u0026#34; func app() func(string) string { t := \u0026#34;Hi\u0026#34; c := func(b string) string { t = t + \u0026#34; \u0026#34; + b return t } return c } func main() { a := app() b := app() a(\u0026#34;go\u0026#34;) fmt.Println(b(\u0026#34;All\u0026#34;)) fmt.Println(a(\u0026#34;All\u0026#34;)) } A：Hi All；B：Hi go All；C：Hi；D：go Al 🔑 答案解析： 闭包 fmt.Println(b(\u0026ldquo;All\u0026rdquo;)) 输出 A （Hi All） fmt.Println(a(\u0026ldquo;All\u0026rdquo;)) 输出 B （Hi go All） ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_074/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;go\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：Hi All；B：Hi go All；C：Hi；D：go Al\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  闭包\nfmt.Println(b(\u0026ldquo;All\u0026rdquo;)) 输出  A （Hi All）\nfmt.Println(a(\u0026ldquo;All\u0026rdquo;)) 输出  B  （Hi go All）\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_074"},{"content":"f1()、f2()、f3() 函数分别返回什么？\nfunc f1() (r int) { defer func() { r++ }() return 0 } func f2() (r int) { t := 5 defer func() { t = t + 5 }() return t } func f3() (r int) { defer func(r int) { r = r + 5 }(r) return 1 } 🔑 答案解析： f1 1 f2 5 f3 1 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_073/","summary":"\u003cp\u003ef1()、f2()、f3() 函数分别返回什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef1\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef2\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef3\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }(\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  f1 1\nf2 5\nf3 1\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_073"},{"content":"下面代码输出什么？\ntype A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { var a A = Work{3} s := a.(Work) fmt.Println(s.ShowA()) fmt.Println(s.ShowB()) } A. 13 23 B. compilation error 🔑 答案解析： A ：类型断言。 无坑 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_072/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 13 23\nB. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A ：类型断言。\n无坑\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_072"},{"content":"下面代码输出什么？\nfunc increaseA() int { var i int defer func() { i++ }() return i } func increaseB() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(increaseA()) fmt.Println(increaseB()) } A. 1 1 B. 0 1 C. 1 0 D. 0 0 🔑 答案解析： 参考答案及解析：B。\n知识点：defer、返回值。注意一下，increaseA() 的返回参数是匿名，increaseB() 是具名。 increaseA return r 已经将r的值 返回了 r再改变并不影响\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_071/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e() (\u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eincreaseB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 1 1\nB. 0 1\nC. 1 0\nD. 0 0\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：B。\u003c/p\u003e\n\u003cp\u003e知识点：defer、返回值。注意一下，increaseA() 的返回参数是匿名，increaseB() 是具名。\nincreaseA  return r 已经将r的值 返回了 r再改变并不影响\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_071"},{"content":"下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\nx, := f() x, = f() x, y := f() x, y = f()\n🔑 答案解析： 1 错 2 对 3 对 4 错 变量的声明。1.错，x 已经声明，不能使用 :=；2.对；3.对，当多值赋值时，:= 左边的变量至少要有一个未声明的；4.错，y 没有声明。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_070/","summary":"\u003cp\u003e下面代码中，x 已声明，y 没有声明，判断每条语句的对错。\u003c/p\u003e\n\u003cp\u003ex, \u003cem\u003e:= f()\nx,\u003c/em\u003e = f()\nx, y := f()\nx, y = f()\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  1 错\n2 对\n3 对\n4 错\n变量的声明。1.错，x 已经声明，不能使用 :=；2.对；3.对，当多值赋值时，:= 左边的变量至少要有一个未声明的；4.错，y 没有声明。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_070"},{"content":"有下面 3 行代码：\n// 32 位机器 1）var x int32 = 32.0 2）var y int = x 3）var z rune = x 它们是否能编译通过？为什么？\n如果面试时问这道题，你需要想想面试官想考察你什么。 🔑 答案解析： 数字字面量 在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例子，32.0 是无类型的浮点数字面量，因此它可以赋值给任意数字相关类型变量（或常量）。以下都是合法的：\nvar a int64 = 32.0 var b int = 32.0 var c float32 = 32.0 var d complex64 = 32.0 var e byte = 32.0 var f rune = 32.0 所以上题中 1）是正确的。\n不同类型 在目前 Go 1.16 版本中（实际上只有很早期的版本不是），int 类型在 32 位机器占 4 字节，64 位机器占 8 字节。所以，在 32 位机器上，int32 和 int 的内存占用和内存布局是完全一样的。但 Go 语言不会做隐式类型转换，int 和 int32 是不同的类型，因此上题中 2）编译不通过。\n别名 rune 是什么类型？定义如下：\ntype rune = int32 很显然，rune 是 int32 的别名，因此题目中 3）也能编译通过。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_069/","summary":"\u003cp\u003e有下面 3 行代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 32 位机器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e）\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它们是否能编译通过？为什么？\u003c/p\u003e\n\u003cp\u003e如果面试时问这道题，你需要想想面试官想考察你什么。\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch1 id=\"数字字面量\"\u003e数字字面量\u003c/h1\u003e\n\u003cp\u003e在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例子，32.0 是无类型的浮点数字面量，因此它可以赋值给任意数字相关类型变量（或常量）。以下都是合法的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ecomplex64\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e32.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以上题中 1）是正确的。\u003c/p\u003e\n\u003ch1 id=\"不同类型\"\u003e不同类型\u003c/h1\u003e\n\u003cp\u003e在目前 Go 1.16 版本中（实际上只有很早期的版本不是），int 类型在 32 位机器占 4 字节，64 位机器占 8 字节。所以，在 32 位机器上，int32 和 int 的内存占用和内存布局是完全一样的。但 Go 语言不会做隐式类型转换，int 和 int32 是不同的类型，因此上题中 2）编译不通过。\u003c/p\u003e\n\u003ch1 id=\"别名\"\u003e别名\u003c/h1\u003e\n\u003cp\u003erune 是什么类型？定义如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erune\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e很显然，rune 是 int32 的别名，因此题目中 3）也能编译通过。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_069"},{"content":"","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_068/","summary":"","title":"Go每日一题_068"},{"content":"下面代码输出什么？\ntype A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowB()) fmt.Println(b.ShowA()) } A. 23 13 B. compilation error 🔑 答案解析： B 知识点：接口的静态类型。a、b 具有相同的动态类型和动态值，分别是结构体 work 和 {3}；a 的静态类型是 A，b 的静态类型是 B，接口 A 不包括方法 ShowB()，接口 B 也不包括方法 ShowA()，编译报错。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_067/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. 23 13\nB. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  B\n知识点：接口的静态类型。a、b 具有相同的动态类型和动态值，分别是结构体 work 和 {3}；a 的静态类型是 A，b 的静态类型是 B，接口 A 不包括方法 ShowB()，接口 B 也不包括方法 ShowA()，编译报错。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_067"},{"content":"下面代码中 A B 两处应该怎么修改才能顺利编译？\nfunc main() { var m map[string]int //A m[\u0026#34;a\u0026#34;] = 1 if v := m[\u0026#34;b\u0026#34;]; v != nil { //B fmt.Println(v) } } 🔑 答案解析： func main() { m := make(map[string]int) m[\u0026#34;a\u0026#34;] = 1 if v,ok := m[\u0026#34;b\u0026#34;]; ok { fmt.Println(v) } } 在 A 处只声明了map m ,并没有分配内存空间，不能直接赋值，需要使用 make()，都提倡使用 make() 或者字面量的方式直接初始化 map。\nB 处，v,k := m[\u0026ldquo;b\u0026rdquo;] 当 key 为 b 的元素不存在的时候，v 会返回值类型对应的零值，k 返回 false。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_066/","summary":"\u003cp\u003e下面代码中 A B 两处应该怎么修改才能顺利编译？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e//A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e]; \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {  \u003cspan style=\"color:#75715e\"\u003e//B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e]; \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 A 处只声明了map m ,并没有分配内存空间，不能直接赋值，需要使用 make()，都提倡使用 make() 或者字面量的方式直接初始化 map。\u003c/p\u003e\n\u003cp\u003eB 处，v,k := m[\u0026ldquo;b\u0026rdquo;] 当 key 为 b 的元素不存在的时候，v 会返回值类型对应的零值，k 返回 false。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_066"},{"content":"切片 a、b、c 的长度和容量分别是多少？\nfunc main() { s := [3]int{1, 2, 3} a := s[:0] b := s[:2] c := s[1:2:cap(s)] } 🔑 答案解析： a len 0 cap 3 b len 2 cap 3 c len 1 cap 2\nc 下表1 开始\n参考答案及解析：a、b、c 的长度和容量分别是 0 3、2 3、1 2。\n知识点：数组或切片的截取操作。截取操作有带 2 个或者 3 个参数，形如：[i:j] 和 [i:j:k]，假设截取对象的底层数组长度为 l。在操作符 [i:j] 中，如果 i 省略，默认 0，如果 j 省略，默认底层数组的长度，截取得到的切片长度和容量计算方法是 j-i、l-i。操作符 [i:j:k]，k 主要是用来限制切片的容量，但是不能大于数组的长度 l，截取得到的切片长度和容量计算方法是 j-i、k-i。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_065/","summary":"\u003cp\u003e切片 a、b、c 的长度和容量分别是多少？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:cap(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003ea len 0 cap 3\nb len 2 cap 3\nc len 1 cap 2\u003c/p\u003e\n\u003cp\u003ec 下表1 开始\u003c/p\u003e\n\u003cp\u003e参考答案及解析：a、b、c 的长度和容量分别是 0 3、2 3、1 2。\u003c/p\u003e\n\u003cp\u003e知识点：数组或切片的截取操作。截取操作有带 2 个或者 3 个参数，形如：[i:j] 和 [i:j:k]，假设截取对象的底层数组长度为 l。在操作符 [i:j] 中，如果 i 省略，默认 0，如果 j 省略，默认底层数组的长度，截取得到的切片长度和容量计算方法是 j-i、l-i。操作符 [i:j:k]，k 主要是用来限制切片的容量，但是不能大于数组的长度 l，截取得到的切片长度和容量计算方法是 j-i、k-i。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_065"},{"content":"下面这段代码输出什么？\ntype A interface { ShowA() int } type B interface { ShowB() int } type Work struct { i int } func (w Work) ShowA() int { return w.i + 10 } func (w Work) ShowB() int { return w.i + 20 } func main() { c := Work{3} var a A = c var b B = c fmt.Println(a.ShowA()) fmt.Println(b.ShowB()) } 🔑 答案解析： 参考答案及解析：13 23。\n知识点：接口。一种类型实现多个接口，结构体 Work 分别实现了接口 A、B，所以接口变量 a、b 调用各自的方法 ShowA() 和 ShowB()，输出 13、23。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_064/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWork\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案及解析：13 23。\u003c/p\u003e\n\u003cp\u003e知识点：接口。一种类型实现多个接口，结构体 Work 分别实现了接口 A、B，所以接口变量 a、b 调用各自的方法 ShowA() 和 ShowB()，输出 13、23。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_064"},{"content":"下面这段代码输出什么？\nfunc main() { i := 65 fmt.Println(string(i)) } A. A B. 65 C. compilation error\n🔑 答案解析： A UTF-8 编码中，十进制数字 65 对应的符号是 A。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_063/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(string(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. A\nB. 65\nC. compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A\nUTF-8 编码中，十进制数字 65 对应的符号是 A。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_063"},{"content":"下面代码下划线处可以填入哪个选项？\nfunc main() { var s1 []int var s2 = []int{} if __ == nil { fmt.Println(\u0026#34;yes nil\u0026#34;) }else{ fmt.Println(\u0026#34;no nil\u0026#34;) } } A. s1 B. s2 C. s1、s2 都可以 🔑 答案解析： C s1 输出是yes nil s2 输出是no nil ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_062/","summary":"\u003cp\u003e下面代码下划线处可以填入哪个选项？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yes nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. s1\u003c/li\u003e\n\u003cli\u003eB. s2\u003c/li\u003e\n\u003cli\u003eC. s1、s2 都可以\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  C\ns1 输出是yes nil\ns2 输出是no nil\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Go每日一题_062"},{"content":"一次两道题，因为相关的。\n1、以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := []int{2: 1} fmt.Println(a) } A：编译错误；B：[2 1]；C：[0 0 1]；D：[0 1]\n2、以下代码输出什么？\npackage main func main() { var x = []int{4: 44, 55, 66, 1: 77, 88} println(len(x), x[2]) } A：5 66；B：5 88；C：7 88；D：以上都不对\n🔑 答案解析： C C a := []int{2: 1} 下表2 值为1 因此初始化出来的切片 cap 3 len 3 内容是 0 0 1, int的零值为0 var x = []int{4: 44, 55, 66, 1: 77, 88} 这里要慢慢看 4: 44 下标4的值为44 ， 后面的55没有制定下标，默认是前一个+1 类似 5：55 ， 66就是 6:66， 1: 77 下标 1 值为 77 ，88 就是 2 ：88 因此初始化出来的切片 cap 7 len 7 内容是 0 77 88 0 44 55 66 [0 77 88 0 44 55 66] ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_061/","summary":"\u003cp\u003e一次两道题，因为相关的。\u003c/p\u003e\n\u003cp\u003e1、以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：编译错误；B：[2 1]；C：[0 0 1]；D：[0 1]\u003c/p\u003e\n\u003cp\u003e2、以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e44\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e55\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e77\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e88\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(len(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：5 66；B：5 88；C：7 88；D：以上都不对\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  C C\na := []int{2: 1} 下表2 值为1\n因此初始化出来的切片 cap 3 len 3 内容是  0 0 1, int的零值为0\nvar x = []int{4: 44, 55, 66, 1: 77, 88}\n这里要慢慢看\n4: 44  下标4的值为44 ， 后面的55没有制定下标，默认是前一个+1 类似 5：55 ， 66就是 6:66，\n1: 77 下标 1 值为 77  ，88 就是 2 ：88\n因此初始化出来的切片 cap 7 len 7 内容是  0 77 88 0 44 55 66\n[0 77 88 0 44 55 66]\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_061"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { ch1 := make(chan int) go fmt.Println(\u0026lt;-ch1) ch1 \u0026lt;- 5 time.Sleep(1 * time.Second) } A：5、B：不能编译；C：运行时死锁 🔑 答案解析： C 解析 因为 \u0026lt;-ch1 是个参数,可以理解为他要先取出来得到结果后再创建协程 因此运行时死锁。因修改成下方的形式\nfunc main() { ch1 := make(chan int) go func() { fmt.Println(\u0026lt;-ch1) }() ch1 \u0026lt;- 5 time.Sleep(1 * time.Second) } 函数调用之前，实参就被求值好了 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_060/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：5、B：不能编译；C：运行时死锁\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eC\n解析 因为 \u0026lt;-ch1 是个参数,可以理解为他要先取出来得到结果后再创建协程 因此运行时死锁。因修改成下方的形式\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"函数调用之前实参就被求值好了\"\u003e函数调用之前，实参就被求值好了\u003c/h3\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_060"},{"content":"对 add() 函数调用正确的是？\nfunc add(args ...int) int { sum := 0 for _, arg := range args { sum += arg } return sum } A. add(1, 2) B. add(1, 3, 7) C. add([]int{1, 2}) D. add([]int{1, 3, 7}\u0026hellip;) 🔑 答案解析： 答 ABD\n虽然 \u0026hellip; 本质上也是个 切片 但是不能使用C这种方式\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_059/","summary":"\u003cp\u003e对 add() 函数调用正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003earg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003earg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. add(1, 2)\u003c/li\u003e\n\u003cli\u003eB. add(1, 3, 7)\u003c/li\u003e\n\u003cli\u003eC. add([]int{1, 2})\u003c/li\u003e\n\u003cli\u003eD. add([]int{1, 3, 7}\u0026hellip;)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 ABD\u003c/p\u003e\n\u003cp\u003e虽然 \u0026hellip; 本质上也是个 切片 但是不能使用C这种方式\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_059"},{"content":"下面代码输出什么？\nfunc incr(p *int) int { *p++ return *p } func main() { p :=1 incr(\u0026amp;p) fmt.Println(p) } A. 1 B. 2 C. 3 🔑 答案解析： 答案：B。\n知识点：指针，incr() 函数里的 p 是 *int 类型的指针，指向的是 main() 函数的变量 p 的地址。 第 2 行代码是将该地址的值执行一个自增操作，incr() 返回自增后的结果。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_058/","summary":"\u003cp\u003e下面代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincr\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eincr\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA. 1\u003c/li\u003e\n\u003cli\u003eB. 2\u003c/li\u003e\n\u003cli\u003eC. 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答案：B。\u003c/p\u003e\n\u003cp\u003e知识点：指针，incr() 函数里的 p 是 *int 类型的指针，指向的是 main() 函数的变量 p 的地址。 第 2 行代码是将该地址的值执行一个自增操作，incr() 返回自增后的结果。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_058"},{"content":"下列选项正确的是？\nfunc main() { str := \u0026#34;hello\u0026#34; str[0] = \u0026#39;x\u0026#39; fmt.Println(str) } A. hello B. xello C. compilation error 🔑 答案解析： 参考代码及解析：C。\n知识点：Go 语言中的字符串是只读的。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_057/","summary":"\u003cp\u003e下列选项正确的是？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. hello\nB. xello\nC. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考代码及解析：C。\u003c/p\u003e\n\u003cp\u003e知识点：Go 语言中的字符串是只读的。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_057"},{"content":"下面这段代码输出什么？\ntype People struct{} func (p *People) ShowA() { fmt.Println(\u0026#34;showA\u0026#34;) p.ShowB() } func (p *People) ShowB() { fmt.Println(\u0026#34;showB\u0026#34;) } type Teacher struct { People } func (t *Teacher) ShowB() { fmt.Println(\u0026#34;teacher showB\u0026#34;) } func main() { t := Teacher{} t.ShowA() } 🔑 答案解析： 答 \u0026ldquo;showA\u0026rdquo; \u0026ldquo;showB\u0026rdquo;\nt.ShowA() 会优先调用t自己的ShowA，但是题中未定义着调用父 struct的showA。运行到p.ShowB()时，这里注意是p *People p是父 struct，他会调用p自己的ShowB 因此输出 \u0026ldquo;showA\u0026rdquo; \u0026ldquo;showB\u0026rdquo;\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_056/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showA\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;teacher showB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答\n\u0026ldquo;showA\u0026rdquo;\n\u0026ldquo;showB\u0026rdquo;\u003c/p\u003e\n\u003cp\u003et.ShowA() 会优先调用t自己的ShowA，但是题中未定义着调用父\nstruct的showA。运行到p.ShowB()时，这里注意是p *People p是父\nstruct，他会调用p自己的ShowB\n因此输出\n\u0026ldquo;showA\u0026rdquo;\n\u0026ldquo;showB\u0026rdquo;\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_056"},{"content":"下面这段代码输出什么?\nfunc hello(i int) { fmt.Println(i) } func main() { i := 5 defer hello(i) i = i + 10 } 🔑 答案解析： 答 5 hello() 函数的参数在执行 defer 语句的时候会保存一份副本，在实际调用 hello() 函数时用，所以是 5.\n\u0026gt;Golang中的Defer必掌握的7知识点\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_055/","summary":"\u003cp\u003e下面这段代码输出什么?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 5\nhello() 函数的参数在执行 defer 语句的时候会保存一份副本，在实际调用 hello() 函数时用，所以是 5.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\":/b738512884944749b814f27444efcd2c\"\u003e\u0026gt;Golang中的Defer必掌握的7知识点\u003c/a\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_055"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { t := struct { time.Time N int }{ time.Date(2020, 12, 20, 0, 0, 0, 0, time.UTC), 5, } m, _ := json.Marshal(t) fmt.Printf(\u0026#34;%s\u0026#34;, m) } A：{\u0026ldquo;Time\u0026rdquo;: \u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;, \u0026ldquo;N\u0026rdquo;: 5 }；B：\u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;；C：{\u0026ldquo;N\u0026rdquo;: 5}；D：\u0026lt;nil\u0026gt;\n🔑 答案解析： 答 B 题中time.Time 是内嵌到匿名struct 中的，也就是继承了time.Time 。 time.Time 的重写了MarshalJSON 方法因此会按照time.Time 的MarshalJSON 规定的格式输出 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_054/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDate\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2020\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUTC\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMarshal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA：{\u0026ldquo;Time\u0026rdquo;: \u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;, \u0026ldquo;N\u0026rdquo;: 5 }；B：\u0026ldquo;2020-12-20T00:00:00Z\u0026rdquo;；C：{\u0026ldquo;N\u0026rdquo;: 5}；D：\u003ccode\u003e\u0026lt;nil\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答 B\n题中time.Time 是内嵌到匿名struct 中的，也就是继承了time.Time 。\ntime.Time 的重写了MarshalJSON 方法因此会按照time.Time  的MarshalJSON 规定的格式输出\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_054"},{"content":"定义一个包内全局字符串变量，下面语法正确的是（多选）：\nA. var str string B. str := \u0026quot;\u0026quot; C. str = \u0026quot;\u0026quot; D. var str = \u0026quot;\u0026quot;\n🔑 答案解析： A D 关键在 包内全局 B := 只能用到函数没 C 是赋值并不是声明 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_053/","summary":"\u003cp\u003e定义一个包内全局字符串变量，下面语法正确的是（多选）：\u003c/p\u003e\n\u003cp\u003eA. var str string\nB. str := \u0026quot;\u0026quot;\nC. str = \u0026quot;\u0026quot;\nD. var str = \u0026quot;\u0026quot;\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A D\n关键在 包内全局\nB := 只能用到函数没\nC 是赋值并不是声明\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_053"},{"content":"下面这段代码输出什么？\ntype People struct{} func (p *People) ShowA() { fmt.Println(\u0026#34;showA\u0026#34;) p.ShowB() } func (p *People) ShowB() { fmt.Println(\u0026#34;showB\u0026#34;) } type Teacher struct { People } func (t *Teacher) ShowB() { fmt.Println(\u0026#34;teacher showB\u0026#34;) } func main() { t := Teacher{} t.ShowB() } 🔑 答案解析： 答 ：teacher showB t.ShowB() 会使用自己已有的ShowB() ， 若要使用父struct（People）的ShowB() 需要改为 t.People.ShowB() ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_052/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowA\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showA\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;teacher showB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTeacher\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eShowB\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答 ：teacher showB\nt.ShowB() 会使用自己已有的ShowB() ， 若要使用父struct（People）的ShowB()  需要改为\nt.People.ShowB()\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_052"},{"content":"下面这段代码输出什么？\nfunc main() { i := -5 j := +5 fmt.Printf(\u0026#34;%+d %+d\u0026#34;, i, j) } A. -5 +5 B. +5 +5 C. 0 0 🔑 答案解析： A %d表示输出十进制数字，+表示输出数值的符号。这里不表示取反。 %d 输出 正数不会输出符号 + ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_051/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%+d %+d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. -5 +5\nB. +5 +5\nC. 0 0\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A\n%d表示输出十进制数字，+表示输出数值的符号。这里不表示取反。\n%d 输出 正数不会输出符号 +\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_051"},{"content":"下面这段代码输出什么？\nfunc main() { s := make(map[string]int) delete(s, \u0026#34;h\u0026#34;) fmt.Println(s[\u0026#34;h\u0026#34;]) } A. runtime panic B. 0 C. compilation error 🔑 答案解析： B 0 delete 一个不存在的key并不会panic 输出一个不存在的key会输出类型的零值\n扩展\nfunc main() { var s map[string]int delete(s, \u0026#34;h\u0026#34;) s[\u0026#34;h\u0026#34;] = 1 fmt.Println(s[\u0026#34;h\u0026#34;]) } delete nil map 程序也不会panic 但是往nil map 写数据会panic\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_050/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delete(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. runtime panic\nB. 0\nC. compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB 0\ndelete 一个不存在的key并不会panic\n输出一个不存在的key会输出类型的零值\u003c/p\u003e\n\u003cp\u003e扩展\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delete(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003edelete nil map 程序也不会panic\n但是往nil map 写数据会panic\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_050"},{"content":"下面这段代码输出什么？\nfunc main() { var i interface{} if i == nil { fmt.Println(\u0026#34;nil\u0026#34;) return } fmt.Println(\u0026#34;not nil\u0026#34;) } A. nil B. not nil C. compilation error\n🔑 答案解析： A 接口类型 当动态值和动态类型都为 nil 时，接口类型值才为 nil。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_049/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. nil\nB. not nil\nC. compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A\n接口类型 当动态值和动态类型都为 nil 时，接口类型值才为 nil。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_049"},{"content":"以下哪种类型可以使用 cap() 函数？\nA. array B. slice C. map D. channel\n🔑 答案解析： ABD 数组 切片 管道 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_048/","summary":"\u003cp\u003e以下哪种类型可以使用 cap() 函数？\u003c/p\u003e\n\u003cp\u003eA. array\nB. slice\nC. map\nD. channel\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  ABD\n数组 切片 管道\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_048"},{"content":"下面这段代码输出什么？\nfunc main() { a := [2]int{5, 6} b := [3]int{5, 6} if a == b { fmt.Println(\u0026#34;equal\u0026#34;) } else { fmt.Println(\u0026#34;not equal\u0026#34;) } } A. compilation error B. equal C. not equal 🔑 答案解析： A 只有同容量，同类型的数组才能比较 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_047/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;equal\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not equal\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. compilation error\nB. equal\nC. not equal\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  A\n只有同容量，同类型的数组才能比较\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_047"},{"content":"下面这段代码输出什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { a := [5]int{1, 2, 3, 4, 5} t := a[3:4:4] fmt.Println(t[0]) } A.3 B.4 C.compilation error 🔑 答案解析： 答B 解析 t := a[3:4:4] 基于a切片生成一个新切片t ,该t的起始指向a[3]的位置,到a[4]停止 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_046/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA.3\nB.4\nC.compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答B\n解析 t := a[3:4:4]\n基于a切片生成一个新切片t ,该t的起始指向a[3]的位置,到a[4]停止\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_046"},{"content":"以下代码能否通过编译？\npackage main import ( \u0026#34;fmt\u0026#34; ) type worker interface { work() } type person struct { name string worker } func main() { var w worker = person{} fmt.Println(w) } A: 能；B: 不能；C: 不知道\n🔑 答案解析： A\nGo结构体中是可以嵌套接口类型的\n嵌入接口有实际用途。 例：标准库中 sort 包中，有一个接口：Interface\ntype Interface interface { // Len is the number of elements in the collection. Len() int // Less reports whether the element with // index i should sort before the element with index j. Less(i, j int) bool // Swap swaps the elements with indexes i and j. Swap(i, j int) } type reverse struct { // This embedded Interface permits Reverse to use the methods of // another Interface implementation. Interface } 它就内嵌了一个 Interface，用于排序的反转。\n而内嵌接口的关键在于如何给这个内嵌的接口赋值。sort 包有一个函数：Reverse\nfunc Reverse(data Interface) Interface { return \u0026amp;reverse{data} } 其中实例化 reverse 时，直接通过传递的 Interface 实例赋值给 reverse 的内嵌接口，然后 reverse 类型可以有选择的重新实现内嵌的 Interface 的方法。比如 Less 方法：\nfunc (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) } 回到上面的题目，如果我们通过实例化的 w 调用 work 方法会报错：\nvar w worker = person{} w.work() // panic 和上面 reverse 类似，你需要给 person 中的 worker 实例化，也就是需要一个实现了 worker 接口的类型实例。比如：\ntype student struct{ name string } func (s student) work() { fmt.Println(\u0026#34;I am \u0026#34;, s.name, \u0026#34;, I am learning\u0026#34;) } 然后这样实例化 person：\nvar w worker = person{worker: student{\u0026#34;polarisxu\u0026#34;}} ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_045/","summary":"\u003cp\u003e以下代码能否通过编译？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ework\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eworker\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ew\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA: 能；B: 不能；C: 不知道\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eA\u003c/p\u003e\n\u003cp\u003eGo结构体中是可以嵌套接口类型的\u003c/p\u003e\n\u003cp\u003e嵌入接口有实际用途。\n例：标准库中 sort 包中，有一个接口：Interface\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInterface\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Len is the number of elements in the collection.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLen\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Less reports whether the element with\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// index i should sort before the element with index j.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eLess\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Swap swaps the elements with indexes i and j.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSwap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ej\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// This embedded Interface permits Reverse to use the methods of\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// another Interface implementation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eInterface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它就内嵌了一个 Interface，用于排序的反转。\u003c/p\u003e","title":"Go每日一题_045"},{"content":"以下代码有什么问题，怎么解决？\ntotal, sum := 0, 0 for i := 1; i \u0026lt;= 10; i++ { sum += i go func() { total += i }() } fmt.Printf(\u0026#34;total:%d sum %d\u0026#34;, total, sum) 🔑 答案解析： sum 的值 55 total 的值 55 - 100 之前\n考点一： 知道输出的效果是什么，且知道如何解决。 考点二： data race。因为存在多 goroutine 同时写 total 变量的问题，所以有数据竞争。 考点三： main 函数先退出了，开启的 goroutine 根本没有机会执行。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_044/","summary":"\u003cp\u003e以下代码有什么问题，怎么解决？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etotal\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etotal\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;total:%d sum %d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etotal\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003esum 的值 55\ntotal 的值 55 - 100 之前\u003c/p\u003e\n\u003cp\u003e考点一：\n知道输出的效果是什么，且知道如何解决。\n考点二：\ndata race。因为存在多 goroutine 同时写 total 变量的问题，所以有数据竞争。\n考点三：\nmain 函数先退出了，开启的 goroutine 根本没有机会执行。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_044"},{"content":"以下代码输出什么？\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) type AutoGenerated struct { Age int `json:\u0026#34;age\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Child []int `json:\u0026#34;child\u0026#34;` } func main() { jsonStr1 := `{\u0026#34;age\u0026#34;: 14,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), \u0026amp;a) aa := a.Child fmt.Println(aa) jsonStr2 := `{\u0026#34;age\u0026#34;: 12,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[3,4,5,7,8,9]}` json.Unmarshal([]byte(jsonStr2), \u0026amp;a) fmt.Println(aa) } A：[1 2 3] [1 2 3] B：[1 2 3] [3 4 5] C：[1 2 3] [3 4 5 6 7 8 9] D：[1 2 3] [3 4 5 0 0 0] 🔑 答案解析： 答： B 解析： Json反序列化时,切片的处理方式是将切片的len值改为0后append数据。 因为 aa := a.Child aa 和 a.Child 切片指向同一个数组，append 到6时，因为a.Child未扩容，所以修改底层数组等同于修改aa的数据。但是在append到7时，a.Child 切片发生了切片扩容指向了新的数组。 因此aa的数据为 [3 4 5] ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_043/","summary":"\u003cp\u003e以下代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAutoGenerated\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eAge\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e    \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;age\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;name\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eChild\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e  \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;child\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejsonStr1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;age\u0026#34;: 14,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[1,2,3]}`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAutoGenerated\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003ejsonStr1\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eaa\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eChild\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaa\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejsonStr2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;age\u0026#34;: 12,\u0026#34;name\u0026#34;: \u0026#34;potter\u0026#34;, \u0026#34;child\u0026#34;:[3,4,5,7,8,9]}`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003ejsonStr2\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaa\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA：[1 2 3] [1 2 3]\u003c/li\u003e\n\u003cli\u003eB：[1 2 3] [3 4 5]\u003c/li\u003e\n\u003cli\u003eC：[1 2 3] [3 4 5 6 7 8 9]\u003c/li\u003e\n\u003cli\u003eD：[1 2 3] [3 4 5 0 0 0]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答： B\n解析：\nJson反序列化时,切片的处理方式是将切片的len值改为0后append数据。\n因为     aa := a.Child  aa 和 a.Child 切片指向同一个数组，append 到6时，因为a.Child未扩容，所以修改底层数组等同于修改aa的数据。但是在append到7时，a.Child 切片发生了切片扩容指向了新的数组。\n因此aa的数据为 [3 4 5]\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_043"},{"content":"下面这段代码输出什么？\nfunc main() { a := 5 b := 8.1 fmt.Println(a + b) } A.13.1 B.13 C.compilation error\n🔑 答案解析： 参考答案及解析：C。a 的类型是 int，b 的类型是 float，两个不同类型的数值不能相加，编译报错。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_042/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA.13.1\nB.13\nC.compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  参考答案及解析：C。a 的类型是 int，b 的类型是 float，两个不同类型的数值不能相加，编译报错。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_042"},{"content":"下面这段代码输出什么？\nfunc hello(num ...int) { num[0] = 18 } func main() { i := []int{5, 6, 7} hello(i...) fmt.Println(i[0]) } A.18 B.5 C.Compilation error 🔑 答案解析： 答： A 18 解析：\u0026hellip; 变质是传切片，又因为未发生切片扩容，因此这2个切片指的底层数组是同一个。因此i[0]被改为18\n这里对原题目做出小改动\npackage main import \u0026#34;fmt\u0026#34; func hello(num ...int) { num = append(num, 1) num[0] = 18 } func main() { i := []int{5, 6, 7} hello(i...) fmt.Println(i[0]) } 改动后 num的切片发送了扩容，导致2个切片指的底层数组不通，因此不会影响到 i切片 最终print 输出 5\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_041/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA.18\nB.5\nC.Compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答： A 18\n解析：\u0026hellip; 变质是传切片，又因为未发生切片扩容，因此这2个切片指的底层数组是同一个。因此i[0]被改为18\u003c/p\u003e\n\u003cp\u003e这里对原题目做出小改动\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e改动后 num的切片发送了扩容，导致2个切片指的底层数组不通，因此不会影响到 i切片 最终print 输出 5\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_041"},{"content":"下面这段代码输出什么？\ntype person struct { name string } func main() { var m map[person]int p := person{\u0026#34;mike\u0026#34;} fmt.Println(m[p]) } A.0 B.1 C.Compilation error 🔑 答案解析： 答 ：A 0\nm 是一个 map，值是 nil。从 nil map 中取值不会报错，而是返回相应的零值，这里值是 int 类型，因此返回 0。\n注意 ： nil map是可以取值，但是不能赋值。会导致程序panic的\npackage main import \u0026#34;fmt\u0026#34; type person struct { name string } func main() { var m map[person]int p := person{\u0026#34;mike\u0026#34;} m[p] = 2 fmt.Println(m[p]) } 运行结果：panic: assignment to entry in nil map\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_040/","summary":"\u003cp\u003e下面这段代码输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mike\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA.0\nB.1\nC.Compilation error\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答 ：A 0\u003c/p\u003e\n\u003cp\u003em 是一个 map，值是 nil。从 nil map 中取值不会报错，而是返回相应的零值，这里值是 int 类型，因此返回 0。\u003c/p\u003e\n\u003cp\u003e注意 ： nil map是可以取值，但是不能赋值。会导致程序panic的\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperson\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mike\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e] = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行结果：panic: assignment to entry in nil map\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e\n\u003c/p\u003e","title":"Go每日一题_040"},{"content":"关于 channel，下面语法正确的是：\nA. var ch chan int B. ch := make(chan int) C. \u0026lt;- ch D. ch \u0026lt;- 🔑 答案解析： 答：ABC\nA、B 都是声明 channel；C 读取 channel； 写 channel 是必须带上值，所以 D 错误。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_039/","summary":"\u003cp\u003e关于 channel，下面语法正确的是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e. \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e. \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e. \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eD\u003c/span\u003e. \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：ABC\u003c/p\u003e\n\u003cp\u003eA、B 都是声明 channel；C 读取 channel；\n写 channel 是必须带上值，所以 D 错误。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_039"},{"content":"以下代码有什么问题？\npackage main import ( \u0026#34;sync\u0026#34; ) const N = 10 var wg = \u0026amp;sync.WaitGroup{} func main() { for i := 0; i \u0026lt; N; i++ { go func(i int) { wg.Add(1) println(i) defer wg.Done() }(i) } wg.Wait() } 🔑 答案解析： 答：输出结果不唯一，代码存在风险, 所有 go 语句未必都能执行到。 解析：\nvar wg = \u0026amp;sync.WaitGroup{} wg.Add(1) wg.Done() wg.Wait() 该用法类似一个栈,wg.Wait()判断wg中是否还有记录有的话堵塞直到栈为0才开始活跃。 这里的写法存在问题。wg.Add(1)被放到了协程中，导致存在未运行wg.Add(1)，wg.Wait()就已经判断结束了。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_038/","summary":"\u003cp\u003e以下代码有什么问题？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#a6e22e\"\u003eN\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }(\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：输出结果不唯一，代码存在风险, 所有 go 语句未必都能执行到。\n解析：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWaitGroup\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAdd\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该用法类似一个栈,wg.Wait()判断wg中是否还有记录有的话堵塞直到栈为0才开始活跃。\n这里的写法存在问题。wg.Add(1)被放到了协程中，导致存在未运行wg.Add(1)，wg.Wait()就已经判断结束了。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_038"},{"content":"执行下面的代码会发生什么？\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { ch := make(chan int, 1000) go func() { for i := 0; i \u0026lt; 10; i++ { ch \u0026lt;- i } }() go func() { for { a, ok := \u0026lt;-ch if !ok { fmt.Println(\u0026#34;close\u0026#34;) return } fmt.Println(\u0026#34;a: \u0026#34;, a) } }() close(ch) fmt.Println(\u0026#34;ok\u0026#34;) time.Sleep(time.Second * 100) } 🔑 答案解析： 答 输出\u0026quot;ok\u0026quot;后panic 启动协程需要时间,这里程序运行close(ch)一句关闭channel了,往已关闭的channel写数据会导致程序panic ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_037/","summary":"\u003cp\u003e执行下面的代码会发生什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;close\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a: \u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    close(\u003cspan style=\"color:#a6e22e\"\u003ech\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ok\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答\n输出\u0026quot;ok\u0026quot;后panic\n启动协程需要时间,这里程序运行close(ch)一句关闭channel了,往已关闭的channel写数据会导致程序panic\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_037"},{"content":"下面这段代码能否编译通过？如果可以，输出什么？\nfunc GetValue() int { return 1 } func main() { i := GetValue() switch i.(type) { case int: println(\u0026#34;int\u0026#34;) case string: println(\u0026#34;string\u0026#34;) case interface{}: println(\u0026#34;interface\u0026#34;) default: println(\u0026#34;unknown\u0026#34;) } } 🔑 答案解析： 答 编译错误 这里使用到了 类型断言。 但是注意只有接口类型才能进行类型断言。 i.(type)，这里i 的类型是 int 而不是 接口 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_036/","summary":"\u003cp\u003e下面这段代码能否编译通过？如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetValue\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetValue\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e.(\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;int\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;interface\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答 编译错误\n这里使用到了 类型断言。 但是注意只有接口类型才能进行类型断言。 i.(type)，这里i 的类型是 int 而不是 接口\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_036"},{"content":"下面这段代码输出什么以及原因？\nfunc hello() []string { return nil } func main() { h := hello if h == nil { fmt.Println(\u0026#34;nil\u0026#34;) } else { fmt.Println(\u0026#34;not nil\u0026#34;) } } A. nil B. not nil C. compilation error\n🔑 答案解析： B。这道题目里面，是将函数 hello 赋值给变量 h，而不是函数的返回值（即不是进行函数调用），所以输出 not nil。注意 Go 中函数是一等公民。\n如果修改为\nfunc hello() []string { return nil } func main() { h := hello() if h == nil { fmt.Println(\u0026#34;nil\u0026#34;) } else { fmt.Println(\u0026#34;not nil\u0026#34;) } } 答案才能为A\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_035/","summary":"\u003cp\u003e下面这段代码输出什么以及原因？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e() []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA. nil\nB. not nil\nC. compilation error\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eB。这道题目里面，是将函数 hello 赋值给变量 h，而不是函数的返回值（即不是进行函数调用），所以输出 not nil。注意 Go 中函数是一等公民。\u003c/p\u003e\n\u003cp\u003e如果修改为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e() []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehello\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eh\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not nil\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e答案才能为A\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_035"},{"content":"关于 init 函数，下面说法正确的是：(多选)\nA. 一个包中，可以包含多个 init 函数； B. 程序运行时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数； C. main 包中，不能有 init 函数； D. init 函数可以被其他函数调用；\n🔑 答案解析： 答案是AB ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_034/","summary":"\u003cp\u003e关于 init 函数，下面说法正确的是：(多选)\u003c/p\u003e\n\u003cp\u003eA. 一个包中，可以包含多个 init 函数；\nB. 程序运行时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数；\nC. main 包中，不能有 init 函数；\nD. init 函数可以被其他函数调用；\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答案是AB\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_034"},{"content":"今天给两道类似的题目，注意，有半数以上的人可能会做错！\npackage main func main() { var a int8 = -1 var b int8 = -128 / a println(b) } package main func main() { const a int8 = -1 var b int8 = -128 / a println(b) } 🔑 答案解析： 题一： 因为 var b int8 = -128 / a 不是常量表达式，因此 untyped 常量 -128 隐式转换为 int8 类型（即和 a 的类型一致），所以 -128 / a 的结果是 int8 类型，值是 128，超出了 int8 的范围。因为结果不是常量，允许溢出，128 的二进制表示是 10000000，正好是 -128 的补码。所以，第一题的结果是 -128。 题二： -128 和 -1 都是 const，直接在编译时求值，untyped 的 -128 隐式转 int8，结果为 128，仍然是一个 const。const 转换时不允许溢出，编译错误。 其实差别就是表达式的值，题一不是常量题二是，常量类型转换不允许溢出后 truncate。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_033/","summary":"\u003cp\u003e今天给两道类似的题目，注意，有半数以上的人可能会做错！\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint8\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  题一：\n因为 var b int8 = -128 / a 不是常量表达式，因此 untyped 常量 -128 隐式转换为 int8 类型（即和 a 的类型一致），所以 -128 / a 的结果是 int8 类型，值是 128，超出了 int8 的范围。因为结果不是常量，允许溢出，128 的二进制表示是 10000000，正好是 -128 的补码。所以，第一题的结果是 -128。\n题二：\n-128 和 -1 都是 const，直接在编译时求值，untyped 的 -128 隐式转 int8，结果为 128，仍然是一个 const。const 转换时不允许溢出，编译错误。 其实差别就是表达式的值，题一不是常量题二是，常量类型转换不允许溢出后 truncate。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_033"},{"content":"以下代码能通过编译吗？为什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) type People interface { Speak(string) string } type Student struct{} func (stu *Student) Speak(think string) (talk string) { if think == \u0026#34;love\u0026#34; { talk = \u0026#34;You are a good boy\u0026#34; } else { talk = \u0026#34;hi\u0026#34; } return } func main() { var peo People = Student{} think := \u0026#34;love\u0026#34; fmt.Println(peo.Speak(think)) } 🔑 答案解析： 编译不通过，因为 是*Student重写interface的接口 而不是Student。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_030/","summary":"\u003cp\u003e以下代码能通过编译吗？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;love\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;You are a good boy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;love\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  编译不通过，因为 是*Student重写interface的接口 而不是Student。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_030"},{"content":"以下代码打印出来什么内容，说出为什么。\npackage main import ( \u0026#34;fmt\u0026#34; ) type People interface { Show() } type Student struct{} func (stu *Student) Show() { } func live() People { var stu *Student return stu } func main() { if live() == nil { fmt.Println(\u0026#34;AAAAAAA\u0026#34;) } else { fmt.Println(\u0026#34;BBBBBBB\u0026#34;) } } 🔑 答案解析： 输出的是BBBBBBB 简单解释一下，就是接口的底层其实是有2个指针 一个指向类型,一个指向值。\n//伪代码 指针{ 类型指针 值指针 } live()函数中 var stu *Student 类型 返回是 Prople指针 返回的内容 接口{ 类型指针 -\u0026gt;*Student 值指针 -\u0026gt; nil } if 接口类型 == nil 会判断类型指针 和 值指针 2个都为nil 结果才为T\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_031/","summary":"\u003cp\u003e以下代码打印出来什么内容，说出为什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eShow\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elive\u003c/span\u003e() \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elive\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AAAAAAA\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;BBBBBBB\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e输出的是BBBBBBB\n简单解释一下，就是接口的底层其实是有2个指针 一个指向类型,一个指向值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//伪代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e指针{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    类型指针\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    值指针\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003elive()函数中\nvar stu *Student 类型 返回是 Prople指针\n返回的内容\n接口{\n类型指针 -\u0026gt;*Student\n值指针  -\u0026gt; nil\n}\nif 接口类型 == nil\n会判断类型指针 和 值指针 2个都为nil 结果才为T\u003c/p\u003e","title":"Go每日一题_031"},{"content":"以下代码能通过编译吗？为什么？\npackage main import ( \u0026#34;fmt\u0026#34; ) type People interface { Speak(string) string } type Student struct{} func (stu *Student) Speak(think string) (talk string) { if think == \u0026#34;love\u0026#34; { talk = \u0026#34;You are a good boy\u0026#34; } else { talk = \u0026#34;hi\u0026#34; } return } func main() { var peo People = Student{} think := \u0026#34;love\u0026#34; fmt.Println(peo.Speak(think)) } 🔑 答案解析： 不能,应为是*Student 实现了People接口的方法。 而现在是Student 赋值给People接口类型。因此编译错误 需要修改为\nvar peo People = \u0026amp;Student{} ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_032/","summary":"\u003cp\u003e以下代码能通过编译吗？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;love\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;You are a good boy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etalk\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hi\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;love\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSpeak\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ethink\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e不能,应为是*Student 实现了People接口的方法。\n而现在是Student 赋值给People接口类型。因此编译错误\n需要修改为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epeo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePeople\u003c/span\u003e = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_032"},{"content":"下面这段代码能否通过编译，如果可以，输出什么？\npackage main var( size := 1024 max_size = size*2 ) func main() { fmt.Println(size,max_size) } 🔑 答案解析： 答：不能\nvar( size := 1024 ) 不符合规范 问题1：var 声明变量不能使用 := 问题2: := 只能在函数内使用，本题在声明全局变量中使用 参考解析：这道题的主要知识点是变量声明的简短模式，形如：x := 100.\n但这种声明方式有限制 必须使用显示初始化； 不能提供数据类型，编译器会自动推导； 只能在函数内部使用简短模式； ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_022/","summary":"\u003cp\u003e下面这段代码能否通过编译，如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emax_size\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003emax_size\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：不能\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e不符合规范\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e问题1\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e：\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e声明变量不能使用\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e问题2\u003c/span\u003e:  \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e只能在函数内使用\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e，\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e本题在声明全局变量中使用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参考解析：这道题的主要知识点是变量声明的简短模式，形如：x := 100.\u003c/p\u003e\n\u003ch4 id=\"但这种声明方式有限制\"\u003e但这种声明方式有限制\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e必须使用显示初始化；\u003c/li\u003e\n\u003cli\u003e不能提供数据类型，编译器会自动推导；\u003c/li\u003e\n\u003cli\u003e只能在函数内部使用简短模式；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_022"},{"content":"通过指针变量 p 访问其成员变量 name，有哪几种方式？（多选）\nA.p.name\rB.(\u0026amp;p).name\rC.(*p).name\rD.p-\u0026gt;name 🔑 答案解析： 答: AC \u0026amp; 取址运算符，指针解引用。 p 是指针变量, 因此可以使用指针解引用 Go有语法糖,直接使用 指针变量.成员变量 也是可以访问的 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_023/","summary":"\u003cp\u003e通过指针变量 p 访问其成员变量 name，有哪几种方式？（多选）\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eA.p.name\r\nB.(\u0026amp;p).name\r\nC.(*p).name\r\nD.p-\u0026gt;name\n\u003c/code\u003e\u003c/pre\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答:\nAC\n\u0026amp; 取址运算符，\u003cem\u003e指针解引用。\np 是指针变量, 因此可以使用\u003c/em\u003e指针解引用\nGo有语法糖,直接使用 指针变量.成员变量 也是可以访问的\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_023"},{"content":"下面这段代码能否通过编译？如果通过，输出什么？\npackage main import \u0026#34;fmt\u0026#34; type MyInt1 int type MyInt2 = int func main() { var i int =0 var i1 MyInt1 = i var i2 MyInt2 = i fmt.Println(i1,i2) } 🔑 答案解析： 答: 不能 参考解析：这道题考的是类型别名与类型定义的区别。 类型别名type MyInt2 = int 类型定义type MyInt1 int Go 赋值 = 左右的类型需要一致。 MyInt1 是基于int定义的新类型,因此不能直接赋值。如果需要赋值，需要类型转换var i1 MyInt1 = MyInt1(i) ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_024/","summary":"\u003cp\u003e下面这段代码能否通过编译？如果通过，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt1\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt2\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e =\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei1\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt1\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei2\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyInt2\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ei1\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ei2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答: 不能\n参考解析：这道题考的是类型别名与类型定义的区别。\n类型别名\u003ccode\u003etype MyInt2 = int\u003c/code\u003e\n类型定义\u003ccode\u003etype MyInt1 int\u003c/code\u003e\nGo 赋值 = 左右的类型需要一致。\nMyInt1 是基于int定义的新类型,因此不能直接赋值。如果需要赋值，需要类型转换\u003ccode\u003evar i1 MyInt1 = MyInt1(i)\u003c/code\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_024"},{"content":"关于字符串连接，下面语法正确的是？\nA. str := \u0026#39;abc\u0026#39; + \u0026#39;123\u0026#39;\rB. str := \u0026#34;abc\u0026#34; + \u0026#34;123\u0026#34;\rC. str := \u0026#39;123\u0026#39; + \u0026#34;abc\u0026#34;\rD. fmt.Sprintf(\u0026#34;abc%d\u0026#34;, 123) 🔑 答案解析： 答：BD \u0026rsquo; \u0026rsquo; 只能用于单字符 因此AC都无法通过编译\n字符串链接推荐使用 buffer.WriteString()\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_025/","summary":"\u003cp\u003e关于字符串连接，下面语法正确的是？\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eA. str := \u0026#39;abc\u0026#39; + \u0026#39;123\u0026#39;\r\nB. str := \u0026#34;abc\u0026#34; + \u0026#34;123\u0026#34;\r\nC. str := \u0026#39;123\u0026#39; + \u0026#34;abc\u0026#34;\r\nD. fmt.Sprintf(\u0026#34;abc%d\u0026#34;, 123)\n\u003c/code\u003e\u003c/pre\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：BD\n\u0026rsquo;  \u0026rsquo; 只能用于单字符 因此AC都无法通过编译\u003c/p\u003e\n\u003cp\u003e字符串链接推荐使用 \u003ccode\u003ebuffer.WriteString()\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_025"},{"content":"以下代码能否编译？\npackage main import \u0026#34;fmt\u0026#34; type Student struct { Name string } var list map[string]Student func main() { list = make(map[string]Student) student := Student{\u0026#34;Aceld\u0026#34;} list[\u0026#34;student\u0026#34;] = student list[\u0026#34;student\u0026#34;].Name = \u0026#34;LDB\u0026#34; fmt.Println(list[\u0026#34;student\u0026#34;]) } 🔑 答案解析： 答：编译失败。 map[string]Student 的 value 是一个 Student 结构值，所以当list[\u0026quot;student\u0026quot;] = student,是一个值拷贝过程。而list[\u0026ldquo;student\u0026rdquo;]则是一个值引用。那么值引用的特点是只读。所以对list[\u0026ldquo;student\u0026rdquo;].Name = \u0026ldquo;LDB\u0026quot;的修改是不允许的。\n如果真要修改需要New一个新的结构体，修改内容后重新赋值\n//list[\u0026#34;student\u0026#34;].Name = \u0026#34;LDB\u0026#34; newStudent := list[\u0026#34;student\u0026#34;] newStudent.Name = \u0026#34;LDB\u0026#34; list[\u0026#34;student\u0026#34;] = newStudent 或者将map value 改为一个 Student 结构值指针 map[string]*Student\npackage main import \u0026#34;fmt\u0026#34; type Student struct { Name string } var list map[string]*Student func main() { list = make(map[string]*Student) student := Student{\u0026#34;Aceld\u0026#34;} list[\u0026#34;student\u0026#34;] = \u0026amp;student list[\u0026#34;student\u0026#34;].Name = \u0026#34;LDB\u0026#34; fmt.Println(list[\u0026#34;student\u0026#34;]) } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_026/","summary":"\u003cp\u003e以下代码能否编译？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e = make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Aceld\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;LDB\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：编译失败。\n\u003ccode\u003emap[string]Student\u003c/code\u003e  的 value 是一个 Student 结构值，所以当\u003ccode\u003elist[\u0026quot;student\u0026quot;] = student\u003c/code\u003e,是一个值拷贝过程。而list[\u0026ldquo;student\u0026rdquo;]则是一个值引用。那么值引用的特点是\u003ccode\u003e只读\u003c/code\u003e。所以对list[\u0026ldquo;student\u0026rdquo;].Name = \u0026ldquo;LDB\u0026quot;的修改是不允许的。\u003c/p\u003e\n\u003cp\u003e如果真要修改需要New一个新的结构体，修改内容后重新赋值\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//list[\u0026#34;student\u0026#34;].Name = \u0026#34;LDB\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enewStudent\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enewStudent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;LDB\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003enewStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者将map value 改为一个 Student 结构值指针\nmap[string]*Student\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e = make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eStudent\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Aceld\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;LDB\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;student\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_026"},{"content":"以下代码有什么问题，说明原因\npackage main import ( \u0026#34;fmt\u0026#34; ) type student struct { Name string Age int } func main() { //定义map m := make(map[string]*student) //定义student数组 stus := []student{ {Name: \u0026#34;zhou\u0026#34;, Age: 24}, {Name: \u0026#34;li\u0026#34;, Age: 23}, {Name: \u0026#34;wang\u0026#34;, Age: 22}, } //将数组依次添加到map中 for _, stu := range stus { m[stu.Name] = \u0026amp;stu } //打印map for k,v := range m { fmt.Println(k ,\u0026#34;=\u0026gt;\u0026#34;, v.Name) } } 🔑 答案解析： 注意此类问题在Go版本在1.22 版本后将会有变化 🔗:修复 Go 1.22 中的 For 循环\nGo \u0026gt;=1.22\nzhou =\u0026gt; zhou li =\u0026gt; li wang =\u0026gt; wang Go \u0026lt; 1.22\nzhou =\u0026gt; wang li =\u0026gt; wang wang =\u0026gt; wang Go1.22版本前\n//将数组依次添加到map中 for _, stu := range stus { m[stu.Name] = \u0026amp;stu } 这里stu的地址是相同的，因此每次循环m[stu.Name] 存储的值都是相同的。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_027/","summary":"\u003cp\u003e以下代码有什么问题，说明原因\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eAge\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//定义map\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//定义student数组\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estus\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#a6e22e\"\u003estudent\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zhou\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eAge\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;li\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eAge\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wang\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eAge\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//将数组依次添加到map中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estus\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estu\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//打印map\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e ,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;=\u0026gt;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch3 id=\"注意此类问题在go版本在122-版本后将会有变化\"\u003e注意此类问题在Go版本在1.22 版本后将会有变化\u003c/h3\u003e\n\u003cp\u003e🔗:\u003ca href=\"https://go.dev/blog/loopvar-preview\"\u003e修复 Go 1.22 中的 For 循环\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGo \u0026gt;=1.22\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ezhou\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ezhou\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eli\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eli\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewang\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ewang\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eGo \u0026lt; 1.22\u003c/p\u003e","title":"Go每日一题_027"},{"content":"下面这段代码能否编译通过？如果可以，输出什么？\nconst ( x = iota _ y z = \u0026#34;zz\u0026#34; k p = iota ) func main() { fmt.Println(x,y,z,k,p) } 🔑 答案解析： 参考答案：编译通过，输出：0 2 zz zz 5\nconst 定义的时候 若变量后未跟随值将会沿用上一个变量的值\nconst ( x = iota _ = iota y = iota z = \u0026#34;zz\u0026#34; k = \u0026#34;zz\u0026#34; p = iota ) iota 相当于const语句块的行索引\nconst ( x = 0 _ = 1 y = 2 z = \u0026#34;zz\u0026#34; k = \u0026#34;zz\u0026#34; p = 5 ) ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_028/","summary":"\u003cp\u003e下面这段代码能否编译通过？如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zz\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e参考答案：编译通过，输出：0 2 zz zz 5\u003c/p\u003e\n\u003cp\u003econst 定义的时候 若变量后未跟随值将会沿用上一个变量的值\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zz\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zz\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eiota 相当于const语句块的行索引\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ez\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zz\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zz\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_028"},{"content":"下面赋值正确的是：\nA. var x = nil B. var x interface{} = nil C. var x string = nil D. var x error = nil\n🔑 答案解析： BD。这道题考的知识点是 nil。nil 只能赋值给指针\nA 未指定类型 B 空接口 可以赋值nil C 字符串本质是个只读切片 不可以赋值nil D error 本质是个接口类型 可以赋值nil\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_029/","summary":"\u003cp\u003e下面赋值正确的是：\u003c/p\u003e\n\u003cp\u003eA. var x = nil\nB. var x interface{} = nil\nC. var x string = nil\nD. var x error = nil\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003eBD。这道题考的知识点是 nil。nil 只能赋值给指针\u003c/p\u003e\n\u003cp\u003eA 未指定类型\nB 空接口 可以赋值nil\nC 字符串本质是个只读切片 不可以赋值nil\nD error 本质是个接口类型 可以赋值nil\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_029"},{"content":"写出程序运行的结果：\npackage main import ( \u0026#34;fmt\u0026#34; ) func main(){ s := make([]int, 10) s = append(s, 1, 2, 3) fmt.Println(s) } 🔑 答案解析： 答： [0 0 0 0 0 0 0 0 0 0 1 2 3] make( 类型 , cap , len) 若只填写 cap, 则 len = cap 因此 s := make([]int, 10) s 切片的值 [0 0 0 0 0 0 0 0 0 0] ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_021/","summary":"\u003cp\u003e写出程序运行的结果：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答：\n[0 0 0 0 0 0 0 0 0 0 1 2 3]\nmake( 类型 , cap , len)\n若只填写 cap, 则 len = cap\n因此 s := make([]int, 10)\ns 切片的值  [0 0 0 0 0 0 0 0 0 0]\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_021"},{"content":"下面这段代码输出什么，说明原因。\nfunc main() { slice := []int{0,1,2,3} m := make(map[int]*int) for key,val := range slice { m[key] = \u0026amp;val } for k,v := range m { fmt.Println(k,\u0026#34;-\u0026gt;\u0026#34;,*v) } } 🔑 答案解析： 注意此类问题在Go版本在1.22 版本后将会有变化 🔗:修复 Go 1.22 中的 For 循环\nGo \u0026gt;=1.22\n0 -\u0026gt; 0 1 -\u0026gt; 1 2 -\u0026gt; 2 3 -\u0026gt; 3 解释：Go \u0026lt;= 1.22 当 for key,val := range slice 时,每次循环都会创建新变量 key、val。从而实现每次循环的 key、val变量的地址都是不同的。\n在源代码上增加验证打印\npackage main import \u0026#34;fmt\u0026#34; func main() { slice := []int{0, 1, 2, 3} m := make(map[int]*int) for key, val := range slice { m[key] = \u0026amp;val fmt.Println(\u0026#34;key的值\u0026#34;, key, \u0026#34;key的地址\u0026#34;, \u0026amp;key, \u0026#34;slice[\u0026#34;, key, \u0026#34;] 的地址\u0026#34;, \u0026amp;slice[key], \u0026#34;val 的地址\u0026#34;, \u0026amp;val) } fmt.Println(\u0026#34;m集合的内容\u0026#34;, m) for k, v := range m { fmt.Println(k, \u0026#34;-\u0026gt;\u0026#34;, *v) } } //GO版本 1.22.4 key的值 0 key的地址 0xc00000a0e0 slice[ 0 ] 的地址 0xc000014200 val 的地址 0xc00000a0c8 key的值 1 key的地址 0xc00000a110 slice[ 1 ] 的地址 0xc000014208 val 的地址 0xc00000a0e8 key的值 2 key的地址 0xc00000a120 slice[ 2 ] 的地址 0xc000014210 val 的地址 0xc00000a118 key的值 3 key的地址 0xc00000a130 slice[ 3 ] 的地址 0xc000014218 val 的地址 0xc00000a128 m集合的内容 map[0:0xc00000a0c8 1:0xc00000a0e8 2:0xc00000a118 3:0xc00000a128] 0 -\u0026gt; 0 1 -\u0026gt; 1 2 -\u0026gt; 2 3 -\u0026gt; 3 Go \u0026lt;1.22\n0 -\u0026gt; 3 1 -\u0026gt; 3 2 -\u0026gt; 3 3 -\u0026gt; 3 解析：当 for key,val := range slice 时，是创建了新变量 key、val。val变量的值 = 在每笔循环中都被赋值为slice元素的值。 当代码运行到m[key] = \u0026amp;val, m[key] 的值 = val变量的地址。共遍历了4轮，每轮都存储的是val变量的地址，又因为在每轮for中val的地址是不变的，但是val的地址指向的值在不断被赋值为slice元素的值 [0-\u0026gt;1-\u0026gt;2-\u0026gt;3]。因此for循环结束后m集合中值地址指向都为3\n在源代码上增加验证打印\npackage main import \u0026#34;fmt\u0026#34; func main() { slice := []int{0, 1, 2, 3} m := make(map[int]*int) for key, val := range slice { m[key] = \u0026amp;val fmt.Println(\u0026#34;key的值\u0026#34;, key, \u0026#34;key的地址\u0026#34;, \u0026amp;key, \u0026#34;slice[\u0026#34;, key, \u0026#34;] 的地址\u0026#34;, \u0026amp;slice[key], \u0026#34;val 的地址\u0026#34;, \u0026amp;val) } fmt.Println(\u0026#34;m集合的内容\u0026#34;, m) for k, v := range m { fmt.Println(k, \u0026#34;-\u0026gt;\u0026#34;, *v) } } //GO版本 1.20.5 key的值 0 key的地址 0xc00000a0c8 slice[ 0 ] 的地址 0xc00000e220 val 的地址 0xc00000a0e0 key的值 1 key的地址 0xc00000a0c8 slice[ 1 ] 的地址 0xc00000e228 val 的地址 0xc00000a0e0 key的值 2 key的地址 0xc00000a0c8 slice[ 2 ] 的地址 0xc00000e230 val 的地址 0xc00000a0e0 key的值 3 key的地址 0xc00000a0c8 slice[ 3 ] 的地址 0xc00000e238 val 的地址 0xc00000a0e0 m集合的内容 map[0:0xc00000a0e0 1:0xc00000a0e0 2:0xc00000a0e0 3:0xc00000a0e0] 0 -\u0026gt; 3 1 -\u0026gt; 3 2 -\u0026gt; 3 3 -\u0026gt; 3 知识点: for range 循环的时候会创建每个元素的副本，而不是元素的引用\n参考资料：\n🔗:【golang】for range中取地址操作的陷阱 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_001/","summary":"\u003cp\u003e下面这段代码输出什么，说明原因。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026gt;\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003ch3 id=\"注意此类问题在go版本在122-版本后将会有变化\"\u003e注意此类问题在Go版本在1.22 版本后将会有变化\u003c/h3\u003e\n\u003cp\u003e🔗:\u003ca href=\"https://go.dev/blog/loopvar-preview\"\u003e修复 Go 1.22 中的 For 循环\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGo \u0026gt;=1.22\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解释：Go \u0026lt;= 1.22 当 \u003ccode\u003efor key,val := range slice\u003c/code\u003e 时,每次循环都会创建新变量 \u003ccode\u003ekey\u003c/code\u003e、\u003ccode\u003eval\u003c/code\u003e。从而实现每次循环的 \u003ccode\u003ekey\u003c/code\u003e、\u003ccode\u003eval\u003c/code\u003e变量的地址都是\u003ccode\u003e不同\u003c/code\u003e的。\u003c/p\u003e\n\u003cp\u003e在源代码上增加验证打印\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e] = \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key的值\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;key的地址\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;slice[\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;] 的地址\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e], \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;val 的地址\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;m集合的内容\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026gt;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//GO版本 1.22.4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekey的值 0 key的地址 0xc00000a0e0 slice[ 0 ] 的地址 0xc000014200 val 的地址 0xc00000a0c8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekey的值 1 key的地址 0xc00000a110 slice[ 1 ] 的地址 0xc000014208 val 的地址 0xc00000a0e8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekey的值 2 key的地址 0xc00000a120 slice[ 2 ] 的地址 0xc000014210 val 的地址 0xc00000a118\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekey的值 3 key的地址 0xc00000a130 slice[ 3 ] 的地址 0xc000014218 val 的地址 0xc00000a128\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003em集合的内容 map[0:0xc00000a0c8 1:0xc00000a0e8 2:0xc00000a118 3:0xc00000a128]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0 -\u0026gt; 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 -\u0026gt; 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2 -\u0026gt; 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e3 -\u0026gt; 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eGo \u0026lt;1.22\u003c/p\u003e","title":"Go每日一题_001"},{"content":"下面这段代码输出的内容\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { defer_call() } func defer_call() { defer func() { fmt.Println(\u0026#34;打印前\u0026#34;) }() defer func() { fmt.Println(\u0026#34;打印中\u0026#34;) }() defer func() { fmt.Println(\u0026#34;打印后\u0026#34;) }() panic(\u0026#34;触发异常\u0026#34;) } 🔑 答案解析： 打印后 打印中 打印前 panic: 触发异常 解析：defer 的执行顺序是后进先出。当出现 panic 语句的时候，会先按照 defer 的后进先出的顺序执行，最后才会执行panic。\n知识点:defer后进先出\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_002/","summary":"\u003cp\u003e下面这段代码输出的内容\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edefer_call\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefer_call\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() { \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;打印前\u0026#34;\u003c/span\u003e) }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() { \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;打印中\u0026#34;\u003c/span\u003e) }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() { \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;打印后\u0026#34;\u003c/span\u003e) }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    panic(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;触发异常\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e打印后\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e打印中\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e打印前\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epanic: 触发异常\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解析：defer 的执行顺序是后进先出。当出现 panic 语句的时候，会先按照 defer 的后进先出的顺序执行，最后才会执行panic。\u003c/p\u003e\n\u003cp\u003e知识点:\u003ccode\u003edefer后进先出\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_002"},{"content":"map 的 key 为什么是无序的？\n在遍历 map 的时候，我们会发现，输出的 key 是无序的。为什么？\n🔑 答案解析： 在go \u0026lt;= 1.0 以后 迭代 map 的结果是无序的。 这是Golang map的实现原理导致的。在扩容中Map会指向新的桶，这是并不会立刻全部迁移，而是会指向新桶和旧桶。遍历Map上本质遍历这2个桶。但是发生了扩容Key的位置改变导致遍历的结果不同。 在go \u0026gt; 1.0 以前遍历Map的时候 不扩容时是有序的，扩容后将改变顺序。为了统一这个问题go\u0026gt;=1.0加入了遍历Map会随机播种，使得遍历无序。\n参考资料：\n🔗:key为什么是无序的 🔗:为什么遍历 Go map 是无序的(源码分析) ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_003/","summary":"\u003cp\u003emap 的 key 为什么是无序的？\u003c/p\u003e\n\u003cp\u003e在遍历 map 的时候，我们会发现，输出的 key 是无序的。为什么？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e在go \u0026lt;= 1.0 以后 迭代 map 的结果是无序的。\n这是Golang map的实现原理导致的。在扩容中Map会指向新的桶，这是并不会立刻全部迁移，而是会指向新桶和旧桶。遍历Map上本质遍历这2个桶。但是发生了扩容Key的位置改变导致遍历的结果不同。\n在go \u0026gt; 1.0 以前遍历Map的时候 不扩容时是有序的，扩容后将改变顺序。为了统一这个问题go\u0026gt;=1.0加入了遍历Map会随机播种，使得遍历无序。\u003c/p\u003e\n\u003cp\u003e参考资料：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔗:\u003ca href=\"https://golang.design/go-questions/map/unordered\"\u003ekey为什么是无序的\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e🔗:\u003ca href=\"https://cloud.tencent.com/developer/article/1422355\"\u003e为什么遍历 Go map 是无序的(源码分析)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_003"},{"content":"下面这段代码有什么缺陷：\nfunc sum(x, y int)(total int, error) { return x+y, nil } 🔑 答案解析： 答案:(total int, error) 第二个返回值error没有命名\n解析: 在函数有多个返回值时，只要有一个返回值有命名，其他的也必须命名。 func sum(x, y int)(total int,err error) {如果有多个返回值必须加上括号()； func sum(x, y int)(total int,err error) func sum(x, y int)int如果只有一个返回值且命名也必须加上括号()。func sum(x, y int)(total int) {\n这里的第一个返回值有命名 total，第二个没有命名，所以错误。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_006/","summary":"\u003cp\u003e下面这段代码有什么缺陷：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)(\u003cspan style=\"color:#a6e22e\"\u003etotal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答案:\u003ccode\u003e(total int, error)\u003c/code\u003e 第二个返回值error没有命名\u003c/p\u003e\n\u003cp\u003e解析:\n在函数有多个返回值时，只要有一个返回值有命名，其他的也必须命名。\n\u003ccode\u003efunc sum(x, y int)(total int,err error) {\u003c/code\u003e如果有多个返回值必须加上括号()；\n\u003ccode\u003efunc sum(x, y int)(total int,err error)\u003c/code\u003e\n\u003ccode\u003efunc sum(x, y int)int\u003c/code\u003e如果只有一个返回值且命名也必须加上括号()。\u003ccode\u003efunc sum(x, y int)(total int) {\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这里的第一个返回值有命名 total，第二个没有命名，所以错误。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_006"},{"content":"以下代码是否能编译通过？\npackage main import \u0026#34;fmt\u0026#34; func main() { m := make(map[string]int) fmt.Println(\u0026amp;m[\u0026#34;qcrao\u0026#34;]) } 🔑 答案解析： 答:不能,编译报错\n.\\main.go:8:15: invalid operation: cannot take address of m[\u0026ldquo;qcrao\u0026rdquo;] (map index expression of type int)\n解析: 这个问题，相当于问：可以对 map 的元素直接取地址吗？\n知识点:无法直接对 map 的 key 或 value 进行取址。如果通过其他 hack 的方式，例如 unsafe.Pointer 等获取到了 key 或 value 的地址，也不能长期持有，因为一旦发生扩容，key 和 value 的位置就会改变，之前保存的地址也就失效了。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_007/","summary":"\u003cp\u003e以下代码是否能编译通过？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qcrao\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:不能,编译报错\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e.\\main.go:8:15: invalid operation: cannot take address of m[\u0026ldquo;qcrao\u0026rdquo;] (map index expression of type int)\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e解析:\n这个问题，相当于问：可以对 map 的元素直接取地址吗？\u003c/p\u003e\n\u003cp\u003e知识点:\u003ccode\u003e无法直接对 map 的 key 或 value 进行取址。\u003c/code\u003e如果通过其他 hack 的方式，例如 unsafe.Pointer 等获取到了 key 或 value 的地址，也不能长期持有，因为一旦发生扩容，key 和 value 的位置就会改变，之前保存的地址也就失效了。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_007"},{"content":"如何确认两个 map 是否相等？\n🔑 答案解析： map 深度相等的条件：\n都为 nil 非空、长度相等，指向同一个 map 实体对象 相应的 key 指向的 value “深度”相等\n直接将使用 map1 == map2 是错误的。这种写法只能比较 map 是否为 nil。\npackage main import \u0026#34;fmt\u0026#34; func main() { var m map[string]int var n map[string]int fmt.Println(m == nil) fmt.Println(n == nil) // 不能通过编译 //fmt.Println(m == n) } 方案一: 遍历（比较麻烦） 遍历 map 的每个元素，比较元素是否都是深度相等。 方案二: 反射\npackage main import( \u0026#34;fmt\u0026#34; \u0026#34;relflect\u0026#34; ) func main() { var m map[string]int var n map[string]int fmt.Println(reflect.DeepEqual(m,n)) } 参考资料：\n🔗:reflect.DeepEqual函数：判断两个值是否一致 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_008/","summary":"\u003cp\u003e如何确认两个 map 是否相等？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003emap 深度相等的条件：\u003c/p\u003e\n\u003cp\u003e都为 nil\n非空、长度相等，指向同一个 map 实体对象\n相应的 key 指向的 value “深度”相等\u003c/p\u003e\n\u003cp\u003e直接将使用 \u003ccode\u003emap1 == map2\u003c/code\u003e 是\u003ccode\u003e错误\u003c/code\u003e的。这种写法只能比较 map 是否为 nil。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 不能通过编译\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//fmt.Println(m == n)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e方案一: 遍历（比较麻烦）\n遍历 map 的每个元素，比较元素是否都是深度相等。\n方案二: 反射\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e( \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;relflect\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ereflect\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDeepEqual\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参考资料：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔗:\u003ca href=\"https://blog.csdn.net/m0_37710023/article/details/108284171\"\u003ereflect.DeepEqual函数：判断两个值是否一致\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_008"},{"content":"空 struct{} 占多少空间？有什么用途？\n🔑 答案解析： 答:0 , 用于占位符\n例如:\nmap[string]struct{},只关注key是否存在的话可以使用节省内存空间 ch := make(chan struct{}, 1)，使用信道(channel)控制并发时，我们只是需要一个信号，但并不需要传递值，这个时候，也可以使用 struct{} 代替。 type Lamp struct{} ,声明只包含方法的结构体。 type Lamp struct{} func (l Lamp) On() { println(\u0026#34;On\u0026#34;) } func (l Lamp) Off() { println(\u0026#34;Off\u0026#34;) } 解析: Go为每一种类型都有全局唯一的类型元数据，元数据记录了该类型大小。因为空结构体内没有任何的类型因此空类型的大小为0。但是因为有创建类型元数据因此可以想正常的类型一样用于占位 这里建议看一下参考资料【幼麟实验室】- Go类型系统讲解\n参考资料：\n🔗📺️:【幼麟实验室】- Go类型系统讲解 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_009/","summary":"\u003cp\u003e空 struct{} 占多少空间？有什么用途？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:0 , 用于占位符\u003c/p\u003e\n\u003cp\u003e例如:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003emap[string]struct{},只关注key是否存在的话可以使用节省内存空间\u003c/li\u003e\n\u003cli\u003ech := make(chan struct{}, 1)，使用信道(channel)控制并发时，我们只是需要一个信号，但并不需要传递值，这个时候，也可以使用 struct{} 代替。\u003c/li\u003e\n\u003cli\u003etype Lamp struct{} ,声明只包含方法的结构体。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLamp\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLamp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eOn\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;On\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003el\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLamp\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eOff\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Off\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解析:\nGo为每一种类型都有全局唯一的类型元数据，元数据记录了该类型大小。因为空结构体内没有任何的类型因此空类型的大小为0。但是因为有创建类型元数据因此可以想正常的类型一样用于占位\n这里建议看一下参考资料\u003ccode\u003e【幼麟实验室】- Go类型系统讲解\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e参考资料：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔗📺️:\u003ca href=\"https://www.bilibili.com/video/BV1hv411x7we?p=12\u0026amp;vd_source=2efe9e7b9d8ada5878fa15a7ad28b0dd\"\u003e【幼麟实验室】- Go类型系统讲解\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_009"},{"content":"init() 函数是什么时候执行的？\n🔑 答案解析： 答:init()是再main()函数执行前\n一句话总结： import –\u0026gt; const –\u0026gt; var –\u0026gt; init() –\u0026gt; main()\n如果有多个init就要分情况\n单个源文件的 init 执行顺序 结论： 同一个源文件的 init 函数执行顺序与其定义顺序一致，从上到下。\npackage main func init() { println(\u0026#34;init a\u0026#34;) } func init() { println(\u0026#34;init b\u0026#34;) } func init() { println(\u0026#34;init c\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go run main.go init a init b init c main 单个包的 init 执行顺序 结论： 同一个包中不同源文件 init 函数的执行顺序，是根据文件名的字典序来确定。\n// a.go package main func init() { println(\u0026#34;init a\u0026#34;) } // b.go package main func init() { println(\u0026#34;init b\u0026#34;) } // c.go package main func init() { println(\u0026#34;init c\u0026#34;) } // main.go package main func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init a init b init c init main main main 包导入多个包时 init 执行顺序-不存在依赖 结论： 对于不同的包，如果不相互依赖的话，按照 main 包中导入顺序调用包的 init 函数，最后再调用 main 包的 init 函数。\n// a 包 // a.go package a func init() { println(\u0026#34;init a\u0026#34;) } // b 包 // b.go package b func init() { println(\u0026#34;init b\u0026#34;) } // c 包 // c.go package c func init() { println(\u0026#34;init c\u0026#34;) } // main 包 // main.go package main import ( _ \u0026#34;main/a\u0026#34; _ \u0026#34;main/b\u0026#34; _ \u0026#34;main/c\u0026#34; ) func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init a init b init c init main main main 包导入多个包时 init 执行顺序-存在依赖 结论： 如果 package 存在依赖，不同包的 init 函数按照包导入的依赖关系决定执行顺序。 调用顺序为最后被依赖的最先被初始化，如导入顺序 main \u0026gt; a \u0026gt; b \u0026gt; c，则初始化顺序为 c \u0026gt; b \u0026gt; a \u0026gt; main，依次执行对应的 init 方法\n// a 包 // a.go package a import _ \u0026#34;main/b\u0026#34; func init() { println(\u0026#34;init a\u0026#34;) } // b 包 // b.go package b import _ \u0026#34;main/c\u0026#34; func init() { println(\u0026#34;init b\u0026#34;) } // c 包 // c.go package c func init() { println(\u0026#34;init c\u0026#34;) } // main 包 // main.go package main import ( _ \u0026#34;main/a\u0026#34; ) func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init c init b init a init main main 包级变量初始化与 init 函数执行顺序 结论:如果包存在包级变量，则先于包的 init 函数完成初始化。\n// a 包 // a.go package a import _ \u0026#34;main/b\u0026#34; var A = func() string { println(\u0026#34;init var A\u0026#34;) return \u0026#34;A\u0026#34; }() func init() { println(\u0026#34;init a\u0026#34;) } // b 包 // b.go package b import _ \u0026#34;main/c\u0026#34; var B = func() string { println(\u0026#34;init var B\u0026#34;) return \u0026#34;B\u0026#34; }() func init() { println(\u0026#34;init b\u0026#34;) } // c 包 // c.go package c var C = func() string { println(\u0026#34;init var C\u0026#34;) return \u0026#34;C\u0026#34; }() func init() { println(\u0026#34;init c\u0026#34;) } // main 包 // main.go package main import ( _ \u0026#34;main/a\u0026#34; ) var m = func() string { println(\u0026#34;init var m\u0026#34;) return \u0026#34;m\u0026#34; }() func init() { println(\u0026#34;init main\u0026#34;) } func main() { println(\u0026#34;main\u0026#34;) } $ go build \u0026amp;\u0026amp; ./main init var C init c init var B init b init var A init a init var m init main main 参考资料:\n🔗:一文读懂 Golang init 函数执行顺序 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_010/","summary":"\u003cp\u003einit() 函数是什么时候执行的？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答:init()是再main()函数执行前\u003c/p\u003e\n\u003cp\u003e一句话总结： \u003ccode\u003eimport –\u0026gt; const –\u0026gt; var –\u0026gt; init() –\u0026gt; main()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果有多个init就要分情况\u003c/p\u003e\n\u003ch2 id=\"单个源文件的-init-执行顺序\"\u003e单个源文件的 init 执行顺序\u003c/h2\u003e\n\u003cp\u003e结论： \u003ccode\u003e同一个源文件的 init 函数执行顺序与其定义顺序一致，从上到下。\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init a\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init b\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init c\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"单个包的-init-执行顺序\"\u003e单个包的 init 执行顺序\u003c/h2\u003e\n\u003cp\u003e结论： \u003ccode\u003e同一个包中不同源文件 init 函数的执行顺序，是根据文件名的字典序来确定。\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// a.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init a\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// b.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init b\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// c.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init c\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// main.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init main\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e .\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"main-包导入多个包时-init-执行顺序-不存在依赖\"\u003emain 包导入多个包时 init 执行顺序-不存在依赖\u003c/h2\u003e\n\u003cp\u003e结论： \u003ccode\u003e对于不同的包，如果不相互依赖的话，按照 main 包中导入顺序调用包的 init 函数，最后再调用 main 包的 init 函数。\u003c/code\u003e\u003c/p\u003e","title":"Go每日一题_010"},{"content":"new() 与 make() 的区别\n🔑 答案解析： new(T) 会为 T 类型的新值分配已置零的内存空间，并返回地址（指针），即类型为 *T 的值。换句话说就是，返回一个指针，该指针指向新分配的、类型为 T 的零值。适用于值类型，如数组、结构体等。\nmake(T,args) 返回初始化之后的 T 类型的值，这个值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。make() 只适用于 slice、map 和 channel。\n参考资料:\n🔗📺️:【Golang】slice类型存什么？make和new？slice和数组？扩容规则 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_011/","summary":"\u003cp\u003enew() 与 make() 的区别\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003enew(T) 会为 T 类型的新值分配已置零的内存空间，并返回地址（指针），即类型为 *T 的值。换句话说就是，返回一个指针，该指针指向新分配的、类型为 T 的零值。适用于值类型，如数组、结构体等。\u003c/p\u003e\n\u003cp\u003emake(T,args) 返回初始化之后的 T 类型的值，这个值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。make() 只适用于 slice、map 和 channel。\u003c/p\u003e\n\u003cp\u003e参考资料:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔗📺️:\u003ca href=\"https://www.bilibili.com/video/BV1CV411d7W8/?spm_id_from=333.999.0.0\u0026amp;vd_source=2efe9e7b9d8ada5878fa15a7ad28b0dd\"\u003e【Golang】slice类型存什么？make和new？slice和数组？扩容规则\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_011"},{"content":"下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\nfunc main() { list := new([]int) list = append(list, 1) fmt.Println(list) } 🔑 答案解析： 不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_012/","summary":"\u003cp\u003e下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_012"},{"content":"下面这段代码能否通过编译，如果可以，输出什么？\nfunc main() { s1 := []int{1, 2, 3} s2 := []int{4, 5} s1 = append(s1, s2) fmt.Println(s1) } 🔑 答案解析： 不能通过编译。append() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_013/","summary":"\u003cp\u003e下面这段代码能否通过编译，如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  不能通过编译。append() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_013"},{"content":"","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_014/","summary":"","title":"Go每日一题_014"},{"content":"Go 1.15 中 var i interface{} = a 会有额外堆内存分配吗？ 具体代码是：\nvar a int = 3 // 以下有额外内存分配吗？ var i interface{} = a 🔑 答案解析： 正确答案:不会\n解析: *Go 1.15 发行说明**在 runtime 部分中提到了一个有趣的改进：\nConverting a small integer value into an interface value no longer causes allocation.\n意思是说，将小整数转换为接口值不再需要进行内存分配。小整数是指 0 到 255 之间的数。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_015/","summary":"\u003cp\u003eGo 1.15 中 var i interface{} = a 会有额外堆内存分配吗？\n具体代码是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 以下有额外内存分配吗？\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{} = \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e正确答案:不会\u003c/p\u003e\n\u003cp\u003e解析:\n*Go 1.15 发行说明**在 runtime 部分中提到了一个有趣的改进：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eConverting a small integer value into an interface value no longer causes allocation.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e意思是说，将小整数转换为接口值不再需要进行内存分配。小整数是指 \u003ccode\u003e0 到 255\u003c/code\u003e 之间的数。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_015"},{"content":"Go101 作者发布了一道有意思的题目，这道题主要考察细节点，Go101 这本书也是以抠细节著称。看看这道题，以下程序输出什么？（单选）\npackage main const s = \u0026#34;Go101.org\u0026#34; // len(s) == 9 // 1 \u0026lt;\u0026lt; 9 == 512 // 512 / 128 == 4 var a byte = 1 \u0026lt;\u0026lt; len(s) / 128 var b byte = 1 \u0026lt;\u0026lt; len(s[:]) / 128 func main() { println(a, b) } A、0 0 B、0 4 C：4 0 D：4 4 🔑 答案解析： 这里共有2个知识点：\nlen(s)\n若s为字符串常量或者简单的数组表达式，则len返回的为int型的常量 若s为不为上述情况（有函数计算、通道等），则len返回的为int型的变量 关于位移操作\n如果常量位移表达式 的左侧操作数是一个无类型常量，那么其结果是一个整数常量；否则就是和左侧操作数同一类型的常量（必须是 整数类型 ） 如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型 回到题目 const s = \u0026#34;Go101.org\u0026#34; // 声明了一个string常量s len(s) = 9 // len(string常量s) len返回的为int型的常量 len(s[:]) = 9 // len(string常量s的切片 ) len返回的为int型的变量 1 \u0026lt;\u0026lt; int型的常量 // 常量 位移表达式 1 \u0026lt;\u0026lt; int型的变量 //非 常量 位移表达式 常量 位移表达式的结果为整数常量 非常量 位移表达式 的结果要看左侧的操作数的类型。 如果左侧的操作数有类型,结果为原类型 若左侧的操作数无类型,结果为左侧的类型将被隐式转化为要赋值变量的类型。 该题目为byte 这里 byte 1 \u0026lt;\u0026lt; int 9 结果为 byte 512 越界了, = 0 0 / 9 = 0 因此输出结果 b = 0 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_016/","summary":"\u003cp\u003eGo101 作者发布了一道有意思的题目，这道题主要考察细节点，Go101 这本书也是以抠细节著称。看看这道题，以下程序输出什么？（单选）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go101.org\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// len(s) == 9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1 \u0026lt;\u0026lt; 9 == 512\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 512 / 128 == 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:]) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eA、0 0\u003c/li\u003e\n\u003cli\u003eB、0 4\u003c/li\u003e\n\u003cli\u003eC：4 0\u003c/li\u003e\n\u003cli\u003eD：4 4\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e这里共有2个知识点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003elen(s)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e若s为字符串常量或者简单的数组表达式，则len返回的为int型的常量\u003c/li\u003e\n\u003cli\u003e若s为不为上述情况（有函数计算、通道等），则len返回的为int型的变量\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e关于位移操作\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果常量位移表达式 的左侧操作数是一个无类型常量，那么其结果是一个整数常量；否则就是和左侧操作数同一类型的常量（必须是 整数类型 ）\u003c/li\u003e\n\u003cli\u003e如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"回到题目\"\u003e回到题目\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go101.org\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 声明了一个string常量s \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elen(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)  = \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// len(string常量s) len返回的为int型的常量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elen(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e[:])  = \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// len(string常量s的切片 ) len返回的为int型的变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eint型的常量\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// 常量 位移表达式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eint型的变量\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e//非  常量 位移表达式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e常量\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e位移表达式的结果为整数常量\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e非常量\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e位移表达式\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e的结果要看左侧的操作数的类型\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e如果左侧的操作数有类型\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003e结果为原类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e若左侧的操作数无类型\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003e结果为左侧的类型将被隐式转化为要赋值变量的类型\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e该题目为byte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e这里\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e结果为\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e512\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e越界了\u003c/span\u003e, = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e因此输出结果\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_016"},{"content":"下面代码是否可以编译通过？为什么？\npackage main import \u0026#34;fmt\u0026#34; func main() { sn1 := struct { age int name string }{age: 11, name: \u0026#34;qq\u0026#34;} sn2 := struct { age int name string }{age: 11, name: \u0026#34;qq\u0026#34;} if sn1 == sn2 { fmt.Println(\u0026#34;sn1 == sn2\u0026#34;) } sm1 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} sm2 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} if sm1 == sm2 { fmt.Println(\u0026#34;sm1 == sm2\u0026#34;) } } 🔑 答案解析： 答: 无法通过编译\n结构体比较规则注意1：只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关。 sn1 := struct { age int name string }{age: 11, name: \u0026#34;qq\u0026#34;} sn3:= struct { name string age int }{age:11, name:\u0026#34;qq\u0026#34;} sn3与sn1就不是相同的结构体了，不能比较。\n结构体比较规则注意2：结构体是相同的，但是结构体属性中有不可以比较的类型，如map,slice，则结构体不能用==比较。 sm1 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} sm2 := struct { age int m map[string]string }{age: 11, m: map[string]string{\u0026#34;a\u0026#34;: \u0026#34;1\u0026#34;}} if sm1 == sm2 { fmt.Println(\u0026#34;sm1 == sm2\u0026#34;) } sm1 与 sm2 的结构体属性类型为map 因此不可通过 == 比较 可以使用reflect.DeepEqual进行比较\nif reflect.DeepEqual(sm1, sm2) { fmt.Println(\u0026#34;sm1 == sm2\u0026#34;) } else { fmt.Println(\u0026#34;sm1 != sm2\u0026#34;) } ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_017/","summary":"\u003cp\u003e下面代码是否可以编译通过？为什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esn1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esn2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esn1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esn2\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sn1 == sn2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esm1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esm2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esm1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esm2\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sm1 == sm2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答: 无法通过编译\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e结构体比较规则注意1：只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esn1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esn3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;qq\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003esn3与sn1就不是相同的结构体了，不能比较。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e结构体比较规则注意2：结构体是相同的，但是结构体属性中有不可以比较的类型，如map,slice，则结构体不能用==比较。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esm1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esm2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }{\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esm1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esm2\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sm1 == sm2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003esm1 与 sm2 的结构体属性类型为map 因此不可通过 == 比较\n可以使用reflect.DeepEqual进行比较\u003c/p\u003e","title":"Go每日一题_017"},{"content":"下面代码有什么问题？\npackage main const cl = 100 var bl = 123 func main() { println(\u0026amp;bl,bl) println(\u0026amp;cl,cl) } 🔑 答案解析： 答: 编译不通过。 cl为 常量。常量无法获取地址 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_018/","summary":"\u003cp\u003e下面代码有什么问题？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecl\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebl\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e123\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ebl\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ebl\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecl\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ecl\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答: 编译不通过。\ncl为 常量。常量无法获取地址\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_018"},{"content":"下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\nfunc main() { list := new([]int) list = append(list, 1) fmt.Println(list) } 🔑 答案解析： 答: 无法通过编译。 list的类型是 *[]int 类型的指针。 append 第一个参数的类型是切片，不能为切片的地址\n可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_019/","summary":"\u003cp\u003e下面这段代码能否通过编译，不能的话原因是什么；如果通过，输出什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答: 无法通过编译。\nlist的类型是 *[]int 类型的指针。\nappend 第一个参数的类型是切片，不能为切片的地址\u003c/p\u003e\n\u003cp\u003e可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_019"},{"content":"下面这段代码能否通过编译，如果可以，输出什么？\nfunc main() { s1 := []int{1, 2, 3} s2 := []int{4, 5} s1 = append(s1, s2) fmt.Println(s1) } 🔑 答案解析： 答: 无法通过编译。 append() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_020/","summary":"\u003cp\u003e下面这段代码能否通过编译，如果可以，输出什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  答: 无法通过编译。\nappend() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_020"},{"content":"Go 的 map 可以边遍历边删除吗？\n🔑 答案解析： 答：理论上可以。 https://go.dev/doc/effective_go#for ， 这个官方例子也展示了可以在遍历的时候删除。 https://go.dev/ref/spec#For_statements ， 同时官方的range迭代也有说着遍历时删除和新增的情况\n但是清注意 map 并不是一个线程安全的数据结构。同时读写一个 map 是未定义的行为，如果被检测到，会直接 panic。 并发的去读写map是十分危险的,建议直接用m=make(map[T]T)生成新的map对象,老的map让GC自动回收内存空间\n","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_005/","summary":"\u003cp\u003eGo 的 map 可以边遍历边删除吗？\u003c/p\u003e\n\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cp\u003e答：理论上可以。\n\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"image.png\"\u003e\n\u003ca href=\"https://go.dev/doc/effective_go#for\"\u003ehttps://go.dev/doc/effective_go#for\u003c/a\u003e ， 这个官方例子也展示了可以在遍历的时候删除。\n\u003ca href=\"https://go.dev/ref/spec#For_statements\"\u003ehttps://go.dev/ref/spec#For_statements\u003c/a\u003e ， 同时官方的range迭代也有说着遍历时删除和新增的情况\u003c/p\u003e\n\u003ch1 id=\"但是清注意\"\u003e但是清注意\u003c/h1\u003e\n\u003cp\u003emap 并不是一个线程安全的数据结构。同时读写一个 map 是未定义的行为，如果被检测到，会直接 \u003ccode\u003epanic\u003c/code\u003e。\n并发的去读写map是十分危险的,建议直接用\u003ccode\u003em=make(map[T]T)\u003c/code\u003e生成新的map对象,老的map让GC自动回收内存空间\u003c/p\u003e\n\n\u003c/div\u003e\n\u003cstyle\u003e\n  .toggle-content {\n    display: none;\n    margin-top: 10px;\n  }\n  .toggle-content.show {\n    display: block;\n  }\n\u003c/style\u003e","title":"Go每日一题_005"},{"content":"下面两段代码输出什么。\n// 1. func main() { s := make([]int, 5) s = append(s, 1, 2, 3) fmt.Println(s) } // 2. func main() { s := make([]int, 0) s = append(s, 1, 2, 3, 4) fmt.Println(s) } 🔑 答案解析： // 1 [0 0 0 0 0 1 2 3] // 2 [1 2 3 4] 解析：首先了解一下切片的结构。\n// runtime/slice.go type slice struct { array unsafe.Pointer // 元素指针 len int // 长度 cap int // 容量 } slice 实际上是一个结构体，包含三个字段：长度、容量、底层数组。\nmake([]int, 5) 等价于 make([]int, 5, 5)，会创建一个 len = 5 cap = 5 的切片。s = append(s, 1, 2, 3) 会在切片长度(5)的后面增加 1, 2, 3。\n底层数组[5] = 1 底层数组[6] = 2 底层数组[7] = 3 题目2 创建一个 len = 0 cap = 0 的切片。\n参考资料：\n🔗: 数组和切片有什么不同 🔗📺️: 【Golang】slice类型存什么？make和new？slice和数组？扩容规则 🔗: 制作分片、映射和信道 🔗: 添加到和拷贝分片 ","permalink":"https://loommii.github.io/posts/go_practise/data/go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98_004/","summary":"\u003cp\u003e下面两段代码输出什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make([]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbutton class=\"toggle-button\" onclick=\"this.nextElementSibling.classList.toggle('show')\"\u003e🔑 答案解析：\u003c/button\u003e\n\u003cdiv class=\"toggle-content\"\u003e\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解析：首先了解一下切片的结构。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// runtime/slice.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003earray\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePointer\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 元素指针\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 长度 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecap\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 容量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"slice结构\" loading=\"lazy\" src=\"slice%E7%BB%93%E6%9E%84.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eslice 实际上是一个结构体，包含三个字段：长度、容量、底层数组。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003emake([]int, 5)\u003c/code\u003e 等价于 \u003ccode\u003emake([]int, 5, 5)\u003c/code\u003e，会创建一个 len = 5 cap = 5 的切片。\u003ccode\u003es = append(s, 1, 2, 3)\u003c/code\u003e 会在切片长度(5)的后面增加 1, 2, 3。\u003c/p\u003e","title":"Go每日一题_004"}]